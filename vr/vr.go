// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package vr

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type SandeshOp int64
const (
  SandeshOp_ADD SandeshOp = 0
  SandeshOp_GET SandeshOp = 1
  SandeshOp_DEL SandeshOp = 2
  SandeshOp_DUMP SandeshOp = 3
  SandeshOp_RESPONSE SandeshOp = 4
  SandeshOp_RESET SandeshOp = 5
)

func (p SandeshOp) String() string {
  switch p {
  case SandeshOp_ADD: return "ADD"
  case SandeshOp_GET: return "GET"
  case SandeshOp_DEL: return "DEL"
  case SandeshOp_DUMP: return "DUMP"
  case SandeshOp_RESPONSE: return "RESPONSE"
  case SandeshOp_RESET: return "RESET"
  }
  return "<UNSET>"
}

func SandeshOpFromString(s string) (SandeshOp, error) {
  switch s {
  case "ADD": return SandeshOp_ADD, nil 
  case "GET": return SandeshOp_GET, nil 
  case "DEL": return SandeshOp_DEL, nil 
  case "DUMP": return SandeshOp_DUMP, nil 
  case "RESPONSE": return SandeshOp_RESPONSE, nil 
  case "RESET": return SandeshOp_RESET, nil 
  }
  return SandeshOp(0), fmt.Errorf("not a valid SandeshOp string")
}


func SandeshOpPtr(v SandeshOp) *SandeshOp { return &v }

func (p SandeshOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SandeshOp) UnmarshalText(text []byte) error {
q, err := SandeshOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SandeshOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SandeshOp(v)
return nil
}

func (p * SandeshOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FlowOp int64
const (
  FlowOp_FLOW_SET FlowOp = 0
  FlowOp_FLOW_LIST FlowOp = 1
  FlowOp_FLOW_TABLE_GET FlowOp = 2
)

func (p FlowOp) String() string {
  switch p {
  case FlowOp_FLOW_SET: return "FLOW_SET"
  case FlowOp_FLOW_LIST: return "FLOW_LIST"
  case FlowOp_FLOW_TABLE_GET: return "FLOW_TABLE_GET"
  }
  return "<UNSET>"
}

func FlowOpFromString(s string) (FlowOp, error) {
  switch s {
  case "FLOW_SET": return FlowOp_FLOW_SET, nil 
  case "FLOW_LIST": return FlowOp_FLOW_LIST, nil 
  case "FLOW_TABLE_GET": return FlowOp_FLOW_TABLE_GET, nil 
  }
  return FlowOp(0), fmt.Errorf("not a valid FlowOp string")
}


func FlowOpPtr(v FlowOp) *FlowOp { return &v }

func (p FlowOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FlowOp) UnmarshalText(text []byte) error {
q, err := FlowOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FlowOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FlowOp(v)
return nil
}

func (p * FlowOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - HOp
//  - HID
type SandeshHdr struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  HID int32 `thrift:"h_id,2" db:"h_id" json:"h_id"`
}

func NewSandeshHdr() *SandeshHdr {
  return &SandeshHdr{}
}


func (p *SandeshHdr) GetHOp() SandeshOp {
  return p.HOp
}

func (p *SandeshHdr) GetHID() int32 {
  return p.HID
}
func (p *SandeshHdr) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SandeshHdr)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *SandeshHdr)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HID = v
}
  return nil
}

func (p *SandeshHdr) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sandesh_hdr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SandeshHdr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *SandeshHdr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:h_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:h_id: ", p), err) }
  return err
}

func (p *SandeshHdr) Equals(other *SandeshHdr) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.HID != other.HID { return false }
  return true
}

func (p *SandeshHdr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SandeshHdr(%+v)", *p)
}

// Attributes:
//  - HOp
//  - NhrType
//  - NhrFamily
//  - NhrID
//  - NhrRid
//  - NhrEncapOifID
//  - NhrEncapLen
//  - NhrEncapFamily
//  - NhrVrf
//  - NhrTunSip
//  - NhrTunDip
//  - NhrTunSport
//  - NhrTunDport
//  - NhrRefCnt
//  - NhrMarker
//  - NhrFlags
//  - NhrEncap
//  - NhrNhList
//  - NhrLabelList
//  - NhrNhCount
//  - NhrTunSip6
//  - NhrTunDip6
//  - NhrEcmpConfigHash
//  - NhrPbbMac
//  - NhrEncapCryptOifID
//  - NhrCryptTraffic
//  - NhrCryptPathAvailable
//  - NhrRwDstMac
//  - NhrTransportLabel
//  - NhrEncapValid
type VrNexthopReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  NhrType int8 `thrift:"nhr_type,2" db:"nhr_type" json:"nhr_type"`
  NhrFamily int8 `thrift:"nhr_family,3" db:"nhr_family" json:"nhr_family"`
  NhrID int32 `thrift:"nhr_id,4" db:"nhr_id" json:"nhr_id"`
  NhrRid int32 `thrift:"nhr_rid,5" db:"nhr_rid" json:"nhr_rid"`
  NhrEncapOifID []int32 `thrift:"nhr_encap_oif_id,6" db:"nhr_encap_oif_id" json:"nhr_encap_oif_id"`
  NhrEncapLen int32 `thrift:"nhr_encap_len,7" db:"nhr_encap_len" json:"nhr_encap_len"`
  NhrEncapFamily int32 `thrift:"nhr_encap_family,8" db:"nhr_encap_family" json:"nhr_encap_family"`
  NhrVrf int32 `thrift:"nhr_vrf,9" db:"nhr_vrf" json:"nhr_vrf"`
  NhrTunSip int32 `thrift:"nhr_tun_sip,10" db:"nhr_tun_sip" json:"nhr_tun_sip"`
  NhrTunDip int32 `thrift:"nhr_tun_dip,11" db:"nhr_tun_dip" json:"nhr_tun_dip"`
  NhrTunSport int16 `thrift:"nhr_tun_sport,12" db:"nhr_tun_sport" json:"nhr_tun_sport"`
  NhrTunDport int16 `thrift:"nhr_tun_dport,13" db:"nhr_tun_dport" json:"nhr_tun_dport"`
  NhrRefCnt int32 `thrift:"nhr_ref_cnt,14" db:"nhr_ref_cnt" json:"nhr_ref_cnt"`
  NhrMarker int32 `thrift:"nhr_marker,15" db:"nhr_marker" json:"nhr_marker"`
  NhrFlags int32 `thrift:"nhr_flags,16" db:"nhr_flags" json:"nhr_flags"`
  NhrEncap []int8 `thrift:"nhr_encap,17" db:"nhr_encap" json:"nhr_encap"`
  NhrNhList []int32 `thrift:"nhr_nh_list,18" db:"nhr_nh_list" json:"nhr_nh_list"`
  NhrLabelList []int32 `thrift:"nhr_label_list,19" db:"nhr_label_list" json:"nhr_label_list"`
  NhrNhCount int16 `thrift:"nhr_nh_count,20" db:"nhr_nh_count" json:"nhr_nh_count"`
  NhrTunSip6 []int8 `thrift:"nhr_tun_sip6,21" db:"nhr_tun_sip6" json:"nhr_tun_sip6"`
  NhrTunDip6 []int8 `thrift:"nhr_tun_dip6,22" db:"nhr_tun_dip6" json:"nhr_tun_dip6"`
  NhrEcmpConfigHash int8 `thrift:"nhr_ecmp_config_hash,23" db:"nhr_ecmp_config_hash" json:"nhr_ecmp_config_hash"`
  NhrPbbMac []int8 `thrift:"nhr_pbb_mac,24" db:"nhr_pbb_mac" json:"nhr_pbb_mac"`
  NhrEncapCryptOifID int32 `thrift:"nhr_encap_crypt_oif_id,25" db:"nhr_encap_crypt_oif_id" json:"nhr_encap_crypt_oif_id"`
  NhrCryptTraffic int32 `thrift:"nhr_crypt_traffic,26" db:"nhr_crypt_traffic" json:"nhr_crypt_traffic"`
  NhrCryptPathAvailable int32 `thrift:"nhr_crypt_path_available,27" db:"nhr_crypt_path_available" json:"nhr_crypt_path_available"`
  NhrRwDstMac []int8 `thrift:"nhr_rw_dst_mac,28" db:"nhr_rw_dst_mac" json:"nhr_rw_dst_mac"`
  NhrTransportLabel int32 `thrift:"nhr_transport_label,29" db:"nhr_transport_label" json:"nhr_transport_label"`
  NhrEncapValid []int32 `thrift:"nhr_encap_valid,30" db:"nhr_encap_valid" json:"nhr_encap_valid"`
}

func NewVrNexthopReq() *VrNexthopReq {
  return &VrNexthopReq{}
}


func (p *VrNexthopReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrNexthopReq) GetNhrType() int8 {
  return p.NhrType
}

func (p *VrNexthopReq) GetNhrFamily() int8 {
  return p.NhrFamily
}

func (p *VrNexthopReq) GetNhrID() int32 {
  return p.NhrID
}

func (p *VrNexthopReq) GetNhrRid() int32 {
  return p.NhrRid
}

func (p *VrNexthopReq) GetNhrEncapOifID() []int32 {
  return p.NhrEncapOifID
}

func (p *VrNexthopReq) GetNhrEncapLen() int32 {
  return p.NhrEncapLen
}

func (p *VrNexthopReq) GetNhrEncapFamily() int32 {
  return p.NhrEncapFamily
}

func (p *VrNexthopReq) GetNhrVrf() int32 {
  return p.NhrVrf
}

func (p *VrNexthopReq) GetNhrTunSip() int32 {
  return p.NhrTunSip
}

func (p *VrNexthopReq) GetNhrTunDip() int32 {
  return p.NhrTunDip
}

func (p *VrNexthopReq) GetNhrTunSport() int16 {
  return p.NhrTunSport
}

func (p *VrNexthopReq) GetNhrTunDport() int16 {
  return p.NhrTunDport
}

func (p *VrNexthopReq) GetNhrRefCnt() int32 {
  return p.NhrRefCnt
}

func (p *VrNexthopReq) GetNhrMarker() int32 {
  return p.NhrMarker
}

func (p *VrNexthopReq) GetNhrFlags() int32 {
  return p.NhrFlags
}

func (p *VrNexthopReq) GetNhrEncap() []int8 {
  return p.NhrEncap
}

func (p *VrNexthopReq) GetNhrNhList() []int32 {
  return p.NhrNhList
}

func (p *VrNexthopReq) GetNhrLabelList() []int32 {
  return p.NhrLabelList
}

func (p *VrNexthopReq) GetNhrNhCount() int16 {
  return p.NhrNhCount
}

func (p *VrNexthopReq) GetNhrTunSip6() []int8 {
  return p.NhrTunSip6
}

func (p *VrNexthopReq) GetNhrTunDip6() []int8 {
  return p.NhrTunDip6
}

func (p *VrNexthopReq) GetNhrEcmpConfigHash() int8 {
  return p.NhrEcmpConfigHash
}

func (p *VrNexthopReq) GetNhrPbbMac() []int8 {
  return p.NhrPbbMac
}

func (p *VrNexthopReq) GetNhrEncapCryptOifID() int32 {
  return p.NhrEncapCryptOifID
}

func (p *VrNexthopReq) GetNhrCryptTraffic() int32 {
  return p.NhrCryptTraffic
}

func (p *VrNexthopReq) GetNhrCryptPathAvailable() int32 {
  return p.NhrCryptPathAvailable
}

func (p *VrNexthopReq) GetNhrRwDstMac() []int8 {
  return p.NhrRwDstMac
}

func (p *VrNexthopReq) GetNhrTransportLabel() int32 {
  return p.NhrTransportLabel
}

func (p *VrNexthopReq) GetNhrEncapValid() []int32 {
  return p.NhrEncapValid
}
func (p *VrNexthopReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrNexthopReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.NhrType = temp
}
  return nil
}

func (p *VrNexthopReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.NhrFamily = temp
}
  return nil
}

func (p *VrNexthopReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NhrID = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NhrRid = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.NhrEncapOifID =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.NhrEncapOifID = append(p.NhrEncapOifID, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NhrEncapLen = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NhrEncapFamily = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NhrVrf = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NhrTunSip = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NhrTunDip = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NhrTunSport = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NhrTunDport = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NhrRefCnt = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NhrMarker = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NhrFlags = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.NhrEncap =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem1 = temp
}
    p.NhrEncap = append(p.NhrEncap, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.NhrNhList =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.NhrNhList = append(p.NhrNhList, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.NhrLabelList =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.NhrLabelList = append(p.NhrLabelList, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.NhrNhCount = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.NhrTunSip6 =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem4 = temp
}
    p.NhrTunSip6 = append(p.NhrTunSip6, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.NhrTunDip6 =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem5 = temp
}
    p.NhrTunDip6 = append(p.NhrTunDip6, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  temp := int8(v)
  p.NhrEcmpConfigHash = temp
}
  return nil
}

func (p *VrNexthopReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.NhrPbbMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem6 = temp
}
    p.NhrPbbMac = append(p.NhrPbbMac, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.NhrEncapCryptOifID = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.NhrCryptTraffic = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.NhrCryptPathAvailable = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.NhrRwDstMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem7 = temp
}
    p.NhrRwDstMac = append(p.NhrRwDstMac, _elem7)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.NhrTransportLabel = v
}
  return nil
}

func (p *VrNexthopReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.NhrEncapValid =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.NhrEncapValid = append(p.NhrEncapValid, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrNexthopReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_nexthop_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrNexthopReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_type", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nhr_type: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.NhrType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nhr_type: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_family", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nhr_family: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.NhrFamily)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nhr_family: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nhr_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nhr_id: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_rid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nhr_rid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_rid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nhr_rid: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap_oif_id", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nhr_encap_oif_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.NhrEncapOifID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrEncapOifID {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nhr_encap_oif_id: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap_len", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nhr_encap_len: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrEncapLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_encap_len (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nhr_encap_len: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap_family", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nhr_encap_family: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrEncapFamily)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_encap_family (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nhr_encap_family: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_vrf", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:nhr_vrf: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_vrf (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:nhr_vrf: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_sip", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nhr_tun_sip: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrTunSip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_tun_sip (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nhr_tun_sip: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_dip", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:nhr_tun_dip: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrTunDip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_tun_dip (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:nhr_tun_dip: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_sport", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:nhr_tun_sport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.NhrTunSport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_tun_sport (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:nhr_tun_sport: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_dport", thrift.I16, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:nhr_tun_dport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.NhrTunDport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_tun_dport (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:nhr_tun_dport: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_ref_cnt", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:nhr_ref_cnt: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrRefCnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_ref_cnt (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:nhr_ref_cnt: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_marker", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:nhr_marker: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_marker (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:nhr_marker: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_flags", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:nhr_flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_flags (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:nhr_flags: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap", thrift.LIST, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:nhr_encap: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.NhrEncap)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrEncap {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:nhr_encap: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_nh_list", thrift.LIST, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:nhr_nh_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.NhrNhList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrNhList {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:nhr_nh_list: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_label_list", thrift.LIST, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:nhr_label_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.NhrLabelList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrLabelList {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:nhr_label_list: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_nh_count", thrift.I16, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:nhr_nh_count: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.NhrNhCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_nh_count (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:nhr_nh_count: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_sip6", thrift.LIST, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:nhr_tun_sip6: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.NhrTunSip6)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrTunSip6 {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:nhr_tun_sip6: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_tun_dip6", thrift.LIST, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:nhr_tun_dip6: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.NhrTunDip6)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrTunDip6 {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:nhr_tun_dip6: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_ecmp_config_hash", thrift.BYTE, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:nhr_ecmp_config_hash: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.NhrEcmpConfigHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_ecmp_config_hash (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:nhr_ecmp_config_hash: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_pbb_mac", thrift.LIST, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:nhr_pbb_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.NhrPbbMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrPbbMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:nhr_pbb_mac: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap_crypt_oif_id", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:nhr_encap_crypt_oif_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrEncapCryptOifID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_encap_crypt_oif_id (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:nhr_encap_crypt_oif_id: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_crypt_traffic", thrift.I32, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:nhr_crypt_traffic: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrCryptTraffic)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_crypt_traffic (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:nhr_crypt_traffic: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_crypt_path_available", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:nhr_crypt_path_available: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrCryptPathAvailable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_crypt_path_available (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:nhr_crypt_path_available: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_rw_dst_mac", thrift.LIST, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:nhr_rw_dst_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.NhrRwDstMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrRwDstMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:nhr_rw_dst_mac: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_transport_label", thrift.I32, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:nhr_transport_label: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NhrTransportLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nhr_transport_label (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:nhr_transport_label: ", p), err) }
  return err
}

func (p *VrNexthopReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nhr_encap_valid", thrift.LIST, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:nhr_encap_valid: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.NhrEncapValid)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NhrEncapValid {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:nhr_encap_valid: ", p), err) }
  return err
}

func (p *VrNexthopReq) Equals(other *VrNexthopReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.NhrType != other.NhrType { return false }
  if p.NhrFamily != other.NhrFamily { return false }
  if p.NhrID != other.NhrID { return false }
  if p.NhrRid != other.NhrRid { return false }
  if len(p.NhrEncapOifID) != len(other.NhrEncapOifID) { return false }
  for i, _tgt := range p.NhrEncapOifID {
    _src9 := other.NhrEncapOifID[i]
    if _tgt != _src9 { return false }
  }
  if p.NhrEncapLen != other.NhrEncapLen { return false }
  if p.NhrEncapFamily != other.NhrEncapFamily { return false }
  if p.NhrVrf != other.NhrVrf { return false }
  if p.NhrTunSip != other.NhrTunSip { return false }
  if p.NhrTunDip != other.NhrTunDip { return false }
  if p.NhrTunSport != other.NhrTunSport { return false }
  if p.NhrTunDport != other.NhrTunDport { return false }
  if p.NhrRefCnt != other.NhrRefCnt { return false }
  if p.NhrMarker != other.NhrMarker { return false }
  if p.NhrFlags != other.NhrFlags { return false }
  if len(p.NhrEncap) != len(other.NhrEncap) { return false }
  for i, _tgt := range p.NhrEncap {
    _src10 := other.NhrEncap[i]
    if _tgt != _src10 { return false }
  }
  if len(p.NhrNhList) != len(other.NhrNhList) { return false }
  for i, _tgt := range p.NhrNhList {
    _src11 := other.NhrNhList[i]
    if _tgt != _src11 { return false }
  }
  if len(p.NhrLabelList) != len(other.NhrLabelList) { return false }
  for i, _tgt := range p.NhrLabelList {
    _src12 := other.NhrLabelList[i]
    if _tgt != _src12 { return false }
  }
  if p.NhrNhCount != other.NhrNhCount { return false }
  if len(p.NhrTunSip6) != len(other.NhrTunSip6) { return false }
  for i, _tgt := range p.NhrTunSip6 {
    _src13 := other.NhrTunSip6[i]
    if _tgt != _src13 { return false }
  }
  if len(p.NhrTunDip6) != len(other.NhrTunDip6) { return false }
  for i, _tgt := range p.NhrTunDip6 {
    _src14 := other.NhrTunDip6[i]
    if _tgt != _src14 { return false }
  }
  if p.NhrEcmpConfigHash != other.NhrEcmpConfigHash { return false }
  if len(p.NhrPbbMac) != len(other.NhrPbbMac) { return false }
  for i, _tgt := range p.NhrPbbMac {
    _src15 := other.NhrPbbMac[i]
    if _tgt != _src15 { return false }
  }
  if p.NhrEncapCryptOifID != other.NhrEncapCryptOifID { return false }
  if p.NhrCryptTraffic != other.NhrCryptTraffic { return false }
  if p.NhrCryptPathAvailable != other.NhrCryptPathAvailable { return false }
  if len(p.NhrRwDstMac) != len(other.NhrRwDstMac) { return false }
  for i, _tgt := range p.NhrRwDstMac {
    _src16 := other.NhrRwDstMac[i]
    if _tgt != _src16 { return false }
  }
  if p.NhrTransportLabel != other.NhrTransportLabel { return false }
  if len(p.NhrEncapValid) != len(other.NhrEncapValid) { return false }
  for i, _tgt := range p.NhrEncapValid {
    _src17 := other.NhrEncapValid[i]
    if _tgt != _src17 { return false }
  }
  return true
}

func (p *VrNexthopReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrNexthopReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VifrCore
//  - VifrType
//  - VifrFlags
//  - VifrVrf
//  - VifrIdx
//  - VifrRid
//  - VifrOsIdx
//  - VifrMtu
//  - VifrName
//  - VifrIi8s
//  - VifrIpackets
//  - VifrIerrors
//  - VifrOi8s
//  - VifrOpackets
//  - VifrOerrors
//  - VifrQueueIpackets
//  - VifrQueueIerrors
//  - VifrQueueIerrorsToLcore
//  - VifrQueueOpackets
//  - VifrQueueOerrors
//  - VifrPortIpackets
//  - VifrPortIerrors
//  - VifrPortIsyscalls
//  - VifrPortInombufs
//  - VifrPortOpackets
//  - VifrPortOerrors
//  - VifrPortOsyscalls
//  - VifrDevIi8s
//  - VifrDevIpackets
//  - VifrDevIerrors
//  - VifrDevInombufs
//  - VifrDevOi8s
//  - VifrDevOpackets
//  - VifrDevOerrors
//  - VifrRefCnt
//  - VifrMarker
//  - VifrMac
//  - VifrIP
//  - VifrIp6U
//  - VifrIp6L
//  - VifrContext
//  - VifrMirID
//  - VifrSpeed
//  - VifrDuplex
//  - VifrVlanID
//  - VifrParentVifIdx
//  - VifrNhID
//  - VifrCrossConnectIdx
//  - VifrSrcMac
//  - VifrBridgeIdx
//  - VifrOvlanID
//  - VifrTransport
//  - VifrFatFlowProtocolPort
//  - VifrQosMapIndex
//  - VifrInMirrorMd
//  - VifrOutMirrorMd
//  - VifrDpackets
//  - VifrHwQueues
//  - VifrIsid
//  - VifrPbbMac
//  - VifrVhostuserMode
//  - VifrMcastVrf
//  - VifrIfGUID
//  - VifrFatFlowExcludeIPList
//  - VifrFatFlowExcludeIp6UList
//  - VifrFatFlowExcludeIp6LList
//  - VifrFatFlowExcludeIp6PlenList
//  - VifrFatFlowSrcPrefixH
//  - VifrFatFlowSrcPrefixL
//  - VifrFatFlowSrcPrefixMask
//  - VifrFatFlowSrcAggregatePlen
//  - VifrFatFlowDstPrefixH
//  - VifrFatFlowDstPrefixL
//  - VifrFatFlowDstPrefixMask
//  - VifrFatFlowDstAggregatePlen
//  - VifrIntfStatus
//  - VifrFabName
//  - VifrFabDrvName
//  - VifrNumBondSlave
//  - VifrBondSlaveName
//  - VifrBondSlaveDrvName
//  - VifrVlanTag
//  - VifrVlanName
//  - VifrLoopbackIP
type VrInterfaceReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VifrCore int32 `thrift:"vifr_core,2" db:"vifr_core" json:"vifr_core"`
  VifrType int32 `thrift:"vifr_type,3" db:"vifr_type" json:"vifr_type"`
  VifrFlags int32 `thrift:"vifr_flags,4" db:"vifr_flags" json:"vifr_flags"`
  VifrVrf int32 `thrift:"vifr_vrf,5" db:"vifr_vrf" json:"vifr_vrf"`
  VifrIdx int32 `thrift:"vifr_idx,6" db:"vifr_idx" json:"vifr_idx"`
  VifrRid int32 `thrift:"vifr_rid,7" db:"vifr_rid" json:"vifr_rid"`
  VifrOsIdx int32 `thrift:"vifr_os_idx,8" db:"vifr_os_idx" json:"vifr_os_idx"`
  VifrMtu int32 `thrift:"vifr_mtu,9" db:"vifr_mtu" json:"vifr_mtu"`
  VifrName string `thrift:"vifr_name,10" db:"vifr_name" json:"vifr_name"`
  VifrIi8s int64 `thrift:"vifr_ii8s,11" db:"vifr_ii8s" json:"vifr_ii8s"`
  VifrIpackets int64 `thrift:"vifr_ipackets,12" db:"vifr_ipackets" json:"vifr_ipackets"`
  VifrIerrors int64 `thrift:"vifr_ierrors,13" db:"vifr_ierrors" json:"vifr_ierrors"`
  VifrOi8s int64 `thrift:"vifr_oi8s,14" db:"vifr_oi8s" json:"vifr_oi8s"`
  VifrOpackets int64 `thrift:"vifr_opackets,15" db:"vifr_opackets" json:"vifr_opackets"`
  VifrOerrors int64 `thrift:"vifr_oerrors,16" db:"vifr_oerrors" json:"vifr_oerrors"`
  VifrQueueIpackets int64 `thrift:"vifr_queue_ipackets,17" db:"vifr_queue_ipackets" json:"vifr_queue_ipackets"`
  VifrQueueIerrors int64 `thrift:"vifr_queue_ierrors,18" db:"vifr_queue_ierrors" json:"vifr_queue_ierrors"`
  VifrQueueIerrorsToLcore []int64 `thrift:"vifr_queue_ierrors_to_lcore,19" db:"vifr_queue_ierrors_to_lcore" json:"vifr_queue_ierrors_to_lcore"`
  VifrQueueOpackets int64 `thrift:"vifr_queue_opackets,20" db:"vifr_queue_opackets" json:"vifr_queue_opackets"`
  VifrQueueOerrors int64 `thrift:"vifr_queue_oerrors,21" db:"vifr_queue_oerrors" json:"vifr_queue_oerrors"`
  VifrPortIpackets int64 `thrift:"vifr_port_ipackets,22" db:"vifr_port_ipackets" json:"vifr_port_ipackets"`
  VifrPortIerrors int64 `thrift:"vifr_port_ierrors,23" db:"vifr_port_ierrors" json:"vifr_port_ierrors"`
  VifrPortIsyscalls int64 `thrift:"vifr_port_isyscalls,24" db:"vifr_port_isyscalls" json:"vifr_port_isyscalls"`
  VifrPortInombufs int64 `thrift:"vifr_port_inombufs,25" db:"vifr_port_inombufs" json:"vifr_port_inombufs"`
  VifrPortOpackets int64 `thrift:"vifr_port_opackets,26" db:"vifr_port_opackets" json:"vifr_port_opackets"`
  VifrPortOerrors int64 `thrift:"vifr_port_oerrors,27" db:"vifr_port_oerrors" json:"vifr_port_oerrors"`
  VifrPortOsyscalls int64 `thrift:"vifr_port_osyscalls,28" db:"vifr_port_osyscalls" json:"vifr_port_osyscalls"`
  VifrDevIi8s int64 `thrift:"vifr_dev_ii8s,29" db:"vifr_dev_ii8s" json:"vifr_dev_ii8s"`
  VifrDevIpackets int64 `thrift:"vifr_dev_ipackets,30" db:"vifr_dev_ipackets" json:"vifr_dev_ipackets"`
  VifrDevIerrors int64 `thrift:"vifr_dev_ierrors,31" db:"vifr_dev_ierrors" json:"vifr_dev_ierrors"`
  VifrDevInombufs int64 `thrift:"vifr_dev_inombufs,32" db:"vifr_dev_inombufs" json:"vifr_dev_inombufs"`
  VifrDevOi8s int64 `thrift:"vifr_dev_oi8s,33" db:"vifr_dev_oi8s" json:"vifr_dev_oi8s"`
  VifrDevOpackets int64 `thrift:"vifr_dev_opackets,34" db:"vifr_dev_opackets" json:"vifr_dev_opackets"`
  VifrDevOerrors int64 `thrift:"vifr_dev_oerrors,35" db:"vifr_dev_oerrors" json:"vifr_dev_oerrors"`
  VifrRefCnt int32 `thrift:"vifr_ref_cnt,36" db:"vifr_ref_cnt" json:"vifr_ref_cnt"`
  VifrMarker int32 `thrift:"vifr_marker,37" db:"vifr_marker" json:"vifr_marker"`
  VifrMac []int8 `thrift:"vifr_mac,38" db:"vifr_mac" json:"vifr_mac"`
  VifrIP int32 `thrift:"vifr_ip,39" db:"vifr_ip" json:"vifr_ip"`
  VifrIp6U int64 `thrift:"vifr_ip6_u,40" db:"vifr_ip6_u" json:"vifr_ip6_u"`
  VifrIp6L int64 `thrift:"vifr_ip6_l,41" db:"vifr_ip6_l" json:"vifr_ip6_l"`
  VifrContext int32 `thrift:"vifr_context,42" db:"vifr_context" json:"vifr_context"`
  VifrMirID int16 `thrift:"vifr_mir_id,43" db:"vifr_mir_id" json:"vifr_mir_id"`
  VifrSpeed int32 `thrift:"vifr_speed,44" db:"vifr_speed" json:"vifr_speed"`
  VifrDuplex int32 `thrift:"vifr_duplex,45" db:"vifr_duplex" json:"vifr_duplex"`
  VifrVlanID int16 `thrift:"vifr_vlan_id,46" db:"vifr_vlan_id" json:"vifr_vlan_id"`
  VifrParentVifIdx int32 `thrift:"vifr_parent_vif_idx,47" db:"vifr_parent_vif_idx" json:"vifr_parent_vif_idx"`
  VifrNhID int32 `thrift:"vifr_nh_id,48" db:"vifr_nh_id" json:"vifr_nh_id"`
  VifrCrossConnectIdx []int32 `thrift:"vifr_cross_connect_idx,49" db:"vifr_cross_connect_idx" json:"vifr_cross_connect_idx"`
  VifrSrcMac []int8 `thrift:"vifr_src_mac,50" db:"vifr_src_mac" json:"vifr_src_mac"`
  VifrBridgeIdx []int32 `thrift:"vifr_bridge_idx,51" db:"vifr_bridge_idx" json:"vifr_bridge_idx"`
  VifrOvlanID int16 `thrift:"vifr_ovlan_id,52" db:"vifr_ovlan_id" json:"vifr_ovlan_id"`
  VifrTransport int8 `thrift:"vifr_transport,53" db:"vifr_transport" json:"vifr_transport"`
  VifrFatFlowProtocolPort []int32 `thrift:"vifr_fat_flow_protocol_port,54" db:"vifr_fat_flow_protocol_port" json:"vifr_fat_flow_protocol_port"`
  VifrQosMapIndex int16 `thrift:"vifr_qos_map_index,55" db:"vifr_qos_map_index" json:"vifr_qos_map_index"`
  VifrInMirrorMd []int8 `thrift:"vifr_in_mirror_md,56" db:"vifr_in_mirror_md" json:"vifr_in_mirror_md"`
  VifrOutMirrorMd []int8 `thrift:"vifr_out_mirror_md,57" db:"vifr_out_mirror_md" json:"vifr_out_mirror_md"`
  VifrDpackets int64 `thrift:"vifr_dpackets,58" db:"vifr_dpackets" json:"vifr_dpackets"`
  VifrHwQueues []int16 `thrift:"vifr_hw_queues,59" db:"vifr_hw_queues" json:"vifr_hw_queues"`
  VifrIsid int32 `thrift:"vifr_isid,60" db:"vifr_isid" json:"vifr_isid"`
  VifrPbbMac []int8 `thrift:"vifr_pbb_mac,61" db:"vifr_pbb_mac" json:"vifr_pbb_mac"`
  VifrVhostuserMode int8 `thrift:"vifr_vhostuser_mode,62" db:"vifr_vhostuser_mode" json:"vifr_vhostuser_mode"`
  VifrMcastVrf int32 `thrift:"vifr_mcast_vrf,63" db:"vifr_mcast_vrf" json:"vifr_mcast_vrf"`
  VifrIfGUID []int8 `thrift:"vifr_if_guid,64" db:"vifr_if_guid" json:"vifr_if_guid"`
  VifrFatFlowExcludeIPList []int64 `thrift:"vifr_fat_flow_exclude_ip_list,65" db:"vifr_fat_flow_exclude_ip_list" json:"vifr_fat_flow_exclude_ip_list"`
  VifrFatFlowExcludeIp6UList []int64 `thrift:"vifr_fat_flow_exclude_ip6_u_list,66" db:"vifr_fat_flow_exclude_ip6_u_list" json:"vifr_fat_flow_exclude_ip6_u_list"`
  VifrFatFlowExcludeIp6LList []int64 `thrift:"vifr_fat_flow_exclude_ip6_l_list,67" db:"vifr_fat_flow_exclude_ip6_l_list" json:"vifr_fat_flow_exclude_ip6_l_list"`
  VifrFatFlowExcludeIp6PlenList []int16 `thrift:"vifr_fat_flow_exclude_ip6_plen_list,68" db:"vifr_fat_flow_exclude_ip6_plen_list" json:"vifr_fat_flow_exclude_ip6_plen_list"`
  // unused fields # 69 to 76
  VifrFatFlowSrcPrefixH []int64 `thrift:"vifr_fat_flow_src_prefix_h,77" db:"vifr_fat_flow_src_prefix_h" json:"vifr_fat_flow_src_prefix_h"`
  VifrFatFlowSrcPrefixL []int64 `thrift:"vifr_fat_flow_src_prefix_l,78" db:"vifr_fat_flow_src_prefix_l" json:"vifr_fat_flow_src_prefix_l"`
  VifrFatFlowSrcPrefixMask []int8 `thrift:"vifr_fat_flow_src_prefix_mask,79" db:"vifr_fat_flow_src_prefix_mask" json:"vifr_fat_flow_src_prefix_mask"`
  VifrFatFlowSrcAggregatePlen []int8 `thrift:"vifr_fat_flow_src_aggregate_plen,80" db:"vifr_fat_flow_src_aggregate_plen" json:"vifr_fat_flow_src_aggregate_plen"`
  VifrFatFlowDstPrefixH []int64 `thrift:"vifr_fat_flow_dst_prefix_h,81" db:"vifr_fat_flow_dst_prefix_h" json:"vifr_fat_flow_dst_prefix_h"`
  VifrFatFlowDstPrefixL []int64 `thrift:"vifr_fat_flow_dst_prefix_l,82" db:"vifr_fat_flow_dst_prefix_l" json:"vifr_fat_flow_dst_prefix_l"`
  VifrFatFlowDstPrefixMask []int8 `thrift:"vifr_fat_flow_dst_prefix_mask,83" db:"vifr_fat_flow_dst_prefix_mask" json:"vifr_fat_flow_dst_prefix_mask"`
  VifrFatFlowDstAggregatePlen []int8 `thrift:"vifr_fat_flow_dst_aggregate_plen,84" db:"vifr_fat_flow_dst_aggregate_plen" json:"vifr_fat_flow_dst_aggregate_plen"`
  VifrIntfStatus int8 `thrift:"vifr_intf_status,85" db:"vifr_intf_status" json:"vifr_intf_status"`
  VifrFabName []int8 `thrift:"vifr_fab_name,86" db:"vifr_fab_name" json:"vifr_fab_name"`
  VifrFabDrvName []int8 `thrift:"vifr_fab_drv_name,87" db:"vifr_fab_drv_name" json:"vifr_fab_drv_name"`
  VifrNumBondSlave int8 `thrift:"vifr_num_bond_slave,88" db:"vifr_num_bond_slave" json:"vifr_num_bond_slave"`
  VifrBondSlaveName []int8 `thrift:"vifr_bond_slave_name,89" db:"vifr_bond_slave_name" json:"vifr_bond_slave_name"`
  VifrBondSlaveDrvName []int8 `thrift:"vifr_bond_slave_drv_name,90" db:"vifr_bond_slave_drv_name" json:"vifr_bond_slave_drv_name"`
  VifrVlanTag int32 `thrift:"vifr_vlan_tag,91" db:"vifr_vlan_tag" json:"vifr_vlan_tag"`
  VifrVlanName []int8 `thrift:"vifr_vlan_name,92" db:"vifr_vlan_name" json:"vifr_vlan_name"`
  VifrLoopbackIP int32 `thrift:"vifr_loopback_ip,93" db:"vifr_loopback_ip" json:"vifr_loopback_ip"`
}

func NewVrInterfaceReq() *VrInterfaceReq {
  return &VrInterfaceReq{}
}


func (p *VrInterfaceReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrInterfaceReq) GetVifrCore() int32 {
  return p.VifrCore
}

func (p *VrInterfaceReq) GetVifrType() int32 {
  return p.VifrType
}

func (p *VrInterfaceReq) GetVifrFlags() int32 {
  return p.VifrFlags
}

func (p *VrInterfaceReq) GetVifrVrf() int32 {
  return p.VifrVrf
}

func (p *VrInterfaceReq) GetVifrIdx() int32 {
  return p.VifrIdx
}

func (p *VrInterfaceReq) GetVifrRid() int32 {
  return p.VifrRid
}

func (p *VrInterfaceReq) GetVifrOsIdx() int32 {
  return p.VifrOsIdx
}

func (p *VrInterfaceReq) GetVifrMtu() int32 {
  return p.VifrMtu
}

func (p *VrInterfaceReq) GetVifrName() string {
  return p.VifrName
}

func (p *VrInterfaceReq) GetVifrIi8s() int64 {
  return p.VifrIi8s
}

func (p *VrInterfaceReq) GetVifrIpackets() int64 {
  return p.VifrIpackets
}

func (p *VrInterfaceReq) GetVifrIerrors() int64 {
  return p.VifrIerrors
}

func (p *VrInterfaceReq) GetVifrOi8s() int64 {
  return p.VifrOi8s
}

func (p *VrInterfaceReq) GetVifrOpackets() int64 {
  return p.VifrOpackets
}

func (p *VrInterfaceReq) GetVifrOerrors() int64 {
  return p.VifrOerrors
}

func (p *VrInterfaceReq) GetVifrQueueIpackets() int64 {
  return p.VifrQueueIpackets
}

func (p *VrInterfaceReq) GetVifrQueueIerrors() int64 {
  return p.VifrQueueIerrors
}

func (p *VrInterfaceReq) GetVifrQueueIerrorsToLcore() []int64 {
  return p.VifrQueueIerrorsToLcore
}

func (p *VrInterfaceReq) GetVifrQueueOpackets() int64 {
  return p.VifrQueueOpackets
}

func (p *VrInterfaceReq) GetVifrQueueOerrors() int64 {
  return p.VifrQueueOerrors
}

func (p *VrInterfaceReq) GetVifrPortIpackets() int64 {
  return p.VifrPortIpackets
}

func (p *VrInterfaceReq) GetVifrPortIerrors() int64 {
  return p.VifrPortIerrors
}

func (p *VrInterfaceReq) GetVifrPortIsyscalls() int64 {
  return p.VifrPortIsyscalls
}

func (p *VrInterfaceReq) GetVifrPortInombufs() int64 {
  return p.VifrPortInombufs
}

func (p *VrInterfaceReq) GetVifrPortOpackets() int64 {
  return p.VifrPortOpackets
}

func (p *VrInterfaceReq) GetVifrPortOerrors() int64 {
  return p.VifrPortOerrors
}

func (p *VrInterfaceReq) GetVifrPortOsyscalls() int64 {
  return p.VifrPortOsyscalls
}

func (p *VrInterfaceReq) GetVifrDevIi8s() int64 {
  return p.VifrDevIi8s
}

func (p *VrInterfaceReq) GetVifrDevIpackets() int64 {
  return p.VifrDevIpackets
}

func (p *VrInterfaceReq) GetVifrDevIerrors() int64 {
  return p.VifrDevIerrors
}

func (p *VrInterfaceReq) GetVifrDevInombufs() int64 {
  return p.VifrDevInombufs
}

func (p *VrInterfaceReq) GetVifrDevOi8s() int64 {
  return p.VifrDevOi8s
}

func (p *VrInterfaceReq) GetVifrDevOpackets() int64 {
  return p.VifrDevOpackets
}

func (p *VrInterfaceReq) GetVifrDevOerrors() int64 {
  return p.VifrDevOerrors
}

func (p *VrInterfaceReq) GetVifrRefCnt() int32 {
  return p.VifrRefCnt
}

func (p *VrInterfaceReq) GetVifrMarker() int32 {
  return p.VifrMarker
}

func (p *VrInterfaceReq) GetVifrMac() []int8 {
  return p.VifrMac
}

func (p *VrInterfaceReq) GetVifrIP() int32 {
  return p.VifrIP
}

func (p *VrInterfaceReq) GetVifrIp6U() int64 {
  return p.VifrIp6U
}

func (p *VrInterfaceReq) GetVifrIp6L() int64 {
  return p.VifrIp6L
}

func (p *VrInterfaceReq) GetVifrContext() int32 {
  return p.VifrContext
}

func (p *VrInterfaceReq) GetVifrMirID() int16 {
  return p.VifrMirID
}

func (p *VrInterfaceReq) GetVifrSpeed() int32 {
  return p.VifrSpeed
}

func (p *VrInterfaceReq) GetVifrDuplex() int32 {
  return p.VifrDuplex
}

func (p *VrInterfaceReq) GetVifrVlanID() int16 {
  return p.VifrVlanID
}

func (p *VrInterfaceReq) GetVifrParentVifIdx() int32 {
  return p.VifrParentVifIdx
}

func (p *VrInterfaceReq) GetVifrNhID() int32 {
  return p.VifrNhID
}

func (p *VrInterfaceReq) GetVifrCrossConnectIdx() []int32 {
  return p.VifrCrossConnectIdx
}

func (p *VrInterfaceReq) GetVifrSrcMac() []int8 {
  return p.VifrSrcMac
}

func (p *VrInterfaceReq) GetVifrBridgeIdx() []int32 {
  return p.VifrBridgeIdx
}

func (p *VrInterfaceReq) GetVifrOvlanID() int16 {
  return p.VifrOvlanID
}

func (p *VrInterfaceReq) GetVifrTransport() int8 {
  return p.VifrTransport
}

func (p *VrInterfaceReq) GetVifrFatFlowProtocolPort() []int32 {
  return p.VifrFatFlowProtocolPort
}

func (p *VrInterfaceReq) GetVifrQosMapIndex() int16 {
  return p.VifrQosMapIndex
}

func (p *VrInterfaceReq) GetVifrInMirrorMd() []int8 {
  return p.VifrInMirrorMd
}

func (p *VrInterfaceReq) GetVifrOutMirrorMd() []int8 {
  return p.VifrOutMirrorMd
}

func (p *VrInterfaceReq) GetVifrDpackets() int64 {
  return p.VifrDpackets
}

func (p *VrInterfaceReq) GetVifrHwQueues() []int16 {
  return p.VifrHwQueues
}

func (p *VrInterfaceReq) GetVifrIsid() int32 {
  return p.VifrIsid
}

func (p *VrInterfaceReq) GetVifrPbbMac() []int8 {
  return p.VifrPbbMac
}

func (p *VrInterfaceReq) GetVifrVhostuserMode() int8 {
  return p.VifrVhostuserMode
}

func (p *VrInterfaceReq) GetVifrMcastVrf() int32 {
  return p.VifrMcastVrf
}

func (p *VrInterfaceReq) GetVifrIfGUID() []int8 {
  return p.VifrIfGUID
}

func (p *VrInterfaceReq) GetVifrFatFlowExcludeIPList() []int64 {
  return p.VifrFatFlowExcludeIPList
}

func (p *VrInterfaceReq) GetVifrFatFlowExcludeIp6UList() []int64 {
  return p.VifrFatFlowExcludeIp6UList
}

func (p *VrInterfaceReq) GetVifrFatFlowExcludeIp6LList() []int64 {
  return p.VifrFatFlowExcludeIp6LList
}

func (p *VrInterfaceReq) GetVifrFatFlowExcludeIp6PlenList() []int16 {
  return p.VifrFatFlowExcludeIp6PlenList
}

func (p *VrInterfaceReq) GetVifrFatFlowSrcPrefixH() []int64 {
  return p.VifrFatFlowSrcPrefixH
}

func (p *VrInterfaceReq) GetVifrFatFlowSrcPrefixL() []int64 {
  return p.VifrFatFlowSrcPrefixL
}

func (p *VrInterfaceReq) GetVifrFatFlowSrcPrefixMask() []int8 {
  return p.VifrFatFlowSrcPrefixMask
}

func (p *VrInterfaceReq) GetVifrFatFlowSrcAggregatePlen() []int8 {
  return p.VifrFatFlowSrcAggregatePlen
}

func (p *VrInterfaceReq) GetVifrFatFlowDstPrefixH() []int64 {
  return p.VifrFatFlowDstPrefixH
}

func (p *VrInterfaceReq) GetVifrFatFlowDstPrefixL() []int64 {
  return p.VifrFatFlowDstPrefixL
}

func (p *VrInterfaceReq) GetVifrFatFlowDstPrefixMask() []int8 {
  return p.VifrFatFlowDstPrefixMask
}

func (p *VrInterfaceReq) GetVifrFatFlowDstAggregatePlen() []int8 {
  return p.VifrFatFlowDstAggregatePlen
}

func (p *VrInterfaceReq) GetVifrIntfStatus() int8 {
  return p.VifrIntfStatus
}

func (p *VrInterfaceReq) GetVifrFabName() []int8 {
  return p.VifrFabName
}

func (p *VrInterfaceReq) GetVifrFabDrvName() []int8 {
  return p.VifrFabDrvName
}

func (p *VrInterfaceReq) GetVifrNumBondSlave() int8 {
  return p.VifrNumBondSlave
}

func (p *VrInterfaceReq) GetVifrBondSlaveName() []int8 {
  return p.VifrBondSlaveName
}

func (p *VrInterfaceReq) GetVifrBondSlaveDrvName() []int8 {
  return p.VifrBondSlaveDrvName
}

func (p *VrInterfaceReq) GetVifrVlanTag() int32 {
  return p.VifrVlanTag
}

func (p *VrInterfaceReq) GetVifrVlanName() []int8 {
  return p.VifrVlanName
}

func (p *VrInterfaceReq) GetVifrLoopbackIP() int32 {
  return p.VifrLoopbackIP
}
func (p *VrInterfaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 49:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField49(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField52(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField53(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField54(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 55:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField55(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 56:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField56(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 57:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField57(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 58:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField58(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 59:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField59(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField60(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField62(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField63(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 64:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField64(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField65(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField66(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField67(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField68(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField77(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField78(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField79(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField80(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField82(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField83(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 84:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField84(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField85(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField86(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField87(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField88(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField89(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 90:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField90(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 93:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField93(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrInterfaceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VifrCore = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VifrType = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VifrFlags = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VifrVrf = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VifrIdx = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VifrRid = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VifrOsIdx = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VifrMtu = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VifrName = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VifrIi8s = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VifrIpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VifrIerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.VifrOi8s = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VifrOpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VifrOerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VifrQueueIpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VifrQueueIerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrQueueIerrorsToLcore =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.VifrQueueIerrorsToLcore = append(p.VifrQueueIerrorsToLcore, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.VifrQueueOpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.VifrQueueOerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.VifrPortIpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VifrPortIerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VifrPortIsyscalls = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VifrPortInombufs = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.VifrPortOpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.VifrPortOerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.VifrPortOsyscalls = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.VifrDevIi8s = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.VifrDevIpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.VifrDevIerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.VifrDevInombufs = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.VifrDevOi8s = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.VifrDevOpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VifrDevOerrors = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.VifrRefCnt = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.VifrMarker = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem19 = temp
}
    p.VifrMac = append(p.VifrMac, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.VifrIP = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.VifrIp6U = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.VifrIp6L = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VifrContext = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.VifrMirID = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.VifrSpeed = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.VifrDuplex = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.VifrVlanID = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.VifrParentVifIdx = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.VifrNhID = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField49(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VifrCrossConnectIdx =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.VifrCrossConnectIdx = append(p.VifrCrossConnectIdx, _elem20)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrSrcMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem21 = temp
}
    p.VifrSrcMac = append(p.VifrSrcMac, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VifrBridgeIdx =  tSlice
  for i := 0; i < size; i ++ {
var _elem22 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem22 = v
}
    p.VifrBridgeIdx = append(p.VifrBridgeIdx, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.VifrOvlanID = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField53(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  temp := int8(v)
  p.VifrTransport = temp
}
  return nil
}

func (p *VrInterfaceReq)  ReadField54(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VifrFatFlowProtocolPort =  tSlice
  for i := 0; i < size; i ++ {
var _elem23 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem23 = v
}
    p.VifrFatFlowProtocolPort = append(p.VifrFatFlowProtocolPort, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField55(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.VifrQosMapIndex = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField56(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrInMirrorMd =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem24 = temp
}
    p.VifrInMirrorMd = append(p.VifrInMirrorMd, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField57(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrOutMirrorMd =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem25 = temp
}
    p.VifrOutMirrorMd = append(p.VifrOutMirrorMd, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField58(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 58: ", err)
} else {
  p.VifrDpackets = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField59(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.VifrHwQueues =  tSlice
  for i := 0; i < size; i ++ {
var _elem26 int16
    if v, err := iprot.ReadI16(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.VifrHwQueues = append(p.VifrHwQueues, _elem26)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.VifrIsid = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrPbbMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem27 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem27 = temp
}
    p.VifrPbbMac = append(p.VifrPbbMac, _elem27)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField62(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  temp := int8(v)
  p.VifrVhostuserMode = temp
}
  return nil
}

func (p *VrInterfaceReq)  ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.VifrMcastVrf = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField64(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrIfGUID =  tSlice
  for i := 0; i < size; i ++ {
var _elem28 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem28 = temp
}
    p.VifrIfGUID = append(p.VifrIfGUID, _elem28)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowExcludeIPList =  tSlice
  for i := 0; i < size; i ++ {
var _elem29 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem29 = v
}
    p.VifrFatFlowExcludeIPList = append(p.VifrFatFlowExcludeIPList, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowExcludeIp6UList =  tSlice
  for i := 0; i < size; i ++ {
var _elem30 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem30 = v
}
    p.VifrFatFlowExcludeIp6UList = append(p.VifrFatFlowExcludeIp6UList, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowExcludeIp6LList =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.VifrFatFlowExcludeIp6LList = append(p.VifrFatFlowExcludeIp6LList, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.VifrFatFlowExcludeIp6PlenList =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 int16
    if v, err := iprot.ReadI16(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.VifrFatFlowExcludeIp6PlenList = append(p.VifrFatFlowExcludeIp6PlenList, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowSrcPrefixH =  tSlice
  for i := 0; i < size; i ++ {
var _elem33 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem33 = v
}
    p.VifrFatFlowSrcPrefixH = append(p.VifrFatFlowSrcPrefixH, _elem33)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField78(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowSrcPrefixL =  tSlice
  for i := 0; i < size; i ++ {
var _elem34 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem34 = v
}
    p.VifrFatFlowSrcPrefixL = append(p.VifrFatFlowSrcPrefixL, _elem34)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField79(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFatFlowSrcPrefixMask =  tSlice
  for i := 0; i < size; i ++ {
var _elem35 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem35 = temp
}
    p.VifrFatFlowSrcPrefixMask = append(p.VifrFatFlowSrcPrefixMask, _elem35)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField80(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFatFlowSrcAggregatePlen =  tSlice
  for i := 0; i < size; i ++ {
var _elem36 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem36 = temp
}
    p.VifrFatFlowSrcAggregatePlen = append(p.VifrFatFlowSrcAggregatePlen, _elem36)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowDstPrefixH =  tSlice
  for i := 0; i < size; i ++ {
var _elem37 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem37 = v
}
    p.VifrFatFlowDstPrefixH = append(p.VifrFatFlowDstPrefixH, _elem37)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField82(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VifrFatFlowDstPrefixL =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.VifrFatFlowDstPrefixL = append(p.VifrFatFlowDstPrefixL, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField83(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFatFlowDstPrefixMask =  tSlice
  for i := 0; i < size; i ++ {
var _elem39 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem39 = temp
}
    p.VifrFatFlowDstPrefixMask = append(p.VifrFatFlowDstPrefixMask, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField84(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFatFlowDstAggregatePlen =  tSlice
  for i := 0; i < size; i ++ {
var _elem40 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem40 = temp
}
    p.VifrFatFlowDstAggregatePlen = append(p.VifrFatFlowDstAggregatePlen, _elem40)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField85(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  temp := int8(v)
  p.VifrIntfStatus = temp
}
  return nil
}

func (p *VrInterfaceReq)  ReadField86(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFabName =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem41 = temp
}
    p.VifrFabName = append(p.VifrFabName, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField87(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrFabDrvName =  tSlice
  for i := 0; i < size; i ++ {
var _elem42 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem42 = temp
}
    p.VifrFabDrvName = append(p.VifrFabDrvName, _elem42)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  temp := int8(v)
  p.VifrNumBondSlave = temp
}
  return nil
}

func (p *VrInterfaceReq)  ReadField89(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrBondSlaveName =  tSlice
  for i := 0; i < size; i ++ {
var _elem43 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem43 = temp
}
    p.VifrBondSlaveName = append(p.VifrBondSlaveName, _elem43)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField90(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrBondSlaveDrvName =  tSlice
  for i := 0; i < size; i ++ {
var _elem44 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem44 = temp
}
    p.VifrBondSlaveDrvName = append(p.VifrBondSlaveDrvName, _elem44)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.VifrVlanTag = v
}
  return nil
}

func (p *VrInterfaceReq)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VifrVlanName =  tSlice
  for i := 0; i < size; i ++ {
var _elem45 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem45 = temp
}
    p.VifrVlanName = append(p.VifrVlanName, _elem45)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInterfaceReq)  ReadField93(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 93: ", err)
} else {
  p.VifrLoopbackIP = v
}
  return nil
}

func (p *VrInterfaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_interface_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField49(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField52(ctx, oprot); err != nil { return err }
    if err := p.writeField53(ctx, oprot); err != nil { return err }
    if err := p.writeField54(ctx, oprot); err != nil { return err }
    if err := p.writeField55(ctx, oprot); err != nil { return err }
    if err := p.writeField56(ctx, oprot); err != nil { return err }
    if err := p.writeField57(ctx, oprot); err != nil { return err }
    if err := p.writeField58(ctx, oprot); err != nil { return err }
    if err := p.writeField59(ctx, oprot); err != nil { return err }
    if err := p.writeField60(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField62(ctx, oprot); err != nil { return err }
    if err := p.writeField63(ctx, oprot); err != nil { return err }
    if err := p.writeField64(ctx, oprot); err != nil { return err }
    if err := p.writeField65(ctx, oprot); err != nil { return err }
    if err := p.writeField66(ctx, oprot); err != nil { return err }
    if err := p.writeField67(ctx, oprot); err != nil { return err }
    if err := p.writeField68(ctx, oprot); err != nil { return err }
    if err := p.writeField77(ctx, oprot); err != nil { return err }
    if err := p.writeField78(ctx, oprot); err != nil { return err }
    if err := p.writeField79(ctx, oprot); err != nil { return err }
    if err := p.writeField80(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField82(ctx, oprot); err != nil { return err }
    if err := p.writeField83(ctx, oprot); err != nil { return err }
    if err := p.writeField84(ctx, oprot); err != nil { return err }
    if err := p.writeField85(ctx, oprot); err != nil { return err }
    if err := p.writeField86(ctx, oprot); err != nil { return err }
    if err := p.writeField87(ctx, oprot); err != nil { return err }
    if err := p.writeField88(ctx, oprot); err != nil { return err }
    if err := p.writeField89(ctx, oprot); err != nil { return err }
    if err := p.writeField90(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
    if err := p.writeField93(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrInterfaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_core", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vifr_core: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrCore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_core (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vifr_core: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vifr_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vifr_type: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_flags", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vifr_flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_flags (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vifr_flags: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_vrf", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vifr_vrf: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_vrf (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vifr_vrf: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_idx", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vifr_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_idx (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vifr_idx: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_rid", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vifr_rid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_rid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vifr_rid: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_os_idx", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vifr_os_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrOsIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_os_idx (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vifr_os_idx: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_mtu", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vifr_mtu: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrMtu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_mtu (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vifr_mtu: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vifr_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VifrName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vifr_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ii8s", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vifr_ii8s: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrIi8s)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ii8s (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vifr_ii8s: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ipackets", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vifr_ipackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrIpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ipackets (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vifr_ipackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ierrors", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vifr_ierrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrIerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ierrors (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vifr_ierrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_oi8s", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vifr_oi8s: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrOi8s)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_oi8s (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vifr_oi8s: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_opackets", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vifr_opackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrOpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_opackets (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vifr_opackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_oerrors", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:vifr_oerrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrOerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_oerrors (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:vifr_oerrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_queue_ipackets", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:vifr_queue_ipackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrQueueIpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_queue_ipackets (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:vifr_queue_ipackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_queue_ierrors", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:vifr_queue_ierrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrQueueIerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_queue_ierrors (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:vifr_queue_ierrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_queue_ierrors_to_lcore", thrift.LIST, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vifr_queue_ierrors_to_lcore: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrQueueIerrorsToLcore)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrQueueIerrorsToLcore {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vifr_queue_ierrors_to_lcore: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_queue_opackets", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:vifr_queue_opackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrQueueOpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_queue_opackets (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:vifr_queue_opackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_queue_oerrors", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vifr_queue_oerrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrQueueOerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_queue_oerrors (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vifr_queue_oerrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_ipackets", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vifr_port_ipackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortIpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_ipackets (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vifr_port_ipackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_ierrors", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:vifr_port_ierrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortIerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_ierrors (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:vifr_port_ierrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_isyscalls", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vifr_port_isyscalls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortIsyscalls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_isyscalls (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vifr_port_isyscalls: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_inombufs", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:vifr_port_inombufs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortInombufs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_inombufs (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:vifr_port_inombufs: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_opackets", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:vifr_port_opackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortOpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_opackets (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:vifr_port_opackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_oerrors", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:vifr_port_oerrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortOerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_oerrors (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:vifr_port_oerrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_port_osyscalls", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:vifr_port_osyscalls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrPortOsyscalls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_port_osyscalls (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:vifr_port_osyscalls: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_ii8s", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:vifr_dev_ii8s: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevIi8s)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_ii8s (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:vifr_dev_ii8s: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_ipackets", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:vifr_dev_ipackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevIpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_ipackets (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:vifr_dev_ipackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_ierrors", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:vifr_dev_ierrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevIerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_ierrors (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:vifr_dev_ierrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_inombufs", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:vifr_dev_inombufs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevInombufs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_inombufs (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:vifr_dev_inombufs: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_oi8s", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:vifr_dev_oi8s: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevOi8s)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_oi8s (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:vifr_dev_oi8s: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_opackets", thrift.I64, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:vifr_dev_opackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevOpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_opackets (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:vifr_dev_opackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dev_oerrors", thrift.I64, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:vifr_dev_oerrors: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDevOerrors)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dev_oerrors (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:vifr_dev_oerrors: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ref_cnt", thrift.I32, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:vifr_ref_cnt: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrRefCnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ref_cnt (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:vifr_ref_cnt: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_marker", thrift.I32, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:vifr_marker: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_marker (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:vifr_marker: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_mac", thrift.LIST, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:vifr_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:vifr_mac: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ip", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:vifr_ip: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ip (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:vifr_ip: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ip6_u", thrift.I64, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:vifr_ip6_u: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrIp6U)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ip6_u (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:vifr_ip6_u: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ip6_l", thrift.I64, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:vifr_ip6_l: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrIp6L)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ip6_l (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:vifr_ip6_l: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_context", thrift.I32, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:vifr_context: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrContext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_context (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:vifr_context: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_mir_id", thrift.I16, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:vifr_mir_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VifrMirID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_mir_id (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:vifr_mir_id: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_speed", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:vifr_speed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrSpeed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_speed (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:vifr_speed: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_duplex", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:vifr_duplex: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrDuplex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_duplex (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:vifr_duplex: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_vlan_id", thrift.I16, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:vifr_vlan_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VifrVlanID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_vlan_id (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:vifr_vlan_id: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_parent_vif_idx", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:vifr_parent_vif_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrParentVifIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_parent_vif_idx (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:vifr_parent_vif_idx: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_nh_id", thrift.I32, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:vifr_nh_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrNhID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_nh_id (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:vifr_nh_id: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField49(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_cross_connect_idx", thrift.LIST, 49); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:vifr_cross_connect_idx: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VifrCrossConnectIdx)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrCrossConnectIdx {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 49:vifr_cross_connect_idx: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_src_mac", thrift.LIST, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:vifr_src_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrSrcMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrSrcMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:vifr_src_mac: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_bridge_idx", thrift.LIST, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:vifr_bridge_idx: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VifrBridgeIdx)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrBridgeIdx {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:vifr_bridge_idx: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_ovlan_id", thrift.I16, 52); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:vifr_ovlan_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VifrOvlanID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_ovlan_id (52) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 52:vifr_ovlan_id: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField53(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_transport", thrift.BYTE, 53); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:vifr_transport: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VifrTransport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_transport (53) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 53:vifr_transport: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField54(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_protocol_port", thrift.LIST, 54); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:vifr_fat_flow_protocol_port: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VifrFatFlowProtocolPort)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowProtocolPort {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 54:vifr_fat_flow_protocol_port: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField55(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_qos_map_index", thrift.I16, 55); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:vifr_qos_map_index: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VifrQosMapIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_qos_map_index (55) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 55:vifr_qos_map_index: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField56(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_in_mirror_md", thrift.LIST, 56); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:vifr_in_mirror_md: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrInMirrorMd)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrInMirrorMd {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 56:vifr_in_mirror_md: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField57(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_out_mirror_md", thrift.LIST, 57); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:vifr_out_mirror_md: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrOutMirrorMd)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrOutMirrorMd {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 57:vifr_out_mirror_md: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField58(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_dpackets", thrift.I64, 58); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 58:vifr_dpackets: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VifrDpackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_dpackets (58) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 58:vifr_dpackets: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField59(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_hw_queues", thrift.LIST, 59); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 59:vifr_hw_queues: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.VifrHwQueues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrHwQueues {
    if err := oprot.WriteI16(ctx, int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 59:vifr_hw_queues: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_isid", thrift.I32, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:vifr_isid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrIsid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_isid (60) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:vifr_isid: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_pbb_mac", thrift.LIST, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:vifr_pbb_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrPbbMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrPbbMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:vifr_pbb_mac: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField62(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_vhostuser_mode", thrift.BYTE, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:vifr_vhostuser_mode: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VifrVhostuserMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_vhostuser_mode (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:vifr_vhostuser_mode: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_mcast_vrf", thrift.I32, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:vifr_mcast_vrf: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrMcastVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_mcast_vrf (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:vifr_mcast_vrf: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField64(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_if_guid", thrift.LIST, 64); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 64:vifr_if_guid: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrIfGUID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrIfGUID {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 64:vifr_if_guid: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_exclude_ip_list", thrift.LIST, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:vifr_fat_flow_exclude_ip_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowExcludeIPList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowExcludeIPList {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:vifr_fat_flow_exclude_ip_list: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_exclude_ip6_u_list", thrift.LIST, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:vifr_fat_flow_exclude_ip6_u_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowExcludeIp6UList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowExcludeIp6UList {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:vifr_fat_flow_exclude_ip6_u_list: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_exclude_ip6_l_list", thrift.LIST, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:vifr_fat_flow_exclude_ip6_l_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowExcludeIp6LList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowExcludeIp6LList {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:vifr_fat_flow_exclude_ip6_l_list: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_exclude_ip6_plen_list", thrift.LIST, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:vifr_fat_flow_exclude_ip6_plen_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.VifrFatFlowExcludeIp6PlenList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowExcludeIp6PlenList {
    if err := oprot.WriteI16(ctx, int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:vifr_fat_flow_exclude_ip6_plen_list: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_src_prefix_h", thrift.LIST, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:vifr_fat_flow_src_prefix_h: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowSrcPrefixH)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowSrcPrefixH {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:vifr_fat_flow_src_prefix_h: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField78(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_src_prefix_l", thrift.LIST, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:vifr_fat_flow_src_prefix_l: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowSrcPrefixL)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowSrcPrefixL {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:vifr_fat_flow_src_prefix_l: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField79(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_src_prefix_mask", thrift.LIST, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:vifr_fat_flow_src_prefix_mask: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFatFlowSrcPrefixMask)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowSrcPrefixMask {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:vifr_fat_flow_src_prefix_mask: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField80(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_src_aggregate_plen", thrift.LIST, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:vifr_fat_flow_src_aggregate_plen: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFatFlowSrcAggregatePlen)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowSrcAggregatePlen {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:vifr_fat_flow_src_aggregate_plen: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_dst_prefix_h", thrift.LIST, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:vifr_fat_flow_dst_prefix_h: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowDstPrefixH)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowDstPrefixH {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:vifr_fat_flow_dst_prefix_h: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField82(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_dst_prefix_l", thrift.LIST, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:vifr_fat_flow_dst_prefix_l: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VifrFatFlowDstPrefixL)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowDstPrefixL {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:vifr_fat_flow_dst_prefix_l: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField83(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_dst_prefix_mask", thrift.LIST, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:vifr_fat_flow_dst_prefix_mask: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFatFlowDstPrefixMask)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowDstPrefixMask {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:vifr_fat_flow_dst_prefix_mask: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField84(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fat_flow_dst_aggregate_plen", thrift.LIST, 84); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 84:vifr_fat_flow_dst_aggregate_plen: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFatFlowDstAggregatePlen)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFatFlowDstAggregatePlen {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 84:vifr_fat_flow_dst_aggregate_plen: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField85(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_intf_status", thrift.BYTE, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:vifr_intf_status: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VifrIntfStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_intf_status (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:vifr_intf_status: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField86(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fab_name", thrift.LIST, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:vifr_fab_name: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFabName)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFabName {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:vifr_fab_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField87(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_fab_drv_name", thrift.LIST, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:vifr_fab_drv_name: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrFabDrvName)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrFabDrvName {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:vifr_fab_drv_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_num_bond_slave", thrift.BYTE, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:vifr_num_bond_slave: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VifrNumBondSlave)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_num_bond_slave (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:vifr_num_bond_slave: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField89(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_bond_slave_name", thrift.LIST, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:vifr_bond_slave_name: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrBondSlaveName)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrBondSlaveName {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:vifr_bond_slave_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField90(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_bond_slave_drv_name", thrift.LIST, 90); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:vifr_bond_slave_drv_name: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrBondSlaveDrvName)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrBondSlaveDrvName {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 90:vifr_bond_slave_drv_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_vlan_tag", thrift.I32, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:vifr_vlan_tag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrVlanTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_vlan_tag (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:vifr_vlan_tag: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_vlan_name", thrift.LIST, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:vifr_vlan_name: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VifrVlanName)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VifrVlanName {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:vifr_vlan_name: ", p), err) }
  return err
}

func (p *VrInterfaceReq) writeField93(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vifr_loopback_ip", thrift.I32, 93); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:vifr_loopback_ip: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VifrLoopbackIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vifr_loopback_ip (93) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 93:vifr_loopback_ip: ", p), err) }
  return err
}

func (p *VrInterfaceReq) Equals(other *VrInterfaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VifrCore != other.VifrCore { return false }
  if p.VifrType != other.VifrType { return false }
  if p.VifrFlags != other.VifrFlags { return false }
  if p.VifrVrf != other.VifrVrf { return false }
  if p.VifrIdx != other.VifrIdx { return false }
  if p.VifrRid != other.VifrRid { return false }
  if p.VifrOsIdx != other.VifrOsIdx { return false }
  if p.VifrMtu != other.VifrMtu { return false }
  if p.VifrName != other.VifrName { return false }
  if p.VifrIi8s != other.VifrIi8s { return false }
  if p.VifrIpackets != other.VifrIpackets { return false }
  if p.VifrIerrors != other.VifrIerrors { return false }
  if p.VifrOi8s != other.VifrOi8s { return false }
  if p.VifrOpackets != other.VifrOpackets { return false }
  if p.VifrOerrors != other.VifrOerrors { return false }
  if p.VifrQueueIpackets != other.VifrQueueIpackets { return false }
  if p.VifrQueueIerrors != other.VifrQueueIerrors { return false }
  if len(p.VifrQueueIerrorsToLcore) != len(other.VifrQueueIerrorsToLcore) { return false }
  for i, _tgt := range p.VifrQueueIerrorsToLcore {
    _src46 := other.VifrQueueIerrorsToLcore[i]
    if _tgt != _src46 { return false }
  }
  if p.VifrQueueOpackets != other.VifrQueueOpackets { return false }
  if p.VifrQueueOerrors != other.VifrQueueOerrors { return false }
  if p.VifrPortIpackets != other.VifrPortIpackets { return false }
  if p.VifrPortIerrors != other.VifrPortIerrors { return false }
  if p.VifrPortIsyscalls != other.VifrPortIsyscalls { return false }
  if p.VifrPortInombufs != other.VifrPortInombufs { return false }
  if p.VifrPortOpackets != other.VifrPortOpackets { return false }
  if p.VifrPortOerrors != other.VifrPortOerrors { return false }
  if p.VifrPortOsyscalls != other.VifrPortOsyscalls { return false }
  if p.VifrDevIi8s != other.VifrDevIi8s { return false }
  if p.VifrDevIpackets != other.VifrDevIpackets { return false }
  if p.VifrDevIerrors != other.VifrDevIerrors { return false }
  if p.VifrDevInombufs != other.VifrDevInombufs { return false }
  if p.VifrDevOi8s != other.VifrDevOi8s { return false }
  if p.VifrDevOpackets != other.VifrDevOpackets { return false }
  if p.VifrDevOerrors != other.VifrDevOerrors { return false }
  if p.VifrRefCnt != other.VifrRefCnt { return false }
  if p.VifrMarker != other.VifrMarker { return false }
  if len(p.VifrMac) != len(other.VifrMac) { return false }
  for i, _tgt := range p.VifrMac {
    _src47 := other.VifrMac[i]
    if _tgt != _src47 { return false }
  }
  if p.VifrIP != other.VifrIP { return false }
  if p.VifrIp6U != other.VifrIp6U { return false }
  if p.VifrIp6L != other.VifrIp6L { return false }
  if p.VifrContext != other.VifrContext { return false }
  if p.VifrMirID != other.VifrMirID { return false }
  if p.VifrSpeed != other.VifrSpeed { return false }
  if p.VifrDuplex != other.VifrDuplex { return false }
  if p.VifrVlanID != other.VifrVlanID { return false }
  if p.VifrParentVifIdx != other.VifrParentVifIdx { return false }
  if p.VifrNhID != other.VifrNhID { return false }
  if len(p.VifrCrossConnectIdx) != len(other.VifrCrossConnectIdx) { return false }
  for i, _tgt := range p.VifrCrossConnectIdx {
    _src48 := other.VifrCrossConnectIdx[i]
    if _tgt != _src48 { return false }
  }
  if len(p.VifrSrcMac) != len(other.VifrSrcMac) { return false }
  for i, _tgt := range p.VifrSrcMac {
    _src49 := other.VifrSrcMac[i]
    if _tgt != _src49 { return false }
  }
  if len(p.VifrBridgeIdx) != len(other.VifrBridgeIdx) { return false }
  for i, _tgt := range p.VifrBridgeIdx {
    _src50 := other.VifrBridgeIdx[i]
    if _tgt != _src50 { return false }
  }
  if p.VifrOvlanID != other.VifrOvlanID { return false }
  if p.VifrTransport != other.VifrTransport { return false }
  if len(p.VifrFatFlowProtocolPort) != len(other.VifrFatFlowProtocolPort) { return false }
  for i, _tgt := range p.VifrFatFlowProtocolPort {
    _src51 := other.VifrFatFlowProtocolPort[i]
    if _tgt != _src51 { return false }
  }
  if p.VifrQosMapIndex != other.VifrQosMapIndex { return false }
  if len(p.VifrInMirrorMd) != len(other.VifrInMirrorMd) { return false }
  for i, _tgt := range p.VifrInMirrorMd {
    _src52 := other.VifrInMirrorMd[i]
    if _tgt != _src52 { return false }
  }
  if len(p.VifrOutMirrorMd) != len(other.VifrOutMirrorMd) { return false }
  for i, _tgt := range p.VifrOutMirrorMd {
    _src53 := other.VifrOutMirrorMd[i]
    if _tgt != _src53 { return false }
  }
  if p.VifrDpackets != other.VifrDpackets { return false }
  if len(p.VifrHwQueues) != len(other.VifrHwQueues) { return false }
  for i, _tgt := range p.VifrHwQueues {
    _src54 := other.VifrHwQueues[i]
    if _tgt != _src54 { return false }
  }
  if p.VifrIsid != other.VifrIsid { return false }
  if len(p.VifrPbbMac) != len(other.VifrPbbMac) { return false }
  for i, _tgt := range p.VifrPbbMac {
    _src55 := other.VifrPbbMac[i]
    if _tgt != _src55 { return false }
  }
  if p.VifrVhostuserMode != other.VifrVhostuserMode { return false }
  if p.VifrMcastVrf != other.VifrMcastVrf { return false }
  if len(p.VifrIfGUID) != len(other.VifrIfGUID) { return false }
  for i, _tgt := range p.VifrIfGUID {
    _src56 := other.VifrIfGUID[i]
    if _tgt != _src56 { return false }
  }
  if len(p.VifrFatFlowExcludeIPList) != len(other.VifrFatFlowExcludeIPList) { return false }
  for i, _tgt := range p.VifrFatFlowExcludeIPList {
    _src57 := other.VifrFatFlowExcludeIPList[i]
    if _tgt != _src57 { return false }
  }
  if len(p.VifrFatFlowExcludeIp6UList) != len(other.VifrFatFlowExcludeIp6UList) { return false }
  for i, _tgt := range p.VifrFatFlowExcludeIp6UList {
    _src58 := other.VifrFatFlowExcludeIp6UList[i]
    if _tgt != _src58 { return false }
  }
  if len(p.VifrFatFlowExcludeIp6LList) != len(other.VifrFatFlowExcludeIp6LList) { return false }
  for i, _tgt := range p.VifrFatFlowExcludeIp6LList {
    _src59 := other.VifrFatFlowExcludeIp6LList[i]
    if _tgt != _src59 { return false }
  }
  if len(p.VifrFatFlowExcludeIp6PlenList) != len(other.VifrFatFlowExcludeIp6PlenList) { return false }
  for i, _tgt := range p.VifrFatFlowExcludeIp6PlenList {
    _src60 := other.VifrFatFlowExcludeIp6PlenList[i]
    if _tgt != _src60 { return false }
  }
  if len(p.VifrFatFlowSrcPrefixH) != len(other.VifrFatFlowSrcPrefixH) { return false }
  for i, _tgt := range p.VifrFatFlowSrcPrefixH {
    _src61 := other.VifrFatFlowSrcPrefixH[i]
    if _tgt != _src61 { return false }
  }
  if len(p.VifrFatFlowSrcPrefixL) != len(other.VifrFatFlowSrcPrefixL) { return false }
  for i, _tgt := range p.VifrFatFlowSrcPrefixL {
    _src62 := other.VifrFatFlowSrcPrefixL[i]
    if _tgt != _src62 { return false }
  }
  if len(p.VifrFatFlowSrcPrefixMask) != len(other.VifrFatFlowSrcPrefixMask) { return false }
  for i, _tgt := range p.VifrFatFlowSrcPrefixMask {
    _src63 := other.VifrFatFlowSrcPrefixMask[i]
    if _tgt != _src63 { return false }
  }
  if len(p.VifrFatFlowSrcAggregatePlen) != len(other.VifrFatFlowSrcAggregatePlen) { return false }
  for i, _tgt := range p.VifrFatFlowSrcAggregatePlen {
    _src64 := other.VifrFatFlowSrcAggregatePlen[i]
    if _tgt != _src64 { return false }
  }
  if len(p.VifrFatFlowDstPrefixH) != len(other.VifrFatFlowDstPrefixH) { return false }
  for i, _tgt := range p.VifrFatFlowDstPrefixH {
    _src65 := other.VifrFatFlowDstPrefixH[i]
    if _tgt != _src65 { return false }
  }
  if len(p.VifrFatFlowDstPrefixL) != len(other.VifrFatFlowDstPrefixL) { return false }
  for i, _tgt := range p.VifrFatFlowDstPrefixL {
    _src66 := other.VifrFatFlowDstPrefixL[i]
    if _tgt != _src66 { return false }
  }
  if len(p.VifrFatFlowDstPrefixMask) != len(other.VifrFatFlowDstPrefixMask) { return false }
  for i, _tgt := range p.VifrFatFlowDstPrefixMask {
    _src67 := other.VifrFatFlowDstPrefixMask[i]
    if _tgt != _src67 { return false }
  }
  if len(p.VifrFatFlowDstAggregatePlen) != len(other.VifrFatFlowDstAggregatePlen) { return false }
  for i, _tgt := range p.VifrFatFlowDstAggregatePlen {
    _src68 := other.VifrFatFlowDstAggregatePlen[i]
    if _tgt != _src68 { return false }
  }
  if p.VifrIntfStatus != other.VifrIntfStatus { return false }
  if len(p.VifrFabName) != len(other.VifrFabName) { return false }
  for i, _tgt := range p.VifrFabName {
    _src69 := other.VifrFabName[i]
    if _tgt != _src69 { return false }
  }
  if len(p.VifrFabDrvName) != len(other.VifrFabDrvName) { return false }
  for i, _tgt := range p.VifrFabDrvName {
    _src70 := other.VifrFabDrvName[i]
    if _tgt != _src70 { return false }
  }
  if p.VifrNumBondSlave != other.VifrNumBondSlave { return false }
  if len(p.VifrBondSlaveName) != len(other.VifrBondSlaveName) { return false }
  for i, _tgt := range p.VifrBondSlaveName {
    _src71 := other.VifrBondSlaveName[i]
    if _tgt != _src71 { return false }
  }
  if len(p.VifrBondSlaveDrvName) != len(other.VifrBondSlaveDrvName) { return false }
  for i, _tgt := range p.VifrBondSlaveDrvName {
    _src72 := other.VifrBondSlaveDrvName[i]
    if _tgt != _src72 { return false }
  }
  if p.VifrVlanTag != other.VifrVlanTag { return false }
  if len(p.VifrVlanName) != len(other.VifrVlanName) { return false }
  for i, _tgt := range p.VifrVlanName {
    _src73 := other.VifrVlanName[i]
    if _tgt != _src73 { return false }
  }
  if p.VifrLoopbackIP != other.VifrLoopbackIP { return false }
  return true
}

func (p *VrInterfaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrInterfaceReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VxlanrRid
//  - VxlanrVnid
//  - VxlanrNhid
type VrVxlanReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VxlanrRid int16 `thrift:"vxlanr_rid,2" db:"vxlanr_rid" json:"vxlanr_rid"`
  VxlanrVnid int32 `thrift:"vxlanr_vnid,3" db:"vxlanr_vnid" json:"vxlanr_vnid"`
  VxlanrNhid int32 `thrift:"vxlanr_nhid,4" db:"vxlanr_nhid" json:"vxlanr_nhid"`
}

func NewVrVxlanReq() *VrVxlanReq {
  return &VrVxlanReq{}
}


func (p *VrVxlanReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrVxlanReq) GetVxlanrRid() int16 {
  return p.VxlanrRid
}

func (p *VrVxlanReq) GetVxlanrVnid() int32 {
  return p.VxlanrVnid
}

func (p *VrVxlanReq) GetVxlanrNhid() int32 {
  return p.VxlanrNhid
}
func (p *VrVxlanReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrVxlanReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrVxlanReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VxlanrRid = v
}
  return nil
}

func (p *VrVxlanReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VxlanrVnid = v
}
  return nil
}

func (p *VrVxlanReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VxlanrNhid = v
}
  return nil
}

func (p *VrVxlanReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_vxlan_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrVxlanReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrVxlanReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vxlanr_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vxlanr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VxlanrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vxlanr_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vxlanr_rid: ", p), err) }
  return err
}

func (p *VrVxlanReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vxlanr_vnid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vxlanr_vnid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VxlanrVnid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vxlanr_vnid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vxlanr_vnid: ", p), err) }
  return err
}

func (p *VrVxlanReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vxlanr_nhid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vxlanr_nhid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VxlanrNhid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vxlanr_nhid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vxlanr_nhid: ", p), err) }
  return err
}

func (p *VrVxlanReq) Equals(other *VrVxlanReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VxlanrRid != other.VxlanrRid { return false }
  if p.VxlanrVnid != other.VxlanrVnid { return false }
  if p.VxlanrNhid != other.VxlanrNhid { return false }
  return true
}

func (p *VrVxlanReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrVxlanReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - RtrVrfID
//  - RtrFamily
//  - RtrPrefix
//  - RtrPrefixLen
//  - RtrRid
//  - RtrLabelFlags
//  - RtrLabel
//  - RtrNhID
//  - RtrMarker
//  - RtrMarkerPlen
//  - RtrMac
//  - RtrReplacePlen
//  - RtrIndex
type VrRouteReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  RtrVrfID int32 `thrift:"rtr_vrf_id,2" db:"rtr_vrf_id" json:"rtr_vrf_id"`
  RtrFamily int32 `thrift:"rtr_family,3" db:"rtr_family" json:"rtr_family"`
  RtrPrefix []int8 `thrift:"rtr_prefix,4" db:"rtr_prefix" json:"rtr_prefix"`
  RtrPrefixLen int32 `thrift:"rtr_prefix_len,5" db:"rtr_prefix_len" json:"rtr_prefix_len"`
  RtrRid int16 `thrift:"rtr_rid,6" db:"rtr_rid" json:"rtr_rid"`
  RtrLabelFlags int16 `thrift:"rtr_label_flags,7" db:"rtr_label_flags" json:"rtr_label_flags"`
  RtrLabel int32 `thrift:"rtr_label,8" db:"rtr_label" json:"rtr_label"`
  RtrNhID int32 `thrift:"rtr_nh_id,9" db:"rtr_nh_id" json:"rtr_nh_id"`
  RtrMarker []int8 `thrift:"rtr_marker,10" db:"rtr_marker" json:"rtr_marker"`
  RtrMarkerPlen int32 `thrift:"rtr_marker_plen,11" db:"rtr_marker_plen" json:"rtr_marker_plen"`
  RtrMac []int8 `thrift:"rtr_mac,12" db:"rtr_mac" json:"rtr_mac"`
  RtrReplacePlen int32 `thrift:"rtr_replace_plen,13" db:"rtr_replace_plen" json:"rtr_replace_plen"`
  RtrIndex int32 `thrift:"rtr_index,14" db:"rtr_index" json:"rtr_index"`
}

func NewVrRouteReq() *VrRouteReq {
  return &VrRouteReq{}
}


func (p *VrRouteReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrRouteReq) GetRtrVrfID() int32 {
  return p.RtrVrfID
}

func (p *VrRouteReq) GetRtrFamily() int32 {
  return p.RtrFamily
}

func (p *VrRouteReq) GetRtrPrefix() []int8 {
  return p.RtrPrefix
}

func (p *VrRouteReq) GetRtrPrefixLen() int32 {
  return p.RtrPrefixLen
}

func (p *VrRouteReq) GetRtrRid() int16 {
  return p.RtrRid
}

func (p *VrRouteReq) GetRtrLabelFlags() int16 {
  return p.RtrLabelFlags
}

func (p *VrRouteReq) GetRtrLabel() int32 {
  return p.RtrLabel
}

func (p *VrRouteReq) GetRtrNhID() int32 {
  return p.RtrNhID
}

func (p *VrRouteReq) GetRtrMarker() []int8 {
  return p.RtrMarker
}

func (p *VrRouteReq) GetRtrMarkerPlen() int32 {
  return p.RtrMarkerPlen
}

func (p *VrRouteReq) GetRtrMac() []int8 {
  return p.RtrMac
}

func (p *VrRouteReq) GetRtrReplacePlen() int32 {
  return p.RtrReplacePlen
}

func (p *VrRouteReq) GetRtrIndex() int32 {
  return p.RtrIndex
}
func (p *VrRouteReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrRouteReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrRouteReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RtrVrfID = v
}
  return nil
}

func (p *VrRouteReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RtrFamily = v
}
  return nil
}

func (p *VrRouteReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.RtrPrefix =  tSlice
  for i := 0; i < size; i ++ {
var _elem74 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem74 = temp
}
    p.RtrPrefix = append(p.RtrPrefix, _elem74)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrRouteReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RtrPrefixLen = v
}
  return nil
}

func (p *VrRouteReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RtrRid = v
}
  return nil
}

func (p *VrRouteReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RtrLabelFlags = v
}
  return nil
}

func (p *VrRouteReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RtrLabel = v
}
  return nil
}

func (p *VrRouteReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RtrNhID = v
}
  return nil
}

func (p *VrRouteReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.RtrMarker =  tSlice
  for i := 0; i < size; i ++ {
var _elem75 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem75 = temp
}
    p.RtrMarker = append(p.RtrMarker, _elem75)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrRouteReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RtrMarkerPlen = v
}
  return nil
}

func (p *VrRouteReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.RtrMac =  tSlice
  for i := 0; i < size; i ++ {
var _elem76 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem76 = temp
}
    p.RtrMac = append(p.RtrMac, _elem76)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrRouteReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.RtrReplacePlen = v
}
  return nil
}

func (p *VrRouteReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RtrIndex = v
}
  return nil
}

func (p *VrRouteReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_route_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrRouteReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_vrf_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rtr_vrf_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrVrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_vrf_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rtr_vrf_id: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_family", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rtr_family: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrFamily)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rtr_family: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_prefix", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rtr_prefix: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.RtrPrefix)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RtrPrefix {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rtr_prefix: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_prefix_len", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:rtr_prefix_len: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrPrefixLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_prefix_len (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:rtr_prefix_len: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_rid", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rtr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.RtrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_rid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rtr_rid: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_label_flags", thrift.I16, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:rtr_label_flags: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.RtrLabelFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_label_flags (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:rtr_label_flags: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_label", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:rtr_label: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_label (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:rtr_label: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_nh_id", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:rtr_nh_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrNhID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_nh_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:rtr_nh_id: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_marker", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:rtr_marker: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.RtrMarker)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RtrMarker {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:rtr_marker: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_marker_plen", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rtr_marker_plen: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrMarkerPlen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_marker_plen (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rtr_marker_plen: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_mac", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:rtr_mac: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.RtrMac)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RtrMac {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:rtr_mac: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_replace_plen", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:rtr_replace_plen: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrReplacePlen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_replace_plen (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:rtr_replace_plen: ", p), err) }
  return err
}

func (p *VrRouteReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rtr_index", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:rtr_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RtrIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rtr_index (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:rtr_index: ", p), err) }
  return err
}

func (p *VrRouteReq) Equals(other *VrRouteReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.RtrVrfID != other.RtrVrfID { return false }
  if p.RtrFamily != other.RtrFamily { return false }
  if len(p.RtrPrefix) != len(other.RtrPrefix) { return false }
  for i, _tgt := range p.RtrPrefix {
    _src77 := other.RtrPrefix[i]
    if _tgt != _src77 { return false }
  }
  if p.RtrPrefixLen != other.RtrPrefixLen { return false }
  if p.RtrRid != other.RtrRid { return false }
  if p.RtrLabelFlags != other.RtrLabelFlags { return false }
  if p.RtrLabel != other.RtrLabel { return false }
  if p.RtrNhID != other.RtrNhID { return false }
  if len(p.RtrMarker) != len(other.RtrMarker) { return false }
  for i, _tgt := range p.RtrMarker {
    _src78 := other.RtrMarker[i]
    if _tgt != _src78 { return false }
  }
  if p.RtrMarkerPlen != other.RtrMarkerPlen { return false }
  if len(p.RtrMac) != len(other.RtrMac) { return false }
  for i, _tgt := range p.RtrMac {
    _src79 := other.RtrMac[i]
    if _tgt != _src79 { return false }
  }
  if p.RtrReplacePlen != other.RtrReplacePlen { return false }
  if p.RtrIndex != other.RtrIndex { return false }
  return true
}

func (p *VrRouteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrRouteReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - MrLabel
//  - MrRid
//  - MrNhid
//  - MrMarker
type VrMplsReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  MrLabel int32 `thrift:"mr_label,2" db:"mr_label" json:"mr_label"`
  MrRid int16 `thrift:"mr_rid,3" db:"mr_rid" json:"mr_rid"`
  MrNhid int32 `thrift:"mr_nhid,4" db:"mr_nhid" json:"mr_nhid"`
  MrMarker int32 `thrift:"mr_marker,5" db:"mr_marker" json:"mr_marker"`
}

func NewVrMplsReq() *VrMplsReq {
  return &VrMplsReq{}
}


func (p *VrMplsReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrMplsReq) GetMrLabel() int32 {
  return p.MrLabel
}

func (p *VrMplsReq) GetMrRid() int16 {
  return p.MrRid
}

func (p *VrMplsReq) GetMrNhid() int32 {
  return p.MrNhid
}

func (p *VrMplsReq) GetMrMarker() int32 {
  return p.MrMarker
}
func (p *VrMplsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrMplsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrMplsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MrLabel = v
}
  return nil
}

func (p *VrMplsReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MrRid = v
}
  return nil
}

func (p *VrMplsReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MrNhid = v
}
  return nil
}

func (p *VrMplsReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MrMarker = v
}
  return nil
}

func (p *VrMplsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_mpls_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrMplsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrMplsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mr_label", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mr_label: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MrLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mr_label (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mr_label: ", p), err) }
  return err
}

func (p *VrMplsReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mr_rid", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mr_rid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mr_rid: ", p), err) }
  return err
}

func (p *VrMplsReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mr_nhid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mr_nhid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MrNhid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mr_nhid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mr_nhid: ", p), err) }
  return err
}

func (p *VrMplsReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mr_marker", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mr_marker: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mr_marker (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mr_marker: ", p), err) }
  return err
}

func (p *VrMplsReq) Equals(other *VrMplsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.MrLabel != other.MrLabel { return false }
  if p.MrRid != other.MrRid { return false }
  if p.MrNhid != other.MrNhid { return false }
  if p.MrMarker != other.MrMarker { return false }
  return true
}

func (p *VrMplsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrMplsReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - MirrIndex
//  - MirrRid
//  - MirrNhid
//  - MirrUsers
//  - MirrFlags
//  - MirrMarker
//  - MirrVni
//  - MirrVlan
type VrMirrorReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  MirrIndex int16 `thrift:"mirr_index,2" db:"mirr_index" json:"mirr_index"`
  MirrRid int16 `thrift:"mirr_rid,3" db:"mirr_rid" json:"mirr_rid"`
  MirrNhid int32 `thrift:"mirr_nhid,4" db:"mirr_nhid" json:"mirr_nhid"`
  MirrUsers int32 `thrift:"mirr_users,5" db:"mirr_users" json:"mirr_users"`
  MirrFlags int32 `thrift:"mirr_flags,6" db:"mirr_flags" json:"mirr_flags"`
  MirrMarker int32 `thrift:"mirr_marker,7" db:"mirr_marker" json:"mirr_marker"`
  MirrVni int32 `thrift:"mirr_vni,8" db:"mirr_vni" json:"mirr_vni"`
  MirrVlan int16 `thrift:"mirr_vlan,9" db:"mirr_vlan" json:"mirr_vlan"`
}

func NewVrMirrorReq() *VrMirrorReq {
  return &VrMirrorReq{}
}


func (p *VrMirrorReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrMirrorReq) GetMirrIndex() int16 {
  return p.MirrIndex
}

func (p *VrMirrorReq) GetMirrRid() int16 {
  return p.MirrRid
}

func (p *VrMirrorReq) GetMirrNhid() int32 {
  return p.MirrNhid
}

func (p *VrMirrorReq) GetMirrUsers() int32 {
  return p.MirrUsers
}

func (p *VrMirrorReq) GetMirrFlags() int32 {
  return p.MirrFlags
}

func (p *VrMirrorReq) GetMirrMarker() int32 {
  return p.MirrMarker
}

func (p *VrMirrorReq) GetMirrVni() int32 {
  return p.MirrVni
}

func (p *VrMirrorReq) GetMirrVlan() int16 {
  return p.MirrVlan
}
func (p *VrMirrorReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrMirrorReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrMirrorReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MirrIndex = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MirrRid = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MirrNhid = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MirrUsers = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MirrFlags = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MirrMarker = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MirrVni = v
}
  return nil
}

func (p *VrMirrorReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.MirrVlan = v
}
  return nil
}

func (p *VrMirrorReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_mirror_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrMirrorReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_index", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mirr_index: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MirrIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mirr_index: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_rid", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mirr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MirrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_rid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mirr_rid: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_nhid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mirr_nhid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MirrNhid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_nhid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mirr_nhid: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_users", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mirr_users: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MirrUsers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_users (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mirr_users: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_flags", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mirr_flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MirrFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_flags (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mirr_flags: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_marker", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mirr_marker: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MirrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_marker (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mirr_marker: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_vni", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mirr_vni: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MirrVni)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_vni (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mirr_vni: ", p), err) }
  return err
}

func (p *VrMirrorReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mirr_vlan", thrift.I16, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:mirr_vlan: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MirrVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mirr_vlan (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:mirr_vlan: ", p), err) }
  return err
}

func (p *VrMirrorReq) Equals(other *VrMirrorReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.MirrIndex != other.MirrIndex { return false }
  if p.MirrRid != other.MirrRid { return false }
  if p.MirrNhid != other.MirrNhid { return false }
  if p.MirrUsers != other.MirrUsers { return false }
  if p.MirrFlags != other.MirrFlags { return false }
  if p.MirrMarker != other.MirrMarker { return false }
  if p.MirrVni != other.MirrVni { return false }
  if p.MirrVlan != other.MirrVlan { return false }
  return true
}

func (p *VrMirrorReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrMirrorReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VrfRid
//  - VrfIdx
//  - VrfFlags
//  - VrfHbflVifIdx
//  - VrfHbfrVifIdx
//  - VrfMarker
type VrVrfReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VrfRid int16 `thrift:"vrf_rid,2" db:"vrf_rid" json:"vrf_rid"`
  VrfIdx int32 `thrift:"vrf_idx,3" db:"vrf_idx" json:"vrf_idx"`
  VrfFlags int32 `thrift:"vrf_flags,4" db:"vrf_flags" json:"vrf_flags"`
  VrfHbflVifIdx int32 `thrift:"vrf_hbfl_vif_idx,5" db:"vrf_hbfl_vif_idx" json:"vrf_hbfl_vif_idx"`
  VrfHbfrVifIdx int32 `thrift:"vrf_hbfr_vif_idx,6" db:"vrf_hbfr_vif_idx" json:"vrf_hbfr_vif_idx"`
  VrfMarker int32 `thrift:"vrf_marker,7" db:"vrf_marker" json:"vrf_marker"`
}

func NewVrVrfReq() *VrVrfReq {
  return &VrVrfReq{}
}


func (p *VrVrfReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrVrfReq) GetVrfRid() int16 {
  return p.VrfRid
}

func (p *VrVrfReq) GetVrfIdx() int32 {
  return p.VrfIdx
}

func (p *VrVrfReq) GetVrfFlags() int32 {
  return p.VrfFlags
}

func (p *VrVrfReq) GetVrfHbflVifIdx() int32 {
  return p.VrfHbflVifIdx
}

func (p *VrVrfReq) GetVrfHbfrVifIdx() int32 {
  return p.VrfHbfrVifIdx
}

func (p *VrVrfReq) GetVrfMarker() int32 {
  return p.VrfMarker
}
func (p *VrVrfReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrVrfReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrVrfReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VrfRid = v
}
  return nil
}

func (p *VrVrfReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VrfIdx = v
}
  return nil
}

func (p *VrVrfReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VrfFlags = v
}
  return nil
}

func (p *VrVrfReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VrfHbflVifIdx = v
}
  return nil
}

func (p *VrVrfReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VrfHbfrVifIdx = v
}
  return nil
}

func (p *VrVrfReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VrfMarker = v
}
  return nil
}

func (p *VrVrfReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_vrf_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrVrfReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vrf_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VrfRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vrf_rid: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_idx", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vrf_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VrfIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_idx (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vrf_idx: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_flags", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vrf_flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VrfFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_flags (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vrf_flags: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_hbfl_vif_idx", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vrf_hbfl_vif_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VrfHbflVifIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_hbfl_vif_idx (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vrf_hbfl_vif_idx: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_hbfr_vif_idx", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vrf_hbfr_vif_idx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VrfHbfrVifIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_hbfr_vif_idx (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vrf_hbfr_vif_idx: ", p), err) }
  return err
}

func (p *VrVrfReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vrf_marker", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vrf_marker: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VrfMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_marker (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vrf_marker: ", p), err) }
  return err
}

func (p *VrVrfReq) Equals(other *VrVrfReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VrfRid != other.VrfRid { return false }
  if p.VrfIdx != other.VrfIdx { return false }
  if p.VrfFlags != other.VrfFlags { return false }
  if p.VrfHbflVifIdx != other.VrfHbflVifIdx { return false }
  if p.VrfHbfrVifIdx != other.VrfHbfrVifIdx { return false }
  if p.VrfMarker != other.VrfMarker { return false }
  return true
}

func (p *VrVrfReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrVrfReq(%+v)", *p)
}

// Attributes:
//  - FrOp
//  - FrRid
//  - FrIndex
//  - FrAction
//  - FrFlags
//  - FrRindex
//  - FrFamily
//  - FrFlowSipU
//  - FrFlowSipL
//  - FrFlowDipU
//  - FrFlowDipL
//  - FrFlowSport
//  - FrFlowDport
//  - FrFlowProto
//  - FrFlowVrf
//  - FrFlowDvrf
//  - FrMirID
//  - FrSecMirID
//  - FrMirSip
//  - FrMirSport
//  - FrPcapMetaData
//  - FrMirVrf
//  - FrEcmpNhIndex
//  - FrSrcNhIndex
//  - FrFlowNhID
//  - FrDropReason
//  - FrGenID
//  - FrRflowSipU
//  - FrRflowSipL
//  - FrRflowDipU
//  - FrRflowDipL
//  - FrRflowNhID
//  - FrRflowSport
//  - FrRflowDport
//  - FrQosID
//  - FrTTL
//  - FrExtflags
//  - FrFlags1
//  - FrUnderlayEcmpIndex
type VrFlowReq struct {
  FrOp FlowOp `thrift:"fr_op,1" db:"fr_op" json:"fr_op"`
  FrRid int16 `thrift:"fr_rid,2" db:"fr_rid" json:"fr_rid"`
  FrIndex int32 `thrift:"fr_index,3" db:"fr_index" json:"fr_index"`
  FrAction int16 `thrift:"fr_action,4" db:"fr_action" json:"fr_action"`
  FrFlags int16 `thrift:"fr_flags,5" db:"fr_flags" json:"fr_flags"`
  FrRindex int32 `thrift:"fr_rindex,6" db:"fr_rindex" json:"fr_rindex"`
  FrFamily int32 `thrift:"fr_family,7" db:"fr_family" json:"fr_family"`
  FrFlowSipU int64 `thrift:"fr_flow_sip_u,8" db:"fr_flow_sip_u" json:"fr_flow_sip_u"`
  FrFlowSipL int64 `thrift:"fr_flow_sip_l,9" db:"fr_flow_sip_l" json:"fr_flow_sip_l"`
  FrFlowDipU int64 `thrift:"fr_flow_dip_u,10" db:"fr_flow_dip_u" json:"fr_flow_dip_u"`
  FrFlowDipL int64 `thrift:"fr_flow_dip_l,11" db:"fr_flow_dip_l" json:"fr_flow_dip_l"`
  FrFlowSport int16 `thrift:"fr_flow_sport,12" db:"fr_flow_sport" json:"fr_flow_sport"`
  FrFlowDport int16 `thrift:"fr_flow_dport,13" db:"fr_flow_dport" json:"fr_flow_dport"`
  FrFlowProto int8 `thrift:"fr_flow_proto,14" db:"fr_flow_proto" json:"fr_flow_proto"`
  FrFlowVrf int16 `thrift:"fr_flow_vrf,15" db:"fr_flow_vrf" json:"fr_flow_vrf"`
  FrFlowDvrf int16 `thrift:"fr_flow_dvrf,16" db:"fr_flow_dvrf" json:"fr_flow_dvrf"`
  FrMirID int16 `thrift:"fr_mir_id,17" db:"fr_mir_id" json:"fr_mir_id"`
  FrSecMirID int16 `thrift:"fr_sec_mir_id,18" db:"fr_sec_mir_id" json:"fr_sec_mir_id"`
  FrMirSip int32 `thrift:"fr_mir_sip,19" db:"fr_mir_sip" json:"fr_mir_sip"`
  FrMirSport int16 `thrift:"fr_mir_sport,20" db:"fr_mir_sport" json:"fr_mir_sport"`
  FrPcapMetaData []int8 `thrift:"fr_pcap_meta_data,21" db:"fr_pcap_meta_data" json:"fr_pcap_meta_data"`
  FrMirVrf int16 `thrift:"fr_mir_vrf,22" db:"fr_mir_vrf" json:"fr_mir_vrf"`
  FrEcmpNhIndex int32 `thrift:"fr_ecmp_nh_index,23" db:"fr_ecmp_nh_index" json:"fr_ecmp_nh_index"`
  FrSrcNhIndex int32 `thrift:"fr_src_nh_index,24" db:"fr_src_nh_index" json:"fr_src_nh_index"`
  FrFlowNhID int32 `thrift:"fr_flow_nh_id,25" db:"fr_flow_nh_id" json:"fr_flow_nh_id"`
  FrDropReason int16 `thrift:"fr_drop_reason,26" db:"fr_drop_reason" json:"fr_drop_reason"`
  FrGenID int8 `thrift:"fr_gen_id,27" db:"fr_gen_id" json:"fr_gen_id"`
  FrRflowSipU int64 `thrift:"fr_rflow_sip_u,28" db:"fr_rflow_sip_u" json:"fr_rflow_sip_u"`
  FrRflowSipL int64 `thrift:"fr_rflow_sip_l,29" db:"fr_rflow_sip_l" json:"fr_rflow_sip_l"`
  FrRflowDipU int64 `thrift:"fr_rflow_dip_u,30" db:"fr_rflow_dip_u" json:"fr_rflow_dip_u"`
  FrRflowDipL int64 `thrift:"fr_rflow_dip_l,31" db:"fr_rflow_dip_l" json:"fr_rflow_dip_l"`
  FrRflowNhID int32 `thrift:"fr_rflow_nh_id,32" db:"fr_rflow_nh_id" json:"fr_rflow_nh_id"`
  FrRflowSport int16 `thrift:"fr_rflow_sport,33" db:"fr_rflow_sport" json:"fr_rflow_sport"`
  FrRflowDport int16 `thrift:"fr_rflow_dport,34" db:"fr_rflow_dport" json:"fr_rflow_dport"`
  FrQosID int16 `thrift:"fr_qos_id,35" db:"fr_qos_id" json:"fr_qos_id"`
  FrTTL int8 `thrift:"fr_ttl,36" db:"fr_ttl" json:"fr_ttl"`
  FrExtflags int16 `thrift:"fr_extflags,37" db:"fr_extflags" json:"fr_extflags"`
  FrFlags1 int16 `thrift:"fr_flags1,38" db:"fr_flags1" json:"fr_flags1"`
  FrUnderlayEcmpIndex int8 `thrift:"fr_underlay_ecmp_index,39" db:"fr_underlay_ecmp_index" json:"fr_underlay_ecmp_index"`
}

func NewVrFlowReq() *VrFlowReq {
  return &VrFlowReq{}
}


func (p *VrFlowReq) GetFrOp() FlowOp {
  return p.FrOp
}

func (p *VrFlowReq) GetFrRid() int16 {
  return p.FrRid
}

func (p *VrFlowReq) GetFrIndex() int32 {
  return p.FrIndex
}

func (p *VrFlowReq) GetFrAction() int16 {
  return p.FrAction
}

func (p *VrFlowReq) GetFrFlags() int16 {
  return p.FrFlags
}

func (p *VrFlowReq) GetFrRindex() int32 {
  return p.FrRindex
}

func (p *VrFlowReq) GetFrFamily() int32 {
  return p.FrFamily
}

func (p *VrFlowReq) GetFrFlowSipU() int64 {
  return p.FrFlowSipU
}

func (p *VrFlowReq) GetFrFlowSipL() int64 {
  return p.FrFlowSipL
}

func (p *VrFlowReq) GetFrFlowDipU() int64 {
  return p.FrFlowDipU
}

func (p *VrFlowReq) GetFrFlowDipL() int64 {
  return p.FrFlowDipL
}

func (p *VrFlowReq) GetFrFlowSport() int16 {
  return p.FrFlowSport
}

func (p *VrFlowReq) GetFrFlowDport() int16 {
  return p.FrFlowDport
}

func (p *VrFlowReq) GetFrFlowProto() int8 {
  return p.FrFlowProto
}

func (p *VrFlowReq) GetFrFlowVrf() int16 {
  return p.FrFlowVrf
}

func (p *VrFlowReq) GetFrFlowDvrf() int16 {
  return p.FrFlowDvrf
}

func (p *VrFlowReq) GetFrMirID() int16 {
  return p.FrMirID
}

func (p *VrFlowReq) GetFrSecMirID() int16 {
  return p.FrSecMirID
}

func (p *VrFlowReq) GetFrMirSip() int32 {
  return p.FrMirSip
}

func (p *VrFlowReq) GetFrMirSport() int16 {
  return p.FrMirSport
}

func (p *VrFlowReq) GetFrPcapMetaData() []int8 {
  return p.FrPcapMetaData
}

func (p *VrFlowReq) GetFrMirVrf() int16 {
  return p.FrMirVrf
}

func (p *VrFlowReq) GetFrEcmpNhIndex() int32 {
  return p.FrEcmpNhIndex
}

func (p *VrFlowReq) GetFrSrcNhIndex() int32 {
  return p.FrSrcNhIndex
}

func (p *VrFlowReq) GetFrFlowNhID() int32 {
  return p.FrFlowNhID
}

func (p *VrFlowReq) GetFrDropReason() int16 {
  return p.FrDropReason
}

func (p *VrFlowReq) GetFrGenID() int8 {
  return p.FrGenID
}

func (p *VrFlowReq) GetFrRflowSipU() int64 {
  return p.FrRflowSipU
}

func (p *VrFlowReq) GetFrRflowSipL() int64 {
  return p.FrRflowSipL
}

func (p *VrFlowReq) GetFrRflowDipU() int64 {
  return p.FrRflowDipU
}

func (p *VrFlowReq) GetFrRflowDipL() int64 {
  return p.FrRflowDipL
}

func (p *VrFlowReq) GetFrRflowNhID() int32 {
  return p.FrRflowNhID
}

func (p *VrFlowReq) GetFrRflowSport() int16 {
  return p.FrRflowSport
}

func (p *VrFlowReq) GetFrRflowDport() int16 {
  return p.FrRflowDport
}

func (p *VrFlowReq) GetFrQosID() int16 {
  return p.FrQosID
}

func (p *VrFlowReq) GetFrTTL() int8 {
  return p.FrTTL
}

func (p *VrFlowReq) GetFrExtflags() int16 {
  return p.FrExtflags
}

func (p *VrFlowReq) GetFrFlags1() int16 {
  return p.FrFlags1
}

func (p *VrFlowReq) GetFrUnderlayEcmpIndex() int8 {
  return p.FrUnderlayEcmpIndex
}
func (p *VrFlowReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrFlowReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FlowOp(v)
  p.FrOp = temp
}
  return nil
}

func (p *VrFlowReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FrRid = v
}
  return nil
}

func (p *VrFlowReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FrIndex = v
}
  return nil
}

func (p *VrFlowReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FrAction = v
}
  return nil
}

func (p *VrFlowReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FrFlags = v
}
  return nil
}

func (p *VrFlowReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FrRindex = v
}
  return nil
}

func (p *VrFlowReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FrFamily = v
}
  return nil
}

func (p *VrFlowReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FrFlowSipU = v
}
  return nil
}

func (p *VrFlowReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FrFlowSipL = v
}
  return nil
}

func (p *VrFlowReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FrFlowDipU = v
}
  return nil
}

func (p *VrFlowReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FrFlowDipL = v
}
  return nil
}

func (p *VrFlowReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.FrFlowSport = v
}
  return nil
}

func (p *VrFlowReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FrFlowDport = v
}
  return nil
}

func (p *VrFlowReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := int8(v)
  p.FrFlowProto = temp
}
  return nil
}

func (p *VrFlowReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.FrFlowVrf = v
}
  return nil
}

func (p *VrFlowReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.FrFlowDvrf = v
}
  return nil
}

func (p *VrFlowReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.FrMirID = v
}
  return nil
}

func (p *VrFlowReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.FrSecMirID = v
}
  return nil
}

func (p *VrFlowReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.FrMirSip = v
}
  return nil
}

func (p *VrFlowReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.FrMirSport = v
}
  return nil
}

func (p *VrFlowReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.FrPcapMetaData =  tSlice
  for i := 0; i < size; i ++ {
var _elem80 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem80 = temp
}
    p.FrPcapMetaData = append(p.FrPcapMetaData, _elem80)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFlowReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.FrMirVrf = v
}
  return nil
}

func (p *VrFlowReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.FrEcmpNhIndex = v
}
  return nil
}

func (p *VrFlowReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.FrSrcNhIndex = v
}
  return nil
}

func (p *VrFlowReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.FrFlowNhID = v
}
  return nil
}

func (p *VrFlowReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.FrDropReason = v
}
  return nil
}

func (p *VrFlowReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  temp := int8(v)
  p.FrGenID = temp
}
  return nil
}

func (p *VrFlowReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FrRflowSipU = v
}
  return nil
}

func (p *VrFlowReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.FrRflowSipL = v
}
  return nil
}

func (p *VrFlowReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.FrRflowDipU = v
}
  return nil
}

func (p *VrFlowReq)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.FrRflowDipL = v
}
  return nil
}

func (p *VrFlowReq)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.FrRflowNhID = v
}
  return nil
}

func (p *VrFlowReq)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.FrRflowSport = v
}
  return nil
}

func (p *VrFlowReq)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.FrRflowDport = v
}
  return nil
}

func (p *VrFlowReq)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.FrQosID = v
}
  return nil
}

func (p *VrFlowReq)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  temp := int8(v)
  p.FrTTL = temp
}
  return nil
}

func (p *VrFlowReq)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.FrExtflags = v
}
  return nil
}

func (p *VrFlowReq)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.FrFlags1 = v
}
  return nil
}

func (p *VrFlowReq)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := int8(v)
  p.FrUnderlayEcmpIndex = temp
}
  return nil
}

func (p *VrFlowReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_flow_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrFlowReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fr_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fr_op: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fr_rid: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_index", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fr_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_index (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fr_index: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_action", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fr_action: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrAction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_action (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fr_action: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flags", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fr_flags: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flags (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fr_flags: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rindex", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fr_rindex: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrRindex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rindex (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fr_rindex: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_family", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fr_family: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrFamily)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_family (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fr_family: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_sip_u", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fr_flow_sip_u: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrFlowSipU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_sip_u (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fr_flow_sip_u: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_sip_l", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fr_flow_sip_l: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrFlowSipL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_sip_l (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fr_flow_sip_l: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_dip_u", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fr_flow_dip_u: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrFlowDipU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_dip_u (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fr_flow_dip_u: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_dip_l", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:fr_flow_dip_l: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrFlowDipL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_dip_l (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:fr_flow_dip_l: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_sport", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fr_flow_sport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlowSport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_sport (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fr_flow_sport: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_dport", thrift.I16, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:fr_flow_dport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlowDport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_dport (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:fr_flow_dport: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_proto", thrift.BYTE, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:fr_flow_proto: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.FrFlowProto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_proto (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:fr_flow_proto: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_vrf", thrift.I16, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:fr_flow_vrf: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlowVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_vrf (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:fr_flow_vrf: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_dvrf", thrift.I16, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:fr_flow_dvrf: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlowDvrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_dvrf (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:fr_flow_dvrf: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_mir_id", thrift.I16, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:fr_mir_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrMirID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_mir_id (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:fr_mir_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_sec_mir_id", thrift.I16, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:fr_sec_mir_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrSecMirID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_sec_mir_id (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:fr_sec_mir_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_mir_sip", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:fr_mir_sip: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrMirSip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_mir_sip (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:fr_mir_sip: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_mir_sport", thrift.I16, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:fr_mir_sport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrMirSport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_mir_sport (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:fr_mir_sport: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_pcap_meta_data", thrift.LIST, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:fr_pcap_meta_data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.FrPcapMetaData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FrPcapMetaData {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:fr_pcap_meta_data: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_mir_vrf", thrift.I16, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:fr_mir_vrf: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrMirVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_mir_vrf (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:fr_mir_vrf: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_ecmp_nh_index", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:fr_ecmp_nh_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrEcmpNhIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_ecmp_nh_index (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:fr_ecmp_nh_index: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_src_nh_index", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:fr_src_nh_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrSrcNhIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_src_nh_index (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:fr_src_nh_index: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flow_nh_id", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:fr_flow_nh_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrFlowNhID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flow_nh_id (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:fr_flow_nh_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_drop_reason", thrift.I16, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:fr_drop_reason: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrDropReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_drop_reason (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:fr_drop_reason: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_gen_id", thrift.BYTE, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:fr_gen_id: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.FrGenID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_gen_id (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:fr_gen_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_sip_u", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:fr_rflow_sip_u: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrRflowSipU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_sip_u (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:fr_rflow_sip_u: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_sip_l", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:fr_rflow_sip_l: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrRflowSipL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_sip_l (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:fr_rflow_sip_l: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_dip_u", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:fr_rflow_dip_u: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrRflowDipU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_dip_u (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:fr_rflow_dip_u: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_dip_l", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:fr_rflow_dip_l: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FrRflowDipL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_dip_l (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:fr_rflow_dip_l: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_nh_id", thrift.I32, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:fr_rflow_nh_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrRflowNhID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_nh_id (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:fr_rflow_nh_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_sport", thrift.I16, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:fr_rflow_sport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrRflowSport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_sport (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:fr_rflow_sport: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_rflow_dport", thrift.I16, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:fr_rflow_dport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrRflowDport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_rflow_dport (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:fr_rflow_dport: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_qos_id", thrift.I16, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:fr_qos_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrQosID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_qos_id (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:fr_qos_id: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_ttl", thrift.BYTE, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:fr_ttl: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.FrTTL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_ttl (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:fr_ttl: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_extflags", thrift.I16, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:fr_extflags: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrExtflags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_extflags (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:fr_extflags: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_flags1", thrift.I16, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:fr_flags1: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrFlags1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_flags1 (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:fr_flags1: ", p), err) }
  return err
}

func (p *VrFlowReq) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fr_underlay_ecmp_index", thrift.BYTE, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:fr_underlay_ecmp_index: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.FrUnderlayEcmpIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fr_underlay_ecmp_index (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:fr_underlay_ecmp_index: ", p), err) }
  return err
}

func (p *VrFlowReq) Equals(other *VrFlowReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FrOp != other.FrOp { return false }
  if p.FrRid != other.FrRid { return false }
  if p.FrIndex != other.FrIndex { return false }
  if p.FrAction != other.FrAction { return false }
  if p.FrFlags != other.FrFlags { return false }
  if p.FrRindex != other.FrRindex { return false }
  if p.FrFamily != other.FrFamily { return false }
  if p.FrFlowSipU != other.FrFlowSipU { return false }
  if p.FrFlowSipL != other.FrFlowSipL { return false }
  if p.FrFlowDipU != other.FrFlowDipU { return false }
  if p.FrFlowDipL != other.FrFlowDipL { return false }
  if p.FrFlowSport != other.FrFlowSport { return false }
  if p.FrFlowDport != other.FrFlowDport { return false }
  if p.FrFlowProto != other.FrFlowProto { return false }
  if p.FrFlowVrf != other.FrFlowVrf { return false }
  if p.FrFlowDvrf != other.FrFlowDvrf { return false }
  if p.FrMirID != other.FrMirID { return false }
  if p.FrSecMirID != other.FrSecMirID { return false }
  if p.FrMirSip != other.FrMirSip { return false }
  if p.FrMirSport != other.FrMirSport { return false }
  if len(p.FrPcapMetaData) != len(other.FrPcapMetaData) { return false }
  for i, _tgt := range p.FrPcapMetaData {
    _src81 := other.FrPcapMetaData[i]
    if _tgt != _src81 { return false }
  }
  if p.FrMirVrf != other.FrMirVrf { return false }
  if p.FrEcmpNhIndex != other.FrEcmpNhIndex { return false }
  if p.FrSrcNhIndex != other.FrSrcNhIndex { return false }
  if p.FrFlowNhID != other.FrFlowNhID { return false }
  if p.FrDropReason != other.FrDropReason { return false }
  if p.FrGenID != other.FrGenID { return false }
  if p.FrRflowSipU != other.FrRflowSipU { return false }
  if p.FrRflowSipL != other.FrRflowSipL { return false }
  if p.FrRflowDipU != other.FrRflowDipU { return false }
  if p.FrRflowDipL != other.FrRflowDipL { return false }
  if p.FrRflowNhID != other.FrRflowNhID { return false }
  if p.FrRflowSport != other.FrRflowSport { return false }
  if p.FrRflowDport != other.FrRflowDport { return false }
  if p.FrQosID != other.FrQosID { return false }
  if p.FrTTL != other.FrTTL { return false }
  if p.FrExtflags != other.FrExtflags { return false }
  if p.FrFlags1 != other.FrFlags1 { return false }
  if p.FrUnderlayEcmpIndex != other.FrUnderlayEcmpIndex { return false }
  return true
}

func (p *VrFlowReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrFlowReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VarRid
//  - VarVifIndex
//  - VarVifVrf
//  - VarVlanID
//  - VarMarker
//  - VarNhID
type VrVrfAssignReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VarRid int16 `thrift:"var_rid,2" db:"var_rid" json:"var_rid"`
  VarVifIndex int16 `thrift:"var_vif_index,3" db:"var_vif_index" json:"var_vif_index"`
  VarVifVrf int32 `thrift:"var_vif_vrf,4" db:"var_vif_vrf" json:"var_vif_vrf"`
  VarVlanID int16 `thrift:"var_vlan_id,5" db:"var_vlan_id" json:"var_vlan_id"`
  VarMarker int16 `thrift:"var_marker,6" db:"var_marker" json:"var_marker"`
  VarNhID int32 `thrift:"var_nh_id,7" db:"var_nh_id" json:"var_nh_id"`
}

func NewVrVrfAssignReq() *VrVrfAssignReq {
  return &VrVrfAssignReq{}
}


func (p *VrVrfAssignReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrVrfAssignReq) GetVarRid() int16 {
  return p.VarRid
}

func (p *VrVrfAssignReq) GetVarVifIndex() int16 {
  return p.VarVifIndex
}

func (p *VrVrfAssignReq) GetVarVifVrf() int32 {
  return p.VarVifVrf
}

func (p *VrVrfAssignReq) GetVarVlanID() int16 {
  return p.VarVlanID
}

func (p *VrVrfAssignReq) GetVarMarker() int16 {
  return p.VarMarker
}

func (p *VrVrfAssignReq) GetVarNhID() int32 {
  return p.VarNhID
}
func (p *VrVrfAssignReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrVrfAssignReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VarRid = v
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VarVifIndex = v
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VarVifVrf = v
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VarVlanID = v
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VarMarker = v
}
  return nil
}

func (p *VrVrfAssignReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VarNhID = v
}
  return nil
}

func (p *VrVrfAssignReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_vrf_assign_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrVrfAssignReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:var_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VarRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:var_rid: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_vif_index", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:var_vif_index: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VarVifIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_vif_index (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:var_vif_index: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_vif_vrf", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:var_vif_vrf: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VarVifVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_vif_vrf (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:var_vif_vrf: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_vlan_id", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:var_vlan_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VarVlanID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_vlan_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:var_vlan_id: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_marker", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:var_marker: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VarMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_marker (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:var_marker: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "var_nh_id", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:var_nh_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VarNhID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.var_nh_id (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:var_nh_id: ", p), err) }
  return err
}

func (p *VrVrfAssignReq) Equals(other *VrVrfAssignReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VarRid != other.VarRid { return false }
  if p.VarVifIndex != other.VarVifIndex { return false }
  if p.VarVifVrf != other.VarVifVrf { return false }
  if p.VarVlanID != other.VarVlanID { return false }
  if p.VarMarker != other.VarMarker { return false }
  if p.VarNhID != other.VarNhID { return false }
  return true
}

func (p *VrVrfAssignReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrVrfAssignReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VsrRid
//  - VsrFamily
//  - VsrType
//  - VsrVrf
//  - VsrDiscards
//  - VsrResolves
//  - VsrReceives
//  - VsrEcmpComposites
//  - VsrL2McastComposites
//  - VsrFabricComposites
//  - VsrUDPTunnels
//  - VsrUDPMplsTunnels
//  - VsrGreMplsTunnels
//  - VsrL2Encaps
//  - VsrEncaps
//  - VsrMarker
//  - VsrGros
//  - VsrDiags
//  - VsrEncapComposites
//  - VsrEvpnComposites
//  - VsrVrfTranslates
//  - VsrVxlanTunnels
//  - VsrArpVirtualProxy
//  - VsrArpVirtualStitch
//  - VsrArpVirtualFlood
//  - VsrArpPhysicalStitch
//  - VsrArpTorProxy
//  - VsrArpPhysicalFlood
//  - VsrL2Receives
//  - VsrUucFloods
//  - VsrPbbTunnels
//  - VsrUDPMplsOverMplsTunnels
type VrVrfStatsReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VsrRid int16 `thrift:"vsr_rid,2" db:"vsr_rid" json:"vsr_rid"`
  VsrFamily int16 `thrift:"vsr_family,3" db:"vsr_family" json:"vsr_family"`
  VsrType int16 `thrift:"vsr_type,4" db:"vsr_type" json:"vsr_type"`
  VsrVrf int32 `thrift:"vsr_vrf,5" db:"vsr_vrf" json:"vsr_vrf"`
  VsrDiscards int64 `thrift:"vsr_discards,6" db:"vsr_discards" json:"vsr_discards"`
  VsrResolves int64 `thrift:"vsr_resolves,7" db:"vsr_resolves" json:"vsr_resolves"`
  VsrReceives int64 `thrift:"vsr_receives,8" db:"vsr_receives" json:"vsr_receives"`
  VsrEcmpComposites int64 `thrift:"vsr_ecmp_composites,9" db:"vsr_ecmp_composites" json:"vsr_ecmp_composites"`
  VsrL2McastComposites int64 `thrift:"vsr_l2_mcast_composites,10" db:"vsr_l2_mcast_composites" json:"vsr_l2_mcast_composites"`
  VsrFabricComposites int64 `thrift:"vsr_fabric_composites,11" db:"vsr_fabric_composites" json:"vsr_fabric_composites"`
  VsrUDPTunnels int64 `thrift:"vsr_udp_tunnels,12" db:"vsr_udp_tunnels" json:"vsr_udp_tunnels"`
  VsrUDPMplsTunnels int64 `thrift:"vsr_udp_mpls_tunnels,13" db:"vsr_udp_mpls_tunnels" json:"vsr_udp_mpls_tunnels"`
  VsrGreMplsTunnels int64 `thrift:"vsr_gre_mpls_tunnels,14" db:"vsr_gre_mpls_tunnels" json:"vsr_gre_mpls_tunnels"`
  VsrL2Encaps int64 `thrift:"vsr_l2_encaps,15" db:"vsr_l2_encaps" json:"vsr_l2_encaps"`
  VsrEncaps int64 `thrift:"vsr_encaps,16" db:"vsr_encaps" json:"vsr_encaps"`
  VsrMarker int16 `thrift:"vsr_marker,17" db:"vsr_marker" json:"vsr_marker"`
  VsrGros int64 `thrift:"vsr_gros,18" db:"vsr_gros" json:"vsr_gros"`
  VsrDiags int64 `thrift:"vsr_diags,19" db:"vsr_diags" json:"vsr_diags"`
  VsrEncapComposites int64 `thrift:"vsr_encap_composites,20" db:"vsr_encap_composites" json:"vsr_encap_composites"`
  VsrEvpnComposites int64 `thrift:"vsr_evpn_composites,21" db:"vsr_evpn_composites" json:"vsr_evpn_composites"`
  VsrVrfTranslates int64 `thrift:"vsr_vrf_translates,22" db:"vsr_vrf_translates" json:"vsr_vrf_translates"`
  VsrVxlanTunnels int64 `thrift:"vsr_vxlan_tunnels,23" db:"vsr_vxlan_tunnels" json:"vsr_vxlan_tunnels"`
  VsrArpVirtualProxy int64 `thrift:"vsr_arp_virtual_proxy,24" db:"vsr_arp_virtual_proxy" json:"vsr_arp_virtual_proxy"`
  VsrArpVirtualStitch int64 `thrift:"vsr_arp_virtual_stitch,25" db:"vsr_arp_virtual_stitch" json:"vsr_arp_virtual_stitch"`
  VsrArpVirtualFlood int64 `thrift:"vsr_arp_virtual_flood,26" db:"vsr_arp_virtual_flood" json:"vsr_arp_virtual_flood"`
  VsrArpPhysicalStitch int64 `thrift:"vsr_arp_physical_stitch,27" db:"vsr_arp_physical_stitch" json:"vsr_arp_physical_stitch"`
  VsrArpTorProxy int64 `thrift:"vsr_arp_tor_proxy,28" db:"vsr_arp_tor_proxy" json:"vsr_arp_tor_proxy"`
  VsrArpPhysicalFlood int64 `thrift:"vsr_arp_physical_flood,29" db:"vsr_arp_physical_flood" json:"vsr_arp_physical_flood"`
  VsrL2Receives int64 `thrift:"vsr_l2_receives,30" db:"vsr_l2_receives" json:"vsr_l2_receives"`
  VsrUucFloods int64 `thrift:"vsr_uuc_floods,31" db:"vsr_uuc_floods" json:"vsr_uuc_floods"`
  VsrPbbTunnels int64 `thrift:"vsr_pbb_tunnels,32" db:"vsr_pbb_tunnels" json:"vsr_pbb_tunnels"`
  VsrUDPMplsOverMplsTunnels int64 `thrift:"vsr_udp_mpls_over_mpls_tunnels,33" db:"vsr_udp_mpls_over_mpls_tunnels" json:"vsr_udp_mpls_over_mpls_tunnels"`
}

func NewVrVrfStatsReq() *VrVrfStatsReq {
  return &VrVrfStatsReq{}
}


func (p *VrVrfStatsReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrVrfStatsReq) GetVsrRid() int16 {
  return p.VsrRid
}

func (p *VrVrfStatsReq) GetVsrFamily() int16 {
  return p.VsrFamily
}

func (p *VrVrfStatsReq) GetVsrType() int16 {
  return p.VsrType
}

func (p *VrVrfStatsReq) GetVsrVrf() int32 {
  return p.VsrVrf
}

func (p *VrVrfStatsReq) GetVsrDiscards() int64 {
  return p.VsrDiscards
}

func (p *VrVrfStatsReq) GetVsrResolves() int64 {
  return p.VsrResolves
}

func (p *VrVrfStatsReq) GetVsrReceives() int64 {
  return p.VsrReceives
}

func (p *VrVrfStatsReq) GetVsrEcmpComposites() int64 {
  return p.VsrEcmpComposites
}

func (p *VrVrfStatsReq) GetVsrL2McastComposites() int64 {
  return p.VsrL2McastComposites
}

func (p *VrVrfStatsReq) GetVsrFabricComposites() int64 {
  return p.VsrFabricComposites
}

func (p *VrVrfStatsReq) GetVsrUDPTunnels() int64 {
  return p.VsrUDPTunnels
}

func (p *VrVrfStatsReq) GetVsrUDPMplsTunnels() int64 {
  return p.VsrUDPMplsTunnels
}

func (p *VrVrfStatsReq) GetVsrGreMplsTunnels() int64 {
  return p.VsrGreMplsTunnels
}

func (p *VrVrfStatsReq) GetVsrL2Encaps() int64 {
  return p.VsrL2Encaps
}

func (p *VrVrfStatsReq) GetVsrEncaps() int64 {
  return p.VsrEncaps
}

func (p *VrVrfStatsReq) GetVsrMarker() int16 {
  return p.VsrMarker
}

func (p *VrVrfStatsReq) GetVsrGros() int64 {
  return p.VsrGros
}

func (p *VrVrfStatsReq) GetVsrDiags() int64 {
  return p.VsrDiags
}

func (p *VrVrfStatsReq) GetVsrEncapComposites() int64 {
  return p.VsrEncapComposites
}

func (p *VrVrfStatsReq) GetVsrEvpnComposites() int64 {
  return p.VsrEvpnComposites
}

func (p *VrVrfStatsReq) GetVsrVrfTranslates() int64 {
  return p.VsrVrfTranslates
}

func (p *VrVrfStatsReq) GetVsrVxlanTunnels() int64 {
  return p.VsrVxlanTunnels
}

func (p *VrVrfStatsReq) GetVsrArpVirtualProxy() int64 {
  return p.VsrArpVirtualProxy
}

func (p *VrVrfStatsReq) GetVsrArpVirtualStitch() int64 {
  return p.VsrArpVirtualStitch
}

func (p *VrVrfStatsReq) GetVsrArpVirtualFlood() int64 {
  return p.VsrArpVirtualFlood
}

func (p *VrVrfStatsReq) GetVsrArpPhysicalStitch() int64 {
  return p.VsrArpPhysicalStitch
}

func (p *VrVrfStatsReq) GetVsrArpTorProxy() int64 {
  return p.VsrArpTorProxy
}

func (p *VrVrfStatsReq) GetVsrArpPhysicalFlood() int64 {
  return p.VsrArpPhysicalFlood
}

func (p *VrVrfStatsReq) GetVsrL2Receives() int64 {
  return p.VsrL2Receives
}

func (p *VrVrfStatsReq) GetVsrUucFloods() int64 {
  return p.VsrUucFloods
}

func (p *VrVrfStatsReq) GetVsrPbbTunnels() int64 {
  return p.VsrPbbTunnels
}

func (p *VrVrfStatsReq) GetVsrUDPMplsOverMplsTunnels() int64 {
  return p.VsrUDPMplsOverMplsTunnels
}
func (p *VrVrfStatsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrVrfStatsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VsrRid = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VsrFamily = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VsrType = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VsrVrf = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VsrDiscards = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VsrResolves = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VsrReceives = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VsrEcmpComposites = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VsrL2McastComposites = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VsrFabricComposites = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VsrUDPTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VsrUDPMplsTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.VsrGreMplsTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VsrL2Encaps = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VsrEncaps = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VsrMarker = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VsrGros = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.VsrDiags = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.VsrEncapComposites = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.VsrEvpnComposites = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.VsrVrfTranslates = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VsrVxlanTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VsrArpVirtualProxy = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VsrArpVirtualStitch = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.VsrArpVirtualFlood = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.VsrArpPhysicalStitch = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.VsrArpTorProxy = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.VsrArpPhysicalFlood = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.VsrL2Receives = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.VsrUucFloods = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.VsrPbbTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.VsrUDPMplsOverMplsTunnels = v
}
  return nil
}

func (p *VrVrfStatsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_vrf_stats_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrVrfStatsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vsr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VsrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vsr_rid: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_family", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vsr_family: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VsrFamily)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vsr_family: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_type", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vsr_type: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VsrType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vsr_type: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_vrf", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vsr_vrf: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VsrVrf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_vrf (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vsr_vrf: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_discards", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vsr_discards: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrDiscards)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_discards (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vsr_discards: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_resolves", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vsr_resolves: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrResolves)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_resolves (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vsr_resolves: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_receives", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vsr_receives: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrReceives)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_receives (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vsr_receives: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_ecmp_composites", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vsr_ecmp_composites: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrEcmpComposites)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_ecmp_composites (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vsr_ecmp_composites: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_l2_mcast_composites", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vsr_l2_mcast_composites: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrL2McastComposites)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_l2_mcast_composites (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vsr_l2_mcast_composites: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_fabric_composites", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vsr_fabric_composites: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrFabricComposites)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_fabric_composites (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vsr_fabric_composites: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_udp_tunnels", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vsr_udp_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrUDPTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_udp_tunnels (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vsr_udp_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_udp_mpls_tunnels", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vsr_udp_mpls_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrUDPMplsTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_udp_mpls_tunnels (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vsr_udp_mpls_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_gre_mpls_tunnels", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vsr_gre_mpls_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrGreMplsTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_gre_mpls_tunnels (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vsr_gre_mpls_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_l2_encaps", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vsr_l2_encaps: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrL2Encaps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_l2_encaps (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vsr_l2_encaps: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_encaps", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:vsr_encaps: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrEncaps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_encaps (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:vsr_encaps: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_marker", thrift.I16, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:vsr_marker: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VsrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_marker (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:vsr_marker: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_gros", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:vsr_gros: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrGros)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_gros (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:vsr_gros: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_diags", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vsr_diags: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrDiags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_diags (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vsr_diags: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_encap_composites", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:vsr_encap_composites: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrEncapComposites)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_encap_composites (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:vsr_encap_composites: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_evpn_composites", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vsr_evpn_composites: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrEvpnComposites)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_evpn_composites (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vsr_evpn_composites: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_vrf_translates", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vsr_vrf_translates: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrVrfTranslates)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_vrf_translates (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vsr_vrf_translates: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_vxlan_tunnels", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:vsr_vxlan_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrVxlanTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_vxlan_tunnels (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:vsr_vxlan_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_virtual_proxy", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vsr_arp_virtual_proxy: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpVirtualProxy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_virtual_proxy (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vsr_arp_virtual_proxy: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_virtual_stitch", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:vsr_arp_virtual_stitch: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpVirtualStitch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_virtual_stitch (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:vsr_arp_virtual_stitch: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_virtual_flood", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:vsr_arp_virtual_flood: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpVirtualFlood)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_virtual_flood (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:vsr_arp_virtual_flood: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_physical_stitch", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:vsr_arp_physical_stitch: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpPhysicalStitch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_physical_stitch (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:vsr_arp_physical_stitch: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_tor_proxy", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:vsr_arp_tor_proxy: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpTorProxy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_tor_proxy (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:vsr_arp_tor_proxy: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_arp_physical_flood", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:vsr_arp_physical_flood: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrArpPhysicalFlood)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_arp_physical_flood (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:vsr_arp_physical_flood: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_l2_receives", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:vsr_l2_receives: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrL2Receives)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_l2_receives (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:vsr_l2_receives: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_uuc_floods", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:vsr_uuc_floods: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrUucFloods)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_uuc_floods (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:vsr_uuc_floods: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_pbb_tunnels", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:vsr_pbb_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrPbbTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_pbb_tunnels (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:vsr_pbb_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vsr_udp_mpls_over_mpls_tunnels", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:vsr_udp_mpls_over_mpls_tunnels: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VsrUDPMplsOverMplsTunnels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vsr_udp_mpls_over_mpls_tunnels (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:vsr_udp_mpls_over_mpls_tunnels: ", p), err) }
  return err
}

func (p *VrVrfStatsReq) Equals(other *VrVrfStatsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VsrRid != other.VsrRid { return false }
  if p.VsrFamily != other.VsrFamily { return false }
  if p.VsrType != other.VsrType { return false }
  if p.VsrVrf != other.VsrVrf { return false }
  if p.VsrDiscards != other.VsrDiscards { return false }
  if p.VsrResolves != other.VsrResolves { return false }
  if p.VsrReceives != other.VsrReceives { return false }
  if p.VsrEcmpComposites != other.VsrEcmpComposites { return false }
  if p.VsrL2McastComposites != other.VsrL2McastComposites { return false }
  if p.VsrFabricComposites != other.VsrFabricComposites { return false }
  if p.VsrUDPTunnels != other.VsrUDPTunnels { return false }
  if p.VsrUDPMplsTunnels != other.VsrUDPMplsTunnels { return false }
  if p.VsrGreMplsTunnels != other.VsrGreMplsTunnels { return false }
  if p.VsrL2Encaps != other.VsrL2Encaps { return false }
  if p.VsrEncaps != other.VsrEncaps { return false }
  if p.VsrMarker != other.VsrMarker { return false }
  if p.VsrGros != other.VsrGros { return false }
  if p.VsrDiags != other.VsrDiags { return false }
  if p.VsrEncapComposites != other.VsrEncapComposites { return false }
  if p.VsrEvpnComposites != other.VsrEvpnComposites { return false }
  if p.VsrVrfTranslates != other.VsrVrfTranslates { return false }
  if p.VsrVxlanTunnels != other.VsrVxlanTunnels { return false }
  if p.VsrArpVirtualProxy != other.VsrArpVirtualProxy { return false }
  if p.VsrArpVirtualStitch != other.VsrArpVirtualStitch { return false }
  if p.VsrArpVirtualFlood != other.VsrArpVirtualFlood { return false }
  if p.VsrArpPhysicalStitch != other.VsrArpPhysicalStitch { return false }
  if p.VsrArpTorProxy != other.VsrArpTorProxy { return false }
  if p.VsrArpPhysicalFlood != other.VsrArpPhysicalFlood { return false }
  if p.VsrL2Receives != other.VsrL2Receives { return false }
  if p.VsrUucFloods != other.VsrUucFloods { return false }
  if p.VsrPbbTunnels != other.VsrPbbTunnels { return false }
  if p.VsrUDPMplsOverMplsTunnels != other.VsrUDPMplsOverMplsTunnels { return false }
  return true
}

func (p *VrVrfStatsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrVrfStatsReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - RespCode
type VrResponse struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  RespCode int32 `thrift:"resp_code,2" db:"resp_code" json:"resp_code"`
}

func NewVrResponse() *VrResponse {
  return &VrResponse{}
}


func (p *VrResponse) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrResponse) GetRespCode() int32 {
  return p.RespCode
}
func (p *VrResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RespCode = v
}
  return nil
}

func (p *VrResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resp_code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resp_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RespCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resp_code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resp_code: ", p), err) }
  return err
}

func (p *VrResponse) Equals(other *VrResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.RespCode != other.RespCode { return false }
  return true
}

func (p *VrResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrResponse(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VoRid
//  - VoMplsLabels
//  - VoNexthops
//  - VoBridgeEntries
//  - VoOflowBridgeEntries
//  - VoFlowEntries
//  - VoOflowEntries
//  - VoInterfaces
//  - VoMirrorEntries
//  - VoVrfs
//  - VoBuildInfo
//  - VoLogLevel
//  - VoLogTypeEnable
//  - VoLogTypeDisable
//  - VoPerfr
//  - VoPerfs
//  - VoFromVMMssAdj
//  - VoToVMMssAdj
//  - VoPerfr1
//  - VoPerfr2
//  - VoPerfr3
//  - VoPerfp
//  - VoPerfq1
//  - VoPerfq2
//  - VoPerfq3
//  - VoUDPCoff
//  - VoFlowHoldLimit
//  - VoMudp
//  - VoFlowUsedEntries
//  - VoFlowUsedOentries
//  - VoBridgeUsedEntries
//  - VoBridgeUsedOentries
//  - VoBurstTokens
//  - VoBurstInterval
//  - VoBurstStep
//  - VoMemoryAllocChecks
//  - VoPriorityTagging
//  - VoVifBridgeEntries
//  - VoVifOflowBridgeEntries
//  - VoPacketDump
//  - VoPktDroplogBufsz
//  - VoPktDroplogBufEn
//  - VoPktDroplogEn
//  - VoPktDroplogMinEn
//  - VoUncondCloseFlowOnTCPRst
//  - VoGenetlinkGroupID
type VrouterOps struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VoRid int32 `thrift:"vo_rid,2" db:"vo_rid" json:"vo_rid"`
  VoMplsLabels int32 `thrift:"vo_mpls_labels,3" db:"vo_mpls_labels" json:"vo_mpls_labels"`
  VoNexthops int32 `thrift:"vo_nexthops,4" db:"vo_nexthops" json:"vo_nexthops"`
  VoBridgeEntries int32 `thrift:"vo_bridge_entries,5" db:"vo_bridge_entries" json:"vo_bridge_entries"`
  VoOflowBridgeEntries int32 `thrift:"vo_oflow_bridge_entries,6" db:"vo_oflow_bridge_entries" json:"vo_oflow_bridge_entries"`
  VoFlowEntries int32 `thrift:"vo_flow_entries,7" db:"vo_flow_entries" json:"vo_flow_entries"`
  VoOflowEntries int32 `thrift:"vo_oflow_entries,8" db:"vo_oflow_entries" json:"vo_oflow_entries"`
  VoInterfaces int32 `thrift:"vo_interfaces,9" db:"vo_interfaces" json:"vo_interfaces"`
  VoMirrorEntries int32 `thrift:"vo_mirror_entries,10" db:"vo_mirror_entries" json:"vo_mirror_entries"`
  VoVrfs int32 `thrift:"vo_vrfs,11" db:"vo_vrfs" json:"vo_vrfs"`
  VoBuildInfo string `thrift:"vo_build_info,12" db:"vo_build_info" json:"vo_build_info"`
  VoLogLevel int32 `thrift:"vo_log_level,13" db:"vo_log_level" json:"vo_log_level"`
  VoLogTypeEnable []int32 `thrift:"vo_log_type_enable,14" db:"vo_log_type_enable" json:"vo_log_type_enable"`
  VoLogTypeDisable []int32 `thrift:"vo_log_type_disable,15" db:"vo_log_type_disable" json:"vo_log_type_disable"`
  VoPerfr int32 `thrift:"vo_perfr,16" db:"vo_perfr" json:"vo_perfr"`
  VoPerfs int32 `thrift:"vo_perfs,17" db:"vo_perfs" json:"vo_perfs"`
  VoFromVMMssAdj int32 `thrift:"vo_from_vm_mss_adj,18" db:"vo_from_vm_mss_adj" json:"vo_from_vm_mss_adj"`
  VoToVMMssAdj int32 `thrift:"vo_to_vm_mss_adj,19" db:"vo_to_vm_mss_adj" json:"vo_to_vm_mss_adj"`
  VoPerfr1 int32 `thrift:"vo_perfr1,20" db:"vo_perfr1" json:"vo_perfr1"`
  VoPerfr2 int32 `thrift:"vo_perfr2,21" db:"vo_perfr2" json:"vo_perfr2"`
  VoPerfr3 int32 `thrift:"vo_perfr3,22" db:"vo_perfr3" json:"vo_perfr3"`
  VoPerfp int32 `thrift:"vo_perfp,23" db:"vo_perfp" json:"vo_perfp"`
  VoPerfq1 int32 `thrift:"vo_perfq1,24" db:"vo_perfq1" json:"vo_perfq1"`
  VoPerfq2 int32 `thrift:"vo_perfq2,25" db:"vo_perfq2" json:"vo_perfq2"`
  VoPerfq3 int32 `thrift:"vo_perfq3,26" db:"vo_perfq3" json:"vo_perfq3"`
  VoUDPCoff int32 `thrift:"vo_udp_coff,27" db:"vo_udp_coff" json:"vo_udp_coff"`
  VoFlowHoldLimit int32 `thrift:"vo_flow_hold_limit,28" db:"vo_flow_hold_limit" json:"vo_flow_hold_limit"`
  VoMudp int32 `thrift:"vo_mudp,29" db:"vo_mudp" json:"vo_mudp"`
  VoFlowUsedEntries int32 `thrift:"vo_flow_used_entries,30" db:"vo_flow_used_entries" json:"vo_flow_used_entries"`
  VoFlowUsedOentries int32 `thrift:"vo_flow_used_oentries,31" db:"vo_flow_used_oentries" json:"vo_flow_used_oentries"`
  VoBridgeUsedEntries int32 `thrift:"vo_bridge_used_entries,32" db:"vo_bridge_used_entries" json:"vo_bridge_used_entries"`
  VoBridgeUsedOentries int32 `thrift:"vo_bridge_used_oentries,33" db:"vo_bridge_used_oentries" json:"vo_bridge_used_oentries"`
  VoBurstTokens int32 `thrift:"vo_burst_tokens,34" db:"vo_burst_tokens" json:"vo_burst_tokens"`
  VoBurstInterval int32 `thrift:"vo_burst_interval,35" db:"vo_burst_interval" json:"vo_burst_interval"`
  VoBurstStep int32 `thrift:"vo_burst_step,36" db:"vo_burst_step" json:"vo_burst_step"`
  VoMemoryAllocChecks int32 `thrift:"vo_memory_alloc_checks,37" db:"vo_memory_alloc_checks" json:"vo_memory_alloc_checks"`
  VoPriorityTagging int32 `thrift:"vo_priority_tagging,38" db:"vo_priority_tagging" json:"vo_priority_tagging"`
  VoVifBridgeEntries int32 `thrift:"vo_vif_bridge_entries,39" db:"vo_vif_bridge_entries" json:"vo_vif_bridge_entries"`
  VoVifOflowBridgeEntries int32 `thrift:"vo_vif_oflow_bridge_entries,40" db:"vo_vif_oflow_bridge_entries" json:"vo_vif_oflow_bridge_entries"`
  VoPacketDump int32 `thrift:"vo_packet_dump,41" db:"vo_packet_dump" json:"vo_packet_dump"`
  VoPktDroplogBufsz int32 `thrift:"vo_pkt_droplog_bufsz,42" db:"vo_pkt_droplog_bufsz" json:"vo_pkt_droplog_bufsz"`
  VoPktDroplogBufEn int8 `thrift:"vo_pkt_droplog_buf_en,43" db:"vo_pkt_droplog_buf_en" json:"vo_pkt_droplog_buf_en"`
  VoPktDroplogEn int8 `thrift:"vo_pkt_droplog_en,44" db:"vo_pkt_droplog_en" json:"vo_pkt_droplog_en"`
  VoPktDroplogMinEn int8 `thrift:"vo_pkt_droplog_min_en,45" db:"vo_pkt_droplog_min_en" json:"vo_pkt_droplog_min_en"`
  VoUncondCloseFlowOnTCPRst int8 `thrift:"vo_uncond_close_flow_on_tcp_rst,46" db:"vo_uncond_close_flow_on_tcp_rst" json:"vo_uncond_close_flow_on_tcp_rst"`
  VoGenetlinkGroupID int16 `thrift:"vo_genetlink_group_id,47" db:"vo_genetlink_group_id" json:"vo_genetlink_group_id"`
}

func NewVrouterOps() *VrouterOps {
  return &VrouterOps{}
}


func (p *VrouterOps) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrouterOps) GetVoRid() int32 {
  return p.VoRid
}

func (p *VrouterOps) GetVoMplsLabels() int32 {
  return p.VoMplsLabels
}

func (p *VrouterOps) GetVoNexthops() int32 {
  return p.VoNexthops
}

func (p *VrouterOps) GetVoBridgeEntries() int32 {
  return p.VoBridgeEntries
}

func (p *VrouterOps) GetVoOflowBridgeEntries() int32 {
  return p.VoOflowBridgeEntries
}

func (p *VrouterOps) GetVoFlowEntries() int32 {
  return p.VoFlowEntries
}

func (p *VrouterOps) GetVoOflowEntries() int32 {
  return p.VoOflowEntries
}

func (p *VrouterOps) GetVoInterfaces() int32 {
  return p.VoInterfaces
}

func (p *VrouterOps) GetVoMirrorEntries() int32 {
  return p.VoMirrorEntries
}

func (p *VrouterOps) GetVoVrfs() int32 {
  return p.VoVrfs
}

func (p *VrouterOps) GetVoBuildInfo() string {
  return p.VoBuildInfo
}

func (p *VrouterOps) GetVoLogLevel() int32 {
  return p.VoLogLevel
}

func (p *VrouterOps) GetVoLogTypeEnable() []int32 {
  return p.VoLogTypeEnable
}

func (p *VrouterOps) GetVoLogTypeDisable() []int32 {
  return p.VoLogTypeDisable
}

func (p *VrouterOps) GetVoPerfr() int32 {
  return p.VoPerfr
}

func (p *VrouterOps) GetVoPerfs() int32 {
  return p.VoPerfs
}

func (p *VrouterOps) GetVoFromVMMssAdj() int32 {
  return p.VoFromVMMssAdj
}

func (p *VrouterOps) GetVoToVMMssAdj() int32 {
  return p.VoToVMMssAdj
}

func (p *VrouterOps) GetVoPerfr1() int32 {
  return p.VoPerfr1
}

func (p *VrouterOps) GetVoPerfr2() int32 {
  return p.VoPerfr2
}

func (p *VrouterOps) GetVoPerfr3() int32 {
  return p.VoPerfr3
}

func (p *VrouterOps) GetVoPerfp() int32 {
  return p.VoPerfp
}

func (p *VrouterOps) GetVoPerfq1() int32 {
  return p.VoPerfq1
}

func (p *VrouterOps) GetVoPerfq2() int32 {
  return p.VoPerfq2
}

func (p *VrouterOps) GetVoPerfq3() int32 {
  return p.VoPerfq3
}

func (p *VrouterOps) GetVoUDPCoff() int32 {
  return p.VoUDPCoff
}

func (p *VrouterOps) GetVoFlowHoldLimit() int32 {
  return p.VoFlowHoldLimit
}

func (p *VrouterOps) GetVoMudp() int32 {
  return p.VoMudp
}

func (p *VrouterOps) GetVoFlowUsedEntries() int32 {
  return p.VoFlowUsedEntries
}

func (p *VrouterOps) GetVoFlowUsedOentries() int32 {
  return p.VoFlowUsedOentries
}

func (p *VrouterOps) GetVoBridgeUsedEntries() int32 {
  return p.VoBridgeUsedEntries
}

func (p *VrouterOps) GetVoBridgeUsedOentries() int32 {
  return p.VoBridgeUsedOentries
}

func (p *VrouterOps) GetVoBurstTokens() int32 {
  return p.VoBurstTokens
}

func (p *VrouterOps) GetVoBurstInterval() int32 {
  return p.VoBurstInterval
}

func (p *VrouterOps) GetVoBurstStep() int32 {
  return p.VoBurstStep
}

func (p *VrouterOps) GetVoMemoryAllocChecks() int32 {
  return p.VoMemoryAllocChecks
}

func (p *VrouterOps) GetVoPriorityTagging() int32 {
  return p.VoPriorityTagging
}

func (p *VrouterOps) GetVoVifBridgeEntries() int32 {
  return p.VoVifBridgeEntries
}

func (p *VrouterOps) GetVoVifOflowBridgeEntries() int32 {
  return p.VoVifOflowBridgeEntries
}

func (p *VrouterOps) GetVoPacketDump() int32 {
  return p.VoPacketDump
}

func (p *VrouterOps) GetVoPktDroplogBufsz() int32 {
  return p.VoPktDroplogBufsz
}

func (p *VrouterOps) GetVoPktDroplogBufEn() int8 {
  return p.VoPktDroplogBufEn
}

func (p *VrouterOps) GetVoPktDroplogEn() int8 {
  return p.VoPktDroplogEn
}

func (p *VrouterOps) GetVoPktDroplogMinEn() int8 {
  return p.VoPktDroplogMinEn
}

func (p *VrouterOps) GetVoUncondCloseFlowOnTCPRst() int8 {
  return p.VoUncondCloseFlowOnTCPRst
}

func (p *VrouterOps) GetVoGenetlinkGroupID() int16 {
  return p.VoGenetlinkGroupID
}
func (p *VrouterOps) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrouterOps)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrouterOps)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VoRid = v
}
  return nil
}

func (p *VrouterOps)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VoMplsLabels = v
}
  return nil
}

func (p *VrouterOps)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VoNexthops = v
}
  return nil
}

func (p *VrouterOps)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VoBridgeEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VoOflowBridgeEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VoFlowEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VoOflowEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VoInterfaces = v
}
  return nil
}

func (p *VrouterOps)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VoMirrorEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VoVrfs = v
}
  return nil
}

func (p *VrouterOps)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VoBuildInfo = v
}
  return nil
}

func (p *VrouterOps)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VoLogLevel = v
}
  return nil
}

func (p *VrouterOps)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VoLogTypeEnable =  tSlice
  for i := 0; i < size; i ++ {
var _elem82 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem82 = v
}
    p.VoLogTypeEnable = append(p.VoLogTypeEnable, _elem82)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrouterOps)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VoLogTypeDisable =  tSlice
  for i := 0; i < size; i ++ {
var _elem83 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem83 = v
}
    p.VoLogTypeDisable = append(p.VoLogTypeDisable, _elem83)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrouterOps)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VoPerfr = v
}
  return nil
}

func (p *VrouterOps)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VoPerfs = v
}
  return nil
}

func (p *VrouterOps)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VoFromVMMssAdj = v
}
  return nil
}

func (p *VrouterOps)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.VoToVMMssAdj = v
}
  return nil
}

func (p *VrouterOps)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.VoPerfr1 = v
}
  return nil
}

func (p *VrouterOps)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.VoPerfr2 = v
}
  return nil
}

func (p *VrouterOps)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.VoPerfr3 = v
}
  return nil
}

func (p *VrouterOps)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VoPerfp = v
}
  return nil
}

func (p *VrouterOps)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VoPerfq1 = v
}
  return nil
}

func (p *VrouterOps)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VoPerfq2 = v
}
  return nil
}

func (p *VrouterOps)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.VoPerfq3 = v
}
  return nil
}

func (p *VrouterOps)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.VoUDPCoff = v
}
  return nil
}

func (p *VrouterOps)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.VoFlowHoldLimit = v
}
  return nil
}

func (p *VrouterOps)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.VoMudp = v
}
  return nil
}

func (p *VrouterOps)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.VoFlowUsedEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.VoFlowUsedOentries = v
}
  return nil
}

func (p *VrouterOps)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.VoBridgeUsedEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.VoBridgeUsedOentries = v
}
  return nil
}

func (p *VrouterOps)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.VoBurstTokens = v
}
  return nil
}

func (p *VrouterOps)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VoBurstInterval = v
}
  return nil
}

func (p *VrouterOps)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.VoBurstStep = v
}
  return nil
}

func (p *VrouterOps)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.VoMemoryAllocChecks = v
}
  return nil
}

func (p *VrouterOps)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.VoPriorityTagging = v
}
  return nil
}

func (p *VrouterOps)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.VoVifBridgeEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.VoVifOflowBridgeEntries = v
}
  return nil
}

func (p *VrouterOps)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.VoPacketDump = v
}
  return nil
}

func (p *VrouterOps)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VoPktDroplogBufsz = v
}
  return nil
}

func (p *VrouterOps)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  temp := int8(v)
  p.VoPktDroplogBufEn = temp
}
  return nil
}

func (p *VrouterOps)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := int8(v)
  p.VoPktDroplogEn = temp
}
  return nil
}

func (p *VrouterOps)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := int8(v)
  p.VoPktDroplogMinEn = temp
}
  return nil
}

func (p *VrouterOps)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  temp := int8(v)
  p.VoUncondCloseFlowOnTCPRst = temp
}
  return nil
}

func (p *VrouterOps)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.VoGenetlinkGroupID = v
}
  return nil
}

func (p *VrouterOps) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vrouter_ops"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrouterOps) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrouterOps) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_rid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vo_rid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vo_rid: ", p), err) }
  return err
}

func (p *VrouterOps) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_mpls_labels", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vo_mpls_labels: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoMplsLabels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_mpls_labels (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vo_mpls_labels: ", p), err) }
  return err
}

func (p *VrouterOps) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_nexthops", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vo_nexthops: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoNexthops)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_nexthops (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vo_nexthops: ", p), err) }
  return err
}

func (p *VrouterOps) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_bridge_entries", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vo_bridge_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBridgeEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_bridge_entries (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vo_bridge_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_oflow_bridge_entries", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vo_oflow_bridge_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoOflowBridgeEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_oflow_bridge_entries (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vo_oflow_bridge_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_flow_entries", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vo_flow_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoFlowEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_flow_entries (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vo_flow_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_oflow_entries", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vo_oflow_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoOflowEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_oflow_entries (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vo_oflow_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_interfaces", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vo_interfaces: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoInterfaces)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_interfaces (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vo_interfaces: ", p), err) }
  return err
}

func (p *VrouterOps) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_mirror_entries", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vo_mirror_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoMirrorEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_mirror_entries (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vo_mirror_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_vrfs", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vo_vrfs: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoVrfs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_vrfs (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vo_vrfs: ", p), err) }
  return err
}

func (p *VrouterOps) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_build_info", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vo_build_info: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VoBuildInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_build_info (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vo_build_info: ", p), err) }
  return err
}

func (p *VrouterOps) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_log_level", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vo_log_level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoLogLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_log_level (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vo_log_level: ", p), err) }
  return err
}

func (p *VrouterOps) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_log_type_enable", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vo_log_type_enable: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VoLogTypeEnable)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VoLogTypeEnable {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vo_log_type_enable: ", p), err) }
  return err
}

func (p *VrouterOps) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_log_type_disable", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vo_log_type_disable: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VoLogTypeDisable)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VoLogTypeDisable {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vo_log_type_disable: ", p), err) }
  return err
}

func (p *VrouterOps) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfr", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:vo_perfr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfr (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:vo_perfr: ", p), err) }
  return err
}

func (p *VrouterOps) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfs", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:vo_perfs: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfs (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:vo_perfs: ", p), err) }
  return err
}

func (p *VrouterOps) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_from_vm_mss_adj", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:vo_from_vm_mss_adj: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoFromVMMssAdj)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_from_vm_mss_adj (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:vo_from_vm_mss_adj: ", p), err) }
  return err
}

func (p *VrouterOps) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_to_vm_mss_adj", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vo_to_vm_mss_adj: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoToVMMssAdj)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_to_vm_mss_adj (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vo_to_vm_mss_adj: ", p), err) }
  return err
}

func (p *VrouterOps) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfr1", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:vo_perfr1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfr1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfr1 (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:vo_perfr1: ", p), err) }
  return err
}

func (p *VrouterOps) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfr2", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vo_perfr2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfr2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfr2 (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vo_perfr2: ", p), err) }
  return err
}

func (p *VrouterOps) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfr3", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vo_perfr3: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfr3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfr3 (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vo_perfr3: ", p), err) }
  return err
}

func (p *VrouterOps) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfp", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:vo_perfp: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfp (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:vo_perfp: ", p), err) }
  return err
}

func (p *VrouterOps) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfq1", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vo_perfq1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfq1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfq1 (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vo_perfq1: ", p), err) }
  return err
}

func (p *VrouterOps) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfq2", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:vo_perfq2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfq2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfq2 (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:vo_perfq2: ", p), err) }
  return err
}

func (p *VrouterOps) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_perfq3", thrift.I32, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:vo_perfq3: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPerfq3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_perfq3 (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:vo_perfq3: ", p), err) }
  return err
}

func (p *VrouterOps) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_udp_coff", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:vo_udp_coff: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoUDPCoff)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_udp_coff (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:vo_udp_coff: ", p), err) }
  return err
}

func (p *VrouterOps) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_flow_hold_limit", thrift.I32, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:vo_flow_hold_limit: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoFlowHoldLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_flow_hold_limit (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:vo_flow_hold_limit: ", p), err) }
  return err
}

func (p *VrouterOps) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_mudp", thrift.I32, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:vo_mudp: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoMudp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_mudp (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:vo_mudp: ", p), err) }
  return err
}

func (p *VrouterOps) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_flow_used_entries", thrift.I32, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:vo_flow_used_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoFlowUsedEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_flow_used_entries (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:vo_flow_used_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_flow_used_oentries", thrift.I32, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:vo_flow_used_oentries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoFlowUsedOentries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_flow_used_oentries (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:vo_flow_used_oentries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_bridge_used_entries", thrift.I32, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:vo_bridge_used_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBridgeUsedEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_bridge_used_entries (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:vo_bridge_used_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_bridge_used_oentries", thrift.I32, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:vo_bridge_used_oentries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBridgeUsedOentries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_bridge_used_oentries (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:vo_bridge_used_oentries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_burst_tokens", thrift.I32, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:vo_burst_tokens: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBurstTokens)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_burst_tokens (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:vo_burst_tokens: ", p), err) }
  return err
}

func (p *VrouterOps) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_burst_interval", thrift.I32, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:vo_burst_interval: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBurstInterval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_burst_interval (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:vo_burst_interval: ", p), err) }
  return err
}

func (p *VrouterOps) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_burst_step", thrift.I32, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:vo_burst_step: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoBurstStep)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_burst_step (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:vo_burst_step: ", p), err) }
  return err
}

func (p *VrouterOps) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_memory_alloc_checks", thrift.I32, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:vo_memory_alloc_checks: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoMemoryAllocChecks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_memory_alloc_checks (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:vo_memory_alloc_checks: ", p), err) }
  return err
}

func (p *VrouterOps) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_priority_tagging", thrift.I32, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:vo_priority_tagging: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPriorityTagging)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_priority_tagging (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:vo_priority_tagging: ", p), err) }
  return err
}

func (p *VrouterOps) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_vif_bridge_entries", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:vo_vif_bridge_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoVifBridgeEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_vif_bridge_entries (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:vo_vif_bridge_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_vif_oflow_bridge_entries", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:vo_vif_oflow_bridge_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoVifOflowBridgeEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_vif_oflow_bridge_entries (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:vo_vif_oflow_bridge_entries: ", p), err) }
  return err
}

func (p *VrouterOps) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_packet_dump", thrift.I32, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:vo_packet_dump: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPacketDump)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_packet_dump (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:vo_packet_dump: ", p), err) }
  return err
}

func (p *VrouterOps) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_pkt_droplog_bufsz", thrift.I32, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:vo_pkt_droplog_bufsz: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoPktDroplogBufsz)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_pkt_droplog_bufsz (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:vo_pkt_droplog_bufsz: ", p), err) }
  return err
}

func (p *VrouterOps) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_pkt_droplog_buf_en", thrift.BYTE, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:vo_pkt_droplog_buf_en: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VoPktDroplogBufEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_pkt_droplog_buf_en (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:vo_pkt_droplog_buf_en: ", p), err) }
  return err
}

func (p *VrouterOps) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_pkt_droplog_en", thrift.BYTE, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:vo_pkt_droplog_en: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VoPktDroplogEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_pkt_droplog_en (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:vo_pkt_droplog_en: ", p), err) }
  return err
}

func (p *VrouterOps) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_pkt_droplog_min_en", thrift.BYTE, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:vo_pkt_droplog_min_en: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VoPktDroplogMinEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_pkt_droplog_min_en (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:vo_pkt_droplog_min_en: ", p), err) }
  return err
}

func (p *VrouterOps) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_uncond_close_flow_on_tcp_rst", thrift.BYTE, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:vo_uncond_close_flow_on_tcp_rst: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VoUncondCloseFlowOnTCPRst)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_uncond_close_flow_on_tcp_rst (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:vo_uncond_close_flow_on_tcp_rst: ", p), err) }
  return err
}

func (p *VrouterOps) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vo_genetlink_group_id", thrift.I16, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:vo_genetlink_group_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VoGenetlinkGroupID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vo_genetlink_group_id (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:vo_genetlink_group_id: ", p), err) }
  return err
}

func (p *VrouterOps) Equals(other *VrouterOps) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VoRid != other.VoRid { return false }
  if p.VoMplsLabels != other.VoMplsLabels { return false }
  if p.VoNexthops != other.VoNexthops { return false }
  if p.VoBridgeEntries != other.VoBridgeEntries { return false }
  if p.VoOflowBridgeEntries != other.VoOflowBridgeEntries { return false }
  if p.VoFlowEntries != other.VoFlowEntries { return false }
  if p.VoOflowEntries != other.VoOflowEntries { return false }
  if p.VoInterfaces != other.VoInterfaces { return false }
  if p.VoMirrorEntries != other.VoMirrorEntries { return false }
  if p.VoVrfs != other.VoVrfs { return false }
  if p.VoBuildInfo != other.VoBuildInfo { return false }
  if p.VoLogLevel != other.VoLogLevel { return false }
  if len(p.VoLogTypeEnable) != len(other.VoLogTypeEnable) { return false }
  for i, _tgt := range p.VoLogTypeEnable {
    _src84 := other.VoLogTypeEnable[i]
    if _tgt != _src84 { return false }
  }
  if len(p.VoLogTypeDisable) != len(other.VoLogTypeDisable) { return false }
  for i, _tgt := range p.VoLogTypeDisable {
    _src85 := other.VoLogTypeDisable[i]
    if _tgt != _src85 { return false }
  }
  if p.VoPerfr != other.VoPerfr { return false }
  if p.VoPerfs != other.VoPerfs { return false }
  if p.VoFromVMMssAdj != other.VoFromVMMssAdj { return false }
  if p.VoToVMMssAdj != other.VoToVMMssAdj { return false }
  if p.VoPerfr1 != other.VoPerfr1 { return false }
  if p.VoPerfr2 != other.VoPerfr2 { return false }
  if p.VoPerfr3 != other.VoPerfr3 { return false }
  if p.VoPerfp != other.VoPerfp { return false }
  if p.VoPerfq1 != other.VoPerfq1 { return false }
  if p.VoPerfq2 != other.VoPerfq2 { return false }
  if p.VoPerfq3 != other.VoPerfq3 { return false }
  if p.VoUDPCoff != other.VoUDPCoff { return false }
  if p.VoFlowHoldLimit != other.VoFlowHoldLimit { return false }
  if p.VoMudp != other.VoMudp { return false }
  if p.VoFlowUsedEntries != other.VoFlowUsedEntries { return false }
  if p.VoFlowUsedOentries != other.VoFlowUsedOentries { return false }
  if p.VoBridgeUsedEntries != other.VoBridgeUsedEntries { return false }
  if p.VoBridgeUsedOentries != other.VoBridgeUsedOentries { return false }
  if p.VoBurstTokens != other.VoBurstTokens { return false }
  if p.VoBurstInterval != other.VoBurstInterval { return false }
  if p.VoBurstStep != other.VoBurstStep { return false }
  if p.VoMemoryAllocChecks != other.VoMemoryAllocChecks { return false }
  if p.VoPriorityTagging != other.VoPriorityTagging { return false }
  if p.VoVifBridgeEntries != other.VoVifBridgeEntries { return false }
  if p.VoVifOflowBridgeEntries != other.VoVifOflowBridgeEntries { return false }
  if p.VoPacketDump != other.VoPacketDump { return false }
  if p.VoPktDroplogBufsz != other.VoPktDroplogBufsz { return false }
  if p.VoPktDroplogBufEn != other.VoPktDroplogBufEn { return false }
  if p.VoPktDroplogEn != other.VoPktDroplogEn { return false }
  if p.VoPktDroplogMinEn != other.VoPktDroplogMinEn { return false }
  if p.VoUncondCloseFlowOnTCPRst != other.VoUncondCloseFlowOnTCPRst { return false }
  if p.VoGenetlinkGroupID != other.VoGenetlinkGroupID { return false }
  return true
}

func (p *VrouterOps) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrouterOps(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VmsRid
//  - VmsAlloced
//  - VmsFreed
//  - VmsAssemblerTableObject
//  - VmsBridgeMacObject
//  - VmsBtableObject
//  - VmsBuildInfoObject
//  - VmsDeferObject
//  - VmsDropStatsObject
//  - VmsDropStatsReqObject
//  - VmsFlowQueueObject
//  - VmsFlowReqObject
//  - VmsFlowReqPathObject
//  - VmsFlowHoldStatObject
//  - VmsFlowLinkLocalObject
//  - VmsFlowMetadataObject
//  - VmsFlowTableDataObject
//  - VmsFlowTableInfoObject
//  - VmsFragmentObject
//  - VmsFragmentQueueObject
//  - VmsFragmentQueueElementObject
//  - VmsFragmentScannerObject
//  - VmsHpacketPoolObject
//  - VmsHtableObject
//  - VmsInterfaceObject
//  - VmsInterfaceMacObject
//  - VmsInterfaceReqObject
//  - VmsInterfaceReqMacObject
//  - VmsInterfaceReqNameObject
//  - VmsInterfaceStatsObject
//  - VmsInterfaceTableObject
//  - VmsInterfaceVrfTableObject
//  - VmsItableObject
//  - VmsMallocObject
//  - VmsMessageObject
//  - VmsMessageResponseObject
//  - VmsMessageDumpObject
//  - VmsMemStatsReqObject
//  - VmsMirrorObject
//  - VmsMirrorTableObject
//  - VmsMirrorMetaObject
//  - VmsMtrieObject
//  - VmsMtrieBucketObject
//  - VmsMtrieStatsObject
//  - VmsMtrieTableObject
//  - VmsNetworkAddressObject
//  - VmsNexthopObject
//  - VmsNexthopComponentObject
//  - VmsNexthopReqListObject
//  - VmsNexthopReqEncapObject
//  - VmsNexthopReqObject
//  - VmsRouteTableObject
//  - VmsRouteReqMacObject
//  - VmsTimerObject
//  - VmsUsockObject
//  - VmsUsockPollObject
//  - VmsUsockBufObject
//  - VmsUsockIovecObject
//  - VmsVrouterReqObject
//  - VmsInterfaceFatFlowConfigObject
//  - VmsQosMapObject
//  - VmsFcObject
//  - VmsInterfaceMirrorMetaObject
//  - VmsInterfaceReqMirrorMetaObject
//  - VmsInterfaceBridgeLockObject
//  - VmsInterfaceQueueObject
//  - VmsInterfaceReqPbbMacObject
//  - VmsNexthopReqBmacObject
//  - VmsInterfaceReqBridgeIDObject
//  - VmsInterfaceFatFlowIpv4ExcludeListObject
//  - VmsInterfaceFatFlowIpv6ExcludeListObject
type VrMemStatsReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VmsRid int16 `thrift:"vms_rid,2" db:"vms_rid" json:"vms_rid"`
  VmsAlloced int64 `thrift:"vms_alloced,3" db:"vms_alloced" json:"vms_alloced"`
  VmsFreed int64 `thrift:"vms_freed,4" db:"vms_freed" json:"vms_freed"`
  VmsAssemblerTableObject int64 `thrift:"vms_assembler_table_object,5" db:"vms_assembler_table_object" json:"vms_assembler_table_object"`
  VmsBridgeMacObject int64 `thrift:"vms_bridge_mac_object,6" db:"vms_bridge_mac_object" json:"vms_bridge_mac_object"`
  VmsBtableObject int64 `thrift:"vms_btable_object,7" db:"vms_btable_object" json:"vms_btable_object"`
  VmsBuildInfoObject int64 `thrift:"vms_build_info_object,8" db:"vms_build_info_object" json:"vms_build_info_object"`
  VmsDeferObject int64 `thrift:"vms_defer_object,9" db:"vms_defer_object" json:"vms_defer_object"`
  VmsDropStatsObject int64 `thrift:"vms_drop_stats_object,10" db:"vms_drop_stats_object" json:"vms_drop_stats_object"`
  VmsDropStatsReqObject int64 `thrift:"vms_drop_stats_req_object,11" db:"vms_drop_stats_req_object" json:"vms_drop_stats_req_object"`
  VmsFlowQueueObject int64 `thrift:"vms_flow_queue_object,12" db:"vms_flow_queue_object" json:"vms_flow_queue_object"`
  VmsFlowReqObject int64 `thrift:"vms_flow_req_object,13" db:"vms_flow_req_object" json:"vms_flow_req_object"`
  VmsFlowReqPathObject int64 `thrift:"vms_flow_req_path_object,14" db:"vms_flow_req_path_object" json:"vms_flow_req_path_object"`
  VmsFlowHoldStatObject int64 `thrift:"vms_flow_hold_stat_object,15" db:"vms_flow_hold_stat_object" json:"vms_flow_hold_stat_object"`
  VmsFlowLinkLocalObject int64 `thrift:"vms_flow_link_local_object,16" db:"vms_flow_link_local_object" json:"vms_flow_link_local_object"`
  VmsFlowMetadataObject int64 `thrift:"vms_flow_metadata_object,17" db:"vms_flow_metadata_object" json:"vms_flow_metadata_object"`
  VmsFlowTableDataObject int64 `thrift:"vms_flow_table_data_object,18" db:"vms_flow_table_data_object" json:"vms_flow_table_data_object"`
  VmsFlowTableInfoObject int64 `thrift:"vms_flow_table_info_object,19" db:"vms_flow_table_info_object" json:"vms_flow_table_info_object"`
  VmsFragmentObject int64 `thrift:"vms_fragment_object,20" db:"vms_fragment_object" json:"vms_fragment_object"`
  VmsFragmentQueueObject int64 `thrift:"vms_fragment_queue_object,21" db:"vms_fragment_queue_object" json:"vms_fragment_queue_object"`
  VmsFragmentQueueElementObject int64 `thrift:"vms_fragment_queue_element_object,22" db:"vms_fragment_queue_element_object" json:"vms_fragment_queue_element_object"`
  VmsFragmentScannerObject int64 `thrift:"vms_fragment_scanner_object,23" db:"vms_fragment_scanner_object" json:"vms_fragment_scanner_object"`
  VmsHpacketPoolObject int64 `thrift:"vms_hpacket_pool_object,24" db:"vms_hpacket_pool_object" json:"vms_hpacket_pool_object"`
  VmsHtableObject int64 `thrift:"vms_htable_object,25" db:"vms_htable_object" json:"vms_htable_object"`
  VmsInterfaceObject int64 `thrift:"vms_interface_object,26" db:"vms_interface_object" json:"vms_interface_object"`
  VmsInterfaceMacObject int64 `thrift:"vms_interface_mac_object,27" db:"vms_interface_mac_object" json:"vms_interface_mac_object"`
  VmsInterfaceReqObject int64 `thrift:"vms_interface_req_object,28" db:"vms_interface_req_object" json:"vms_interface_req_object"`
  VmsInterfaceReqMacObject int64 `thrift:"vms_interface_req_mac_object,29" db:"vms_interface_req_mac_object" json:"vms_interface_req_mac_object"`
  VmsInterfaceReqNameObject int64 `thrift:"vms_interface_req_name_object,30" db:"vms_interface_req_name_object" json:"vms_interface_req_name_object"`
  VmsInterfaceStatsObject int64 `thrift:"vms_interface_stats_object,31" db:"vms_interface_stats_object" json:"vms_interface_stats_object"`
  VmsInterfaceTableObject int64 `thrift:"vms_interface_table_object,32" db:"vms_interface_table_object" json:"vms_interface_table_object"`
  VmsInterfaceVrfTableObject int64 `thrift:"vms_interface_vrf_table_object,33" db:"vms_interface_vrf_table_object" json:"vms_interface_vrf_table_object"`
  VmsItableObject int64 `thrift:"vms_itable_object,34" db:"vms_itable_object" json:"vms_itable_object"`
  VmsMallocObject int64 `thrift:"vms_malloc_object,35" db:"vms_malloc_object" json:"vms_malloc_object"`
  VmsMessageObject int64 `thrift:"vms_message_object,36" db:"vms_message_object" json:"vms_message_object"`
  VmsMessageResponseObject int64 `thrift:"vms_message_response_object,37" db:"vms_message_response_object" json:"vms_message_response_object"`
  VmsMessageDumpObject int64 `thrift:"vms_message_dump_object,38" db:"vms_message_dump_object" json:"vms_message_dump_object"`
  VmsMemStatsReqObject int64 `thrift:"vms_mem_stats_req_object,39" db:"vms_mem_stats_req_object" json:"vms_mem_stats_req_object"`
  VmsMirrorObject int64 `thrift:"vms_mirror_object,40" db:"vms_mirror_object" json:"vms_mirror_object"`
  VmsMirrorTableObject int64 `thrift:"vms_mirror_table_object,41" db:"vms_mirror_table_object" json:"vms_mirror_table_object"`
  VmsMirrorMetaObject int64 `thrift:"vms_mirror_meta_object,42" db:"vms_mirror_meta_object" json:"vms_mirror_meta_object"`
  VmsMtrieObject int64 `thrift:"vms_mtrie_object,43" db:"vms_mtrie_object" json:"vms_mtrie_object"`
  VmsMtrieBucketObject int64 `thrift:"vms_mtrie_bucket_object,44" db:"vms_mtrie_bucket_object" json:"vms_mtrie_bucket_object"`
  VmsMtrieStatsObject int64 `thrift:"vms_mtrie_stats_object,45" db:"vms_mtrie_stats_object" json:"vms_mtrie_stats_object"`
  VmsMtrieTableObject int64 `thrift:"vms_mtrie_table_object,46" db:"vms_mtrie_table_object" json:"vms_mtrie_table_object"`
  VmsNetworkAddressObject int64 `thrift:"vms_network_address_object,47" db:"vms_network_address_object" json:"vms_network_address_object"`
  VmsNexthopObject int64 `thrift:"vms_nexthop_object,48" db:"vms_nexthop_object" json:"vms_nexthop_object"`
  VmsNexthopComponentObject int64 `thrift:"vms_nexthop_component_object,49" db:"vms_nexthop_component_object" json:"vms_nexthop_component_object"`
  VmsNexthopReqListObject int64 `thrift:"vms_nexthop_req_list_object,50" db:"vms_nexthop_req_list_object" json:"vms_nexthop_req_list_object"`
  VmsNexthopReqEncapObject int64 `thrift:"vms_nexthop_req_encap_object,51" db:"vms_nexthop_req_encap_object" json:"vms_nexthop_req_encap_object"`
  VmsNexthopReqObject int64 `thrift:"vms_nexthop_req_object,52" db:"vms_nexthop_req_object" json:"vms_nexthop_req_object"`
  VmsRouteTableObject int64 `thrift:"vms_route_table_object,53" db:"vms_route_table_object" json:"vms_route_table_object"`
  VmsRouteReqMacObject int64 `thrift:"vms_route_req_mac_object,54" db:"vms_route_req_mac_object" json:"vms_route_req_mac_object"`
  VmsTimerObject int64 `thrift:"vms_timer_object,55" db:"vms_timer_object" json:"vms_timer_object"`
  VmsUsockObject int64 `thrift:"vms_usock_object,56" db:"vms_usock_object" json:"vms_usock_object"`
  VmsUsockPollObject int64 `thrift:"vms_usock_poll_object,57" db:"vms_usock_poll_object" json:"vms_usock_poll_object"`
  VmsUsockBufObject int64 `thrift:"vms_usock_buf_object,58" db:"vms_usock_buf_object" json:"vms_usock_buf_object"`
  VmsUsockIovecObject int64 `thrift:"vms_usock_iovec_object,59" db:"vms_usock_iovec_object" json:"vms_usock_iovec_object"`
  VmsVrouterReqObject int64 `thrift:"vms_vrouter_req_object,60" db:"vms_vrouter_req_object" json:"vms_vrouter_req_object"`
  VmsInterfaceFatFlowConfigObject int64 `thrift:"vms_interface_fat_flow_config_object,61" db:"vms_interface_fat_flow_config_object" json:"vms_interface_fat_flow_config_object"`
  VmsQosMapObject int64 `thrift:"vms_qos_map_object,62" db:"vms_qos_map_object" json:"vms_qos_map_object"`
  VmsFcObject int64 `thrift:"vms_fc_object,63" db:"vms_fc_object" json:"vms_fc_object"`
  VmsInterfaceMirrorMetaObject int64 `thrift:"vms_interface_mirror_meta_object,64" db:"vms_interface_mirror_meta_object" json:"vms_interface_mirror_meta_object"`
  VmsInterfaceReqMirrorMetaObject int64 `thrift:"vms_interface_req_mirror_meta_object,65" db:"vms_interface_req_mirror_meta_object" json:"vms_interface_req_mirror_meta_object"`
  VmsInterfaceBridgeLockObject int64 `thrift:"vms_interface_bridge_lock_object,66" db:"vms_interface_bridge_lock_object" json:"vms_interface_bridge_lock_object"`
  VmsInterfaceQueueObject int64 `thrift:"vms_interface_queue_object,67" db:"vms_interface_queue_object" json:"vms_interface_queue_object"`
  VmsInterfaceReqPbbMacObject int64 `thrift:"vms_interface_req_pbb_mac_object,68" db:"vms_interface_req_pbb_mac_object" json:"vms_interface_req_pbb_mac_object"`
  VmsNexthopReqBmacObject int64 `thrift:"vms_nexthop_req_bmac_object,69" db:"vms_nexthop_req_bmac_object" json:"vms_nexthop_req_bmac_object"`
  VmsInterfaceReqBridgeIDObject int64 `thrift:"vms_interface_req_bridge_id_object,70" db:"vms_interface_req_bridge_id_object" json:"vms_interface_req_bridge_id_object"`
  VmsInterfaceFatFlowIpv4ExcludeListObject int64 `thrift:"vms_interface_fat_flow_ipv4_exclude_list_object,71" db:"vms_interface_fat_flow_ipv4_exclude_list_object" json:"vms_interface_fat_flow_ipv4_exclude_list_object"`
  VmsInterfaceFatFlowIpv6ExcludeListObject int64 `thrift:"vms_interface_fat_flow_ipv6_exclude_list_object,72" db:"vms_interface_fat_flow_ipv6_exclude_list_object" json:"vms_interface_fat_flow_ipv6_exclude_list_object"`
}

func NewVrMemStatsReq() *VrMemStatsReq {
  return &VrMemStatsReq{}
}


func (p *VrMemStatsReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrMemStatsReq) GetVmsRid() int16 {
  return p.VmsRid
}

func (p *VrMemStatsReq) GetVmsAlloced() int64 {
  return p.VmsAlloced
}

func (p *VrMemStatsReq) GetVmsFreed() int64 {
  return p.VmsFreed
}

func (p *VrMemStatsReq) GetVmsAssemblerTableObject() int64 {
  return p.VmsAssemblerTableObject
}

func (p *VrMemStatsReq) GetVmsBridgeMacObject() int64 {
  return p.VmsBridgeMacObject
}

func (p *VrMemStatsReq) GetVmsBtableObject() int64 {
  return p.VmsBtableObject
}

func (p *VrMemStatsReq) GetVmsBuildInfoObject() int64 {
  return p.VmsBuildInfoObject
}

func (p *VrMemStatsReq) GetVmsDeferObject() int64 {
  return p.VmsDeferObject
}

func (p *VrMemStatsReq) GetVmsDropStatsObject() int64 {
  return p.VmsDropStatsObject
}

func (p *VrMemStatsReq) GetVmsDropStatsReqObject() int64 {
  return p.VmsDropStatsReqObject
}

func (p *VrMemStatsReq) GetVmsFlowQueueObject() int64 {
  return p.VmsFlowQueueObject
}

func (p *VrMemStatsReq) GetVmsFlowReqObject() int64 {
  return p.VmsFlowReqObject
}

func (p *VrMemStatsReq) GetVmsFlowReqPathObject() int64 {
  return p.VmsFlowReqPathObject
}

func (p *VrMemStatsReq) GetVmsFlowHoldStatObject() int64 {
  return p.VmsFlowHoldStatObject
}

func (p *VrMemStatsReq) GetVmsFlowLinkLocalObject() int64 {
  return p.VmsFlowLinkLocalObject
}

func (p *VrMemStatsReq) GetVmsFlowMetadataObject() int64 {
  return p.VmsFlowMetadataObject
}

func (p *VrMemStatsReq) GetVmsFlowTableDataObject() int64 {
  return p.VmsFlowTableDataObject
}

func (p *VrMemStatsReq) GetVmsFlowTableInfoObject() int64 {
  return p.VmsFlowTableInfoObject
}

func (p *VrMemStatsReq) GetVmsFragmentObject() int64 {
  return p.VmsFragmentObject
}

func (p *VrMemStatsReq) GetVmsFragmentQueueObject() int64 {
  return p.VmsFragmentQueueObject
}

func (p *VrMemStatsReq) GetVmsFragmentQueueElementObject() int64 {
  return p.VmsFragmentQueueElementObject
}

func (p *VrMemStatsReq) GetVmsFragmentScannerObject() int64 {
  return p.VmsFragmentScannerObject
}

func (p *VrMemStatsReq) GetVmsHpacketPoolObject() int64 {
  return p.VmsHpacketPoolObject
}

func (p *VrMemStatsReq) GetVmsHtableObject() int64 {
  return p.VmsHtableObject
}

func (p *VrMemStatsReq) GetVmsInterfaceObject() int64 {
  return p.VmsInterfaceObject
}

func (p *VrMemStatsReq) GetVmsInterfaceMacObject() int64 {
  return p.VmsInterfaceMacObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqObject() int64 {
  return p.VmsInterfaceReqObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqMacObject() int64 {
  return p.VmsInterfaceReqMacObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqNameObject() int64 {
  return p.VmsInterfaceReqNameObject
}

func (p *VrMemStatsReq) GetVmsInterfaceStatsObject() int64 {
  return p.VmsInterfaceStatsObject
}

func (p *VrMemStatsReq) GetVmsInterfaceTableObject() int64 {
  return p.VmsInterfaceTableObject
}

func (p *VrMemStatsReq) GetVmsInterfaceVrfTableObject() int64 {
  return p.VmsInterfaceVrfTableObject
}

func (p *VrMemStatsReq) GetVmsItableObject() int64 {
  return p.VmsItableObject
}

func (p *VrMemStatsReq) GetVmsMallocObject() int64 {
  return p.VmsMallocObject
}

func (p *VrMemStatsReq) GetVmsMessageObject() int64 {
  return p.VmsMessageObject
}

func (p *VrMemStatsReq) GetVmsMessageResponseObject() int64 {
  return p.VmsMessageResponseObject
}

func (p *VrMemStatsReq) GetVmsMessageDumpObject() int64 {
  return p.VmsMessageDumpObject
}

func (p *VrMemStatsReq) GetVmsMemStatsReqObject() int64 {
  return p.VmsMemStatsReqObject
}

func (p *VrMemStatsReq) GetVmsMirrorObject() int64 {
  return p.VmsMirrorObject
}

func (p *VrMemStatsReq) GetVmsMirrorTableObject() int64 {
  return p.VmsMirrorTableObject
}

func (p *VrMemStatsReq) GetVmsMirrorMetaObject() int64 {
  return p.VmsMirrorMetaObject
}

func (p *VrMemStatsReq) GetVmsMtrieObject() int64 {
  return p.VmsMtrieObject
}

func (p *VrMemStatsReq) GetVmsMtrieBucketObject() int64 {
  return p.VmsMtrieBucketObject
}

func (p *VrMemStatsReq) GetVmsMtrieStatsObject() int64 {
  return p.VmsMtrieStatsObject
}

func (p *VrMemStatsReq) GetVmsMtrieTableObject() int64 {
  return p.VmsMtrieTableObject
}

func (p *VrMemStatsReq) GetVmsNetworkAddressObject() int64 {
  return p.VmsNetworkAddressObject
}

func (p *VrMemStatsReq) GetVmsNexthopObject() int64 {
  return p.VmsNexthopObject
}

func (p *VrMemStatsReq) GetVmsNexthopComponentObject() int64 {
  return p.VmsNexthopComponentObject
}

func (p *VrMemStatsReq) GetVmsNexthopReqListObject() int64 {
  return p.VmsNexthopReqListObject
}

func (p *VrMemStatsReq) GetVmsNexthopReqEncapObject() int64 {
  return p.VmsNexthopReqEncapObject
}

func (p *VrMemStatsReq) GetVmsNexthopReqObject() int64 {
  return p.VmsNexthopReqObject
}

func (p *VrMemStatsReq) GetVmsRouteTableObject() int64 {
  return p.VmsRouteTableObject
}

func (p *VrMemStatsReq) GetVmsRouteReqMacObject() int64 {
  return p.VmsRouteReqMacObject
}

func (p *VrMemStatsReq) GetVmsTimerObject() int64 {
  return p.VmsTimerObject
}

func (p *VrMemStatsReq) GetVmsUsockObject() int64 {
  return p.VmsUsockObject
}

func (p *VrMemStatsReq) GetVmsUsockPollObject() int64 {
  return p.VmsUsockPollObject
}

func (p *VrMemStatsReq) GetVmsUsockBufObject() int64 {
  return p.VmsUsockBufObject
}

func (p *VrMemStatsReq) GetVmsUsockIovecObject() int64 {
  return p.VmsUsockIovecObject
}

func (p *VrMemStatsReq) GetVmsVrouterReqObject() int64 {
  return p.VmsVrouterReqObject
}

func (p *VrMemStatsReq) GetVmsInterfaceFatFlowConfigObject() int64 {
  return p.VmsInterfaceFatFlowConfigObject
}

func (p *VrMemStatsReq) GetVmsQosMapObject() int64 {
  return p.VmsQosMapObject
}

func (p *VrMemStatsReq) GetVmsFcObject() int64 {
  return p.VmsFcObject
}

func (p *VrMemStatsReq) GetVmsInterfaceMirrorMetaObject() int64 {
  return p.VmsInterfaceMirrorMetaObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqMirrorMetaObject() int64 {
  return p.VmsInterfaceReqMirrorMetaObject
}

func (p *VrMemStatsReq) GetVmsInterfaceBridgeLockObject() int64 {
  return p.VmsInterfaceBridgeLockObject
}

func (p *VrMemStatsReq) GetVmsInterfaceQueueObject() int64 {
  return p.VmsInterfaceQueueObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqPbbMacObject() int64 {
  return p.VmsInterfaceReqPbbMacObject
}

func (p *VrMemStatsReq) GetVmsNexthopReqBmacObject() int64 {
  return p.VmsNexthopReqBmacObject
}

func (p *VrMemStatsReq) GetVmsInterfaceReqBridgeIDObject() int64 {
  return p.VmsInterfaceReqBridgeIDObject
}

func (p *VrMemStatsReq) GetVmsInterfaceFatFlowIpv4ExcludeListObject() int64 {
  return p.VmsInterfaceFatFlowIpv4ExcludeListObject
}

func (p *VrMemStatsReq) GetVmsInterfaceFatFlowIpv6ExcludeListObject() int64 {
  return p.VmsInterfaceFatFlowIpv6ExcludeListObject
}
func (p *VrMemStatsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 49:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField49(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField52(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField53(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField54(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 55:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField55(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 56:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField56(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 57:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField57(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 58:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField58(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 59:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField59(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField60(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField62(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField63(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 64:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField64(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField65(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField66(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField68(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 72:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField72(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrMemStatsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrMemStatsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VmsRid = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VmsAlloced = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VmsFreed = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VmsAssemblerTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VmsBridgeMacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VmsBtableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VmsBuildInfoObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VmsDeferObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VmsDropStatsObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VmsDropStatsReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VmsFlowQueueObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VmsFlowReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.VmsFlowReqPathObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VmsFlowHoldStatObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VmsFlowLinkLocalObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VmsFlowMetadataObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VmsFlowTableDataObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.VmsFlowTableInfoObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.VmsFragmentObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.VmsFragmentQueueObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.VmsFragmentQueueElementObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VmsFragmentScannerObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VmsHpacketPoolObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VmsHtableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.VmsInterfaceObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.VmsInterfaceMacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.VmsInterfaceReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.VmsInterfaceReqMacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.VmsInterfaceReqNameObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.VmsInterfaceStatsObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.VmsInterfaceTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.VmsInterfaceVrfTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.VmsItableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VmsMallocObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.VmsMessageObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.VmsMessageResponseObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.VmsMessageDumpObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.VmsMemStatsReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.VmsMirrorObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.VmsMirrorTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VmsMirrorMetaObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.VmsMtrieObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.VmsMtrieBucketObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.VmsMtrieStatsObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.VmsMtrieTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.VmsNetworkAddressObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.VmsNexthopObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField49(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 49: ", err)
} else {
  p.VmsNexthopComponentObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.VmsNexthopReqListObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.VmsNexthopReqEncapObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.VmsNexthopReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField53(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  p.VmsRouteTableObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField54(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 54: ", err)
} else {
  p.VmsRouteReqMacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField55(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.VmsTimerObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField56(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 56: ", err)
} else {
  p.VmsUsockObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField57(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 57: ", err)
} else {
  p.VmsUsockPollObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField58(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 58: ", err)
} else {
  p.VmsUsockBufObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField59(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 59: ", err)
} else {
  p.VmsUsockIovecObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.VmsVrouterReqObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.VmsInterfaceFatFlowConfigObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField62(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.VmsQosMapObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.VmsFcObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField64(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 64: ", err)
} else {
  p.VmsInterfaceMirrorMetaObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.VmsInterfaceReqMirrorMetaObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.VmsInterfaceBridgeLockObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.VmsInterfaceQueueObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.VmsInterfaceReqPbbMacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField69(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.VmsNexthopReqBmacObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField70(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.VmsInterfaceReqBridgeIDObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.VmsInterfaceFatFlowIpv4ExcludeListObject = v
}
  return nil
}

func (p *VrMemStatsReq)  ReadField72(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.VmsInterfaceFatFlowIpv6ExcludeListObject = v
}
  return nil
}

func (p *VrMemStatsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_mem_stats_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField49(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField52(ctx, oprot); err != nil { return err }
    if err := p.writeField53(ctx, oprot); err != nil { return err }
    if err := p.writeField54(ctx, oprot); err != nil { return err }
    if err := p.writeField55(ctx, oprot); err != nil { return err }
    if err := p.writeField56(ctx, oprot); err != nil { return err }
    if err := p.writeField57(ctx, oprot); err != nil { return err }
    if err := p.writeField58(ctx, oprot); err != nil { return err }
    if err := p.writeField59(ctx, oprot); err != nil { return err }
    if err := p.writeField60(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField62(ctx, oprot); err != nil { return err }
    if err := p.writeField63(ctx, oprot); err != nil { return err }
    if err := p.writeField64(ctx, oprot); err != nil { return err }
    if err := p.writeField65(ctx, oprot); err != nil { return err }
    if err := p.writeField66(ctx, oprot); err != nil { return err }
    if err := p.writeField67(ctx, oprot); err != nil { return err }
    if err := p.writeField68(ctx, oprot); err != nil { return err }
    if err := p.writeField69(ctx, oprot); err != nil { return err }
    if err := p.writeField70(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField72(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrMemStatsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vms_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VmsRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vms_rid: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_alloced", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vms_alloced: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsAlloced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_alloced (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vms_alloced: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_freed", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vms_freed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFreed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_freed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vms_freed: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_assembler_table_object", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vms_assembler_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsAssemblerTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_assembler_table_object (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vms_assembler_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_bridge_mac_object", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vms_bridge_mac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsBridgeMacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_bridge_mac_object (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vms_bridge_mac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_btable_object", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vms_btable_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsBtableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_btable_object (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vms_btable_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_build_info_object", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vms_build_info_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsBuildInfoObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_build_info_object (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vms_build_info_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_defer_object", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vms_defer_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsDeferObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_defer_object (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vms_defer_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_drop_stats_object", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vms_drop_stats_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsDropStatsObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_drop_stats_object (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vms_drop_stats_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_drop_stats_req_object", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vms_drop_stats_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsDropStatsReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_drop_stats_req_object (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vms_drop_stats_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_queue_object", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vms_flow_queue_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowQueueObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_queue_object (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vms_flow_queue_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_req_object", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vms_flow_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_req_object (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vms_flow_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_req_path_object", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vms_flow_req_path_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowReqPathObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_req_path_object (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vms_flow_req_path_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_hold_stat_object", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vms_flow_hold_stat_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowHoldStatObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_hold_stat_object (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vms_flow_hold_stat_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_link_local_object", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:vms_flow_link_local_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowLinkLocalObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_link_local_object (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:vms_flow_link_local_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_metadata_object", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:vms_flow_metadata_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowMetadataObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_metadata_object (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:vms_flow_metadata_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_table_data_object", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:vms_flow_table_data_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowTableDataObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_table_data_object (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:vms_flow_table_data_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_flow_table_info_object", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vms_flow_table_info_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFlowTableInfoObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_flow_table_info_object (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vms_flow_table_info_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_fragment_object", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:vms_fragment_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFragmentObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_fragment_object (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:vms_fragment_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_fragment_queue_object", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vms_fragment_queue_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFragmentQueueObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_fragment_queue_object (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vms_fragment_queue_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_fragment_queue_element_object", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vms_fragment_queue_element_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFragmentQueueElementObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_fragment_queue_element_object (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vms_fragment_queue_element_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_fragment_scanner_object", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:vms_fragment_scanner_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFragmentScannerObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_fragment_scanner_object (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:vms_fragment_scanner_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_hpacket_pool_object", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vms_hpacket_pool_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsHpacketPoolObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_hpacket_pool_object (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vms_hpacket_pool_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_htable_object", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:vms_htable_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsHtableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_htable_object (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:vms_htable_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_object", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:vms_interface_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_object (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:vms_interface_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_mac_object", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:vms_interface_mac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceMacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_mac_object (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:vms_interface_mac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_object", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:vms_interface_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_object (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:vms_interface_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_mac_object", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:vms_interface_req_mac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqMacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_mac_object (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:vms_interface_req_mac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_name_object", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:vms_interface_req_name_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqNameObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_name_object (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:vms_interface_req_name_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_stats_object", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:vms_interface_stats_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceStatsObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_stats_object (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:vms_interface_stats_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_table_object", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:vms_interface_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_table_object (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:vms_interface_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_vrf_table_object", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:vms_interface_vrf_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceVrfTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_vrf_table_object (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:vms_interface_vrf_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_itable_object", thrift.I64, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:vms_itable_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsItableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_itable_object (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:vms_itable_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_malloc_object", thrift.I64, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:vms_malloc_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMallocObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_malloc_object (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:vms_malloc_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_message_object", thrift.I64, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:vms_message_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMessageObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_message_object (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:vms_message_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_message_response_object", thrift.I64, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:vms_message_response_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMessageResponseObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_message_response_object (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:vms_message_response_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_message_dump_object", thrift.I64, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:vms_message_dump_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMessageDumpObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_message_dump_object (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:vms_message_dump_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mem_stats_req_object", thrift.I64, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:vms_mem_stats_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMemStatsReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mem_stats_req_object (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:vms_mem_stats_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mirror_object", thrift.I64, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:vms_mirror_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMirrorObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mirror_object (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:vms_mirror_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mirror_table_object", thrift.I64, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:vms_mirror_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMirrorTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mirror_table_object (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:vms_mirror_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mirror_meta_object", thrift.I64, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:vms_mirror_meta_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMirrorMetaObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mirror_meta_object (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:vms_mirror_meta_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mtrie_object", thrift.I64, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:vms_mtrie_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMtrieObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mtrie_object (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:vms_mtrie_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mtrie_bucket_object", thrift.I64, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:vms_mtrie_bucket_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMtrieBucketObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mtrie_bucket_object (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:vms_mtrie_bucket_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mtrie_stats_object", thrift.I64, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:vms_mtrie_stats_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMtrieStatsObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mtrie_stats_object (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:vms_mtrie_stats_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_mtrie_table_object", thrift.I64, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:vms_mtrie_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsMtrieTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_mtrie_table_object (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:vms_mtrie_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_network_address_object", thrift.I64, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:vms_network_address_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNetworkAddressObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_network_address_object (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:vms_network_address_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_object", thrift.I64, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:vms_nexthop_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_object (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:vms_nexthop_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField49(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_component_object", thrift.I64, 49); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:vms_nexthop_component_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopComponentObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_component_object (49) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 49:vms_nexthop_component_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_req_list_object", thrift.I64, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:vms_nexthop_req_list_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopReqListObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_req_list_object (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:vms_nexthop_req_list_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_req_encap_object", thrift.I64, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:vms_nexthop_req_encap_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopReqEncapObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_req_encap_object (51) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:vms_nexthop_req_encap_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_req_object", thrift.I64, 52); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:vms_nexthop_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_req_object (52) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 52:vms_nexthop_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField53(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_route_table_object", thrift.I64, 53); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:vms_route_table_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsRouteTableObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_route_table_object (53) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 53:vms_route_table_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField54(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_route_req_mac_object", thrift.I64, 54); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:vms_route_req_mac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsRouteReqMacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_route_req_mac_object (54) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 54:vms_route_req_mac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField55(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_timer_object", thrift.I64, 55); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:vms_timer_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsTimerObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_timer_object (55) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 55:vms_timer_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField56(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_usock_object", thrift.I64, 56); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:vms_usock_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsUsockObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_usock_object (56) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 56:vms_usock_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField57(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_usock_poll_object", thrift.I64, 57); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:vms_usock_poll_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsUsockPollObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_usock_poll_object (57) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 57:vms_usock_poll_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField58(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_usock_buf_object", thrift.I64, 58); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 58:vms_usock_buf_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsUsockBufObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_usock_buf_object (58) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 58:vms_usock_buf_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField59(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_usock_iovec_object", thrift.I64, 59); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 59:vms_usock_iovec_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsUsockIovecObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_usock_iovec_object (59) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 59:vms_usock_iovec_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_vrouter_req_object", thrift.I64, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:vms_vrouter_req_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsVrouterReqObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_vrouter_req_object (60) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:vms_vrouter_req_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_fat_flow_config_object", thrift.I64, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:vms_interface_fat_flow_config_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceFatFlowConfigObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_fat_flow_config_object (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:vms_interface_fat_flow_config_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField62(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_qos_map_object", thrift.I64, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:vms_qos_map_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsQosMapObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_qos_map_object (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:vms_qos_map_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_fc_object", thrift.I64, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:vms_fc_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsFcObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_fc_object (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:vms_fc_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField64(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_mirror_meta_object", thrift.I64, 64); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 64:vms_interface_mirror_meta_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceMirrorMetaObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_mirror_meta_object (64) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 64:vms_interface_mirror_meta_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_mirror_meta_object", thrift.I64, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:vms_interface_req_mirror_meta_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqMirrorMetaObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_mirror_meta_object (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:vms_interface_req_mirror_meta_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_bridge_lock_object", thrift.I64, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:vms_interface_bridge_lock_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceBridgeLockObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_bridge_lock_object (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:vms_interface_bridge_lock_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_queue_object", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:vms_interface_queue_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceQueueObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_queue_object (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:vms_interface_queue_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_pbb_mac_object", thrift.I64, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:vms_interface_req_pbb_mac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqPbbMacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_pbb_mac_object (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:vms_interface_req_pbb_mac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField69(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_nexthop_req_bmac_object", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:vms_nexthop_req_bmac_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsNexthopReqBmacObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_nexthop_req_bmac_object (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:vms_nexthop_req_bmac_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField70(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_req_bridge_id_object", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:vms_interface_req_bridge_id_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceReqBridgeIDObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_req_bridge_id_object (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:vms_interface_req_bridge_id_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_fat_flow_ipv4_exclude_list_object", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:vms_interface_fat_flow_ipv4_exclude_list_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceFatFlowIpv4ExcludeListObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_fat_flow_ipv4_exclude_list_object (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:vms_interface_fat_flow_ipv4_exclude_list_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) writeField72(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vms_interface_fat_flow_ipv6_exclude_list_object", thrift.I64, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:vms_interface_fat_flow_ipv6_exclude_list_object: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VmsInterfaceFatFlowIpv6ExcludeListObject)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vms_interface_fat_flow_ipv6_exclude_list_object (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:vms_interface_fat_flow_ipv6_exclude_list_object: ", p), err) }
  return err
}

func (p *VrMemStatsReq) Equals(other *VrMemStatsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VmsRid != other.VmsRid { return false }
  if p.VmsAlloced != other.VmsAlloced { return false }
  if p.VmsFreed != other.VmsFreed { return false }
  if p.VmsAssemblerTableObject != other.VmsAssemblerTableObject { return false }
  if p.VmsBridgeMacObject != other.VmsBridgeMacObject { return false }
  if p.VmsBtableObject != other.VmsBtableObject { return false }
  if p.VmsBuildInfoObject != other.VmsBuildInfoObject { return false }
  if p.VmsDeferObject != other.VmsDeferObject { return false }
  if p.VmsDropStatsObject != other.VmsDropStatsObject { return false }
  if p.VmsDropStatsReqObject != other.VmsDropStatsReqObject { return false }
  if p.VmsFlowQueueObject != other.VmsFlowQueueObject { return false }
  if p.VmsFlowReqObject != other.VmsFlowReqObject { return false }
  if p.VmsFlowReqPathObject != other.VmsFlowReqPathObject { return false }
  if p.VmsFlowHoldStatObject != other.VmsFlowHoldStatObject { return false }
  if p.VmsFlowLinkLocalObject != other.VmsFlowLinkLocalObject { return false }
  if p.VmsFlowMetadataObject != other.VmsFlowMetadataObject { return false }
  if p.VmsFlowTableDataObject != other.VmsFlowTableDataObject { return false }
  if p.VmsFlowTableInfoObject != other.VmsFlowTableInfoObject { return false }
  if p.VmsFragmentObject != other.VmsFragmentObject { return false }
  if p.VmsFragmentQueueObject != other.VmsFragmentQueueObject { return false }
  if p.VmsFragmentQueueElementObject != other.VmsFragmentQueueElementObject { return false }
  if p.VmsFragmentScannerObject != other.VmsFragmentScannerObject { return false }
  if p.VmsHpacketPoolObject != other.VmsHpacketPoolObject { return false }
  if p.VmsHtableObject != other.VmsHtableObject { return false }
  if p.VmsInterfaceObject != other.VmsInterfaceObject { return false }
  if p.VmsInterfaceMacObject != other.VmsInterfaceMacObject { return false }
  if p.VmsInterfaceReqObject != other.VmsInterfaceReqObject { return false }
  if p.VmsInterfaceReqMacObject != other.VmsInterfaceReqMacObject { return false }
  if p.VmsInterfaceReqNameObject != other.VmsInterfaceReqNameObject { return false }
  if p.VmsInterfaceStatsObject != other.VmsInterfaceStatsObject { return false }
  if p.VmsInterfaceTableObject != other.VmsInterfaceTableObject { return false }
  if p.VmsInterfaceVrfTableObject != other.VmsInterfaceVrfTableObject { return false }
  if p.VmsItableObject != other.VmsItableObject { return false }
  if p.VmsMallocObject != other.VmsMallocObject { return false }
  if p.VmsMessageObject != other.VmsMessageObject { return false }
  if p.VmsMessageResponseObject != other.VmsMessageResponseObject { return false }
  if p.VmsMessageDumpObject != other.VmsMessageDumpObject { return false }
  if p.VmsMemStatsReqObject != other.VmsMemStatsReqObject { return false }
  if p.VmsMirrorObject != other.VmsMirrorObject { return false }
  if p.VmsMirrorTableObject != other.VmsMirrorTableObject { return false }
  if p.VmsMirrorMetaObject != other.VmsMirrorMetaObject { return false }
  if p.VmsMtrieObject != other.VmsMtrieObject { return false }
  if p.VmsMtrieBucketObject != other.VmsMtrieBucketObject { return false }
  if p.VmsMtrieStatsObject != other.VmsMtrieStatsObject { return false }
  if p.VmsMtrieTableObject != other.VmsMtrieTableObject { return false }
  if p.VmsNetworkAddressObject != other.VmsNetworkAddressObject { return false }
  if p.VmsNexthopObject != other.VmsNexthopObject { return false }
  if p.VmsNexthopComponentObject != other.VmsNexthopComponentObject { return false }
  if p.VmsNexthopReqListObject != other.VmsNexthopReqListObject { return false }
  if p.VmsNexthopReqEncapObject != other.VmsNexthopReqEncapObject { return false }
  if p.VmsNexthopReqObject != other.VmsNexthopReqObject { return false }
  if p.VmsRouteTableObject != other.VmsRouteTableObject { return false }
  if p.VmsRouteReqMacObject != other.VmsRouteReqMacObject { return false }
  if p.VmsTimerObject != other.VmsTimerObject { return false }
  if p.VmsUsockObject != other.VmsUsockObject { return false }
  if p.VmsUsockPollObject != other.VmsUsockPollObject { return false }
  if p.VmsUsockBufObject != other.VmsUsockBufObject { return false }
  if p.VmsUsockIovecObject != other.VmsUsockIovecObject { return false }
  if p.VmsVrouterReqObject != other.VmsVrouterReqObject { return false }
  if p.VmsInterfaceFatFlowConfigObject != other.VmsInterfaceFatFlowConfigObject { return false }
  if p.VmsQosMapObject != other.VmsQosMapObject { return false }
  if p.VmsFcObject != other.VmsFcObject { return false }
  if p.VmsInterfaceMirrorMetaObject != other.VmsInterfaceMirrorMetaObject { return false }
  if p.VmsInterfaceReqMirrorMetaObject != other.VmsInterfaceReqMirrorMetaObject { return false }
  if p.VmsInterfaceBridgeLockObject != other.VmsInterfaceBridgeLockObject { return false }
  if p.VmsInterfaceQueueObject != other.VmsInterfaceQueueObject { return false }
  if p.VmsInterfaceReqPbbMacObject != other.VmsInterfaceReqPbbMacObject { return false }
  if p.VmsNexthopReqBmacObject != other.VmsNexthopReqBmacObject { return false }
  if p.VmsInterfaceReqBridgeIDObject != other.VmsInterfaceReqBridgeIDObject { return false }
  if p.VmsInterfaceFatFlowIpv4ExcludeListObject != other.VmsInterfaceFatFlowIpv4ExcludeListObject { return false }
  if p.VmsInterfaceFatFlowIpv6ExcludeListObject != other.VmsInterfaceFatFlowIpv6ExcludeListObject { return false }
  return true
}

func (p *VrMemStatsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrMemStatsReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VduRid
//  - VduIndex
//  - VduBuffTableID
//  - VduMarker
//  - VduMsginfo
//  - VduOutbufsz
//  - VduInbuf
//  - VduProcInfo
type VrInfoReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VduRid int16 `thrift:"vdu_rid,2" db:"vdu_rid" json:"vdu_rid"`
  VduIndex int16 `thrift:"vdu_index,3" db:"vdu_index" json:"vdu_index"`
  VduBuffTableID int16 `thrift:"vdu_buff_table_id,4" db:"vdu_buff_table_id" json:"vdu_buff_table_id"`
  VduMarker int16 `thrift:"vdu_marker,5" db:"vdu_marker" json:"vdu_marker"`
  VduMsginfo int16 `thrift:"vdu_msginfo,6" db:"vdu_msginfo" json:"vdu_msginfo"`
  VduOutbufsz int32 `thrift:"vdu_outbufsz,7" db:"vdu_outbufsz" json:"vdu_outbufsz"`
  VduInbuf []int8 `thrift:"vdu_inbuf,8" db:"vdu_inbuf" json:"vdu_inbuf"`
  VduProcInfo []int8 `thrift:"vdu_proc_info,9" db:"vdu_proc_info" json:"vdu_proc_info"`
}

func NewVrInfoReq() *VrInfoReq {
  return &VrInfoReq{}
}


func (p *VrInfoReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrInfoReq) GetVduRid() int16 {
  return p.VduRid
}

func (p *VrInfoReq) GetVduIndex() int16 {
  return p.VduIndex
}

func (p *VrInfoReq) GetVduBuffTableID() int16 {
  return p.VduBuffTableID
}

func (p *VrInfoReq) GetVduMarker() int16 {
  return p.VduMarker
}

func (p *VrInfoReq) GetVduMsginfo() int16 {
  return p.VduMsginfo
}

func (p *VrInfoReq) GetVduOutbufsz() int32 {
  return p.VduOutbufsz
}

func (p *VrInfoReq) GetVduInbuf() []int8 {
  return p.VduInbuf
}

func (p *VrInfoReq) GetVduProcInfo() []int8 {
  return p.VduProcInfo
}
func (p *VrInfoReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrInfoReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrInfoReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VduRid = v
}
  return nil
}

func (p *VrInfoReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VduIndex = v
}
  return nil
}

func (p *VrInfoReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VduBuffTableID = v
}
  return nil
}

func (p *VrInfoReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VduMarker = v
}
  return nil
}

func (p *VrInfoReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VduMsginfo = v
}
  return nil
}

func (p *VrInfoReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VduOutbufsz = v
}
  return nil
}

func (p *VrInfoReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VduInbuf =  tSlice
  for i := 0; i < size; i ++ {
var _elem86 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem86 = temp
}
    p.VduInbuf = append(p.VduInbuf, _elem86)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInfoReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VduProcInfo =  tSlice
  for i := 0; i < size; i ++ {
var _elem87 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem87 = temp
}
    p.VduProcInfo = append(p.VduProcInfo, _elem87)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrInfoReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_info_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrInfoReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vdu_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VduRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vdu_rid: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_index", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vdu_index: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VduIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_index (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vdu_index: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_buff_table_id", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vdu_buff_table_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VduBuffTableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_buff_table_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vdu_buff_table_id: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_marker", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vdu_marker: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VduMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_marker (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vdu_marker: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_msginfo", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vdu_msginfo: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VduMsginfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_msginfo (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vdu_msginfo: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_outbufsz", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vdu_outbufsz: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VduOutbufsz)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdu_outbufsz (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vdu_outbufsz: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_inbuf", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vdu_inbuf: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VduInbuf)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VduInbuf {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vdu_inbuf: ", p), err) }
  return err
}

func (p *VrInfoReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdu_proc_info", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vdu_proc_info: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VduProcInfo)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VduProcInfo {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vdu_proc_info: ", p), err) }
  return err
}

func (p *VrInfoReq) Equals(other *VrInfoReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VduRid != other.VduRid { return false }
  if p.VduIndex != other.VduIndex { return false }
  if p.VduBuffTableID != other.VduBuffTableID { return false }
  if p.VduMarker != other.VduMarker { return false }
  if p.VduMsginfo != other.VduMsginfo { return false }
  if p.VduOutbufsz != other.VduOutbufsz { return false }
  if len(p.VduInbuf) != len(other.VduInbuf) { return false }
  for i, _tgt := range p.VduInbuf {
    _src88 := other.VduInbuf[i]
    if _tgt != _src88 { return false }
  }
  if len(p.VduProcInfo) != len(other.VduProcInfo) { return false }
  for i, _tgt := range p.VduProcInfo {
    _src89 := other.VduProcInfo[i]
    if _tgt != _src89 { return false }
  }
  return true
}

func (p *VrInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrInfoReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VdlRid
//  - VdlCore
//  - VdlLogIdx
//  - VdlMaxNumCores
//  - VdlPktDroplogMaxBufsz
//  - VdlPktDroplogEn
//  - VdlPktDroplogSysctlEn
//  - VdlPktDroplogArr
//  - VdlPktDroplogType
//  - VdlPktDroplogMinSysctlEn
//  - VdlPktDroplogConfig
type VrPktDropLogReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VdlRid int16 `thrift:"vdl_rid,2" db:"vdl_rid" json:"vdl_rid"`
  VdlCore int16 `thrift:"vdl_core,3" db:"vdl_core" json:"vdl_core"`
  VdlLogIdx int16 `thrift:"vdl_log_idx,4" db:"vdl_log_idx" json:"vdl_log_idx"`
  VdlMaxNumCores int16 `thrift:"vdl_max_num_cores,5" db:"vdl_max_num_cores" json:"vdl_max_num_cores"`
  VdlPktDroplogMaxBufsz int16 `thrift:"vdl_pkt_droplog_max_bufsz,6" db:"vdl_pkt_droplog_max_bufsz" json:"vdl_pkt_droplog_max_bufsz"`
  VdlPktDroplogEn int16 `thrift:"vdl_pkt_droplog_en,7" db:"vdl_pkt_droplog_en" json:"vdl_pkt_droplog_en"`
  VdlPktDroplogSysctlEn int16 `thrift:"vdl_pkt_droplog_sysctl_en,8" db:"vdl_pkt_droplog_sysctl_en" json:"vdl_pkt_droplog_sysctl_en"`
  VdlPktDroplogArr []int8 `thrift:"vdl_pkt_droplog_arr,9" db:"vdl_pkt_droplog_arr" json:"vdl_pkt_droplog_arr"`
  VdlPktDroplogType int8 `thrift:"vdl_pkt_droplog_type,10" db:"vdl_pkt_droplog_type" json:"vdl_pkt_droplog_type"`
  VdlPktDroplogMinSysctlEn int8 `thrift:"vdl_pkt_droplog_min_sysctl_en,11" db:"vdl_pkt_droplog_min_sysctl_en" json:"vdl_pkt_droplog_min_sysctl_en"`
  VdlPktDroplogConfig int8 `thrift:"vdl_pkt_droplog_config,12" db:"vdl_pkt_droplog_config" json:"vdl_pkt_droplog_config"`
}

func NewVrPktDropLogReq() *VrPktDropLogReq {
  return &VrPktDropLogReq{}
}


func (p *VrPktDropLogReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrPktDropLogReq) GetVdlRid() int16 {
  return p.VdlRid
}

func (p *VrPktDropLogReq) GetVdlCore() int16 {
  return p.VdlCore
}

func (p *VrPktDropLogReq) GetVdlLogIdx() int16 {
  return p.VdlLogIdx
}

func (p *VrPktDropLogReq) GetVdlMaxNumCores() int16 {
  return p.VdlMaxNumCores
}

func (p *VrPktDropLogReq) GetVdlPktDroplogMaxBufsz() int16 {
  return p.VdlPktDroplogMaxBufsz
}

func (p *VrPktDropLogReq) GetVdlPktDroplogEn() int16 {
  return p.VdlPktDroplogEn
}

func (p *VrPktDropLogReq) GetVdlPktDroplogSysctlEn() int16 {
  return p.VdlPktDroplogSysctlEn
}

func (p *VrPktDropLogReq) GetVdlPktDroplogArr() []int8 {
  return p.VdlPktDroplogArr
}

func (p *VrPktDropLogReq) GetVdlPktDroplogType() int8 {
  return p.VdlPktDroplogType
}

func (p *VrPktDropLogReq) GetVdlPktDroplogMinSysctlEn() int8 {
  return p.VdlPktDroplogMinSysctlEn
}

func (p *VrPktDropLogReq) GetVdlPktDroplogConfig() int8 {
  return p.VdlPktDroplogConfig
}
func (p *VrPktDropLogReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrPktDropLogReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VdlRid = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VdlCore = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VdlLogIdx = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VdlMaxNumCores = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VdlPktDroplogMaxBufsz = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VdlPktDroplogEn = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VdlPktDroplogSysctlEn = v
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VdlPktDroplogArr =  tSlice
  for i := 0; i < size; i ++ {
var _elem90 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem90 = temp
}
    p.VdlPktDroplogArr = append(p.VdlPktDroplogArr, _elem90)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrPktDropLogReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := int8(v)
  p.VdlPktDroplogType = temp
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := int8(v)
  p.VdlPktDroplogMinSysctlEn = temp
}
  return nil
}

func (p *VrPktDropLogReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := int8(v)
  p.VdlPktDroplogConfig = temp
}
  return nil
}

func (p *VrPktDropLogReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_pkt_drop_log_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrPktDropLogReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vdl_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vdl_rid: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_core", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vdl_core: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlCore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_core (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vdl_core: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_log_idx", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vdl_log_idx: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlLogIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_log_idx (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vdl_log_idx: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_max_num_cores", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vdl_max_num_cores: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlMaxNumCores)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_max_num_cores (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vdl_max_num_cores: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_max_bufsz", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vdl_pkt_droplog_max_bufsz: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlPktDroplogMaxBufsz)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_max_bufsz (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vdl_pkt_droplog_max_bufsz: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_en", thrift.I16, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vdl_pkt_droplog_en: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlPktDroplogEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_en (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vdl_pkt_droplog_en: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_sysctl_en", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vdl_pkt_droplog_sysctl_en: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdlPktDroplogSysctlEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_sysctl_en (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vdl_pkt_droplog_sysctl_en: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_arr", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vdl_pkt_droplog_arr: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VdlPktDroplogArr)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VdlPktDroplogArr {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vdl_pkt_droplog_arr: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_type", thrift.BYTE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vdl_pkt_droplog_type: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VdlPktDroplogType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vdl_pkt_droplog_type: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_min_sysctl_en", thrift.BYTE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vdl_pkt_droplog_min_sysctl_en: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VdlPktDroplogMinSysctlEn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_min_sysctl_en (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vdl_pkt_droplog_min_sysctl_en: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vdl_pkt_droplog_config", thrift.BYTE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vdl_pkt_droplog_config: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VdlPktDroplogConfig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vdl_pkt_droplog_config (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vdl_pkt_droplog_config: ", p), err) }
  return err
}

func (p *VrPktDropLogReq) Equals(other *VrPktDropLogReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VdlRid != other.VdlRid { return false }
  if p.VdlCore != other.VdlCore { return false }
  if p.VdlLogIdx != other.VdlLogIdx { return false }
  if p.VdlMaxNumCores != other.VdlMaxNumCores { return false }
  if p.VdlPktDroplogMaxBufsz != other.VdlPktDroplogMaxBufsz { return false }
  if p.VdlPktDroplogEn != other.VdlPktDroplogEn { return false }
  if p.VdlPktDroplogSysctlEn != other.VdlPktDroplogSysctlEn { return false }
  if len(p.VdlPktDroplogArr) != len(other.VdlPktDroplogArr) { return false }
  for i, _tgt := range p.VdlPktDroplogArr {
    _src91 := other.VdlPktDroplogArr[i]
    if _tgt != _src91 { return false }
  }
  if p.VdlPktDroplogType != other.VdlPktDroplogType { return false }
  if p.VdlPktDroplogMinSysctlEn != other.VdlPktDroplogMinSysctlEn { return false }
  if p.VdlPktDroplogConfig != other.VdlPktDroplogConfig { return false }
  return true
}

func (p *VrPktDropLogReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrPktDropLogReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - VdsRid
//  - VdsCore
//  - VdsDiscard
//  - VdsPcpuStatsFailureStatus
//  - VdsPull
//  - VdsInvalidIf
//  - VdsInvalidArp
//  - VdsTrapNoIf
//  - VdsNowhereToGo
//  - VdsFlowQueueLimitExceeded
//  - VdsFlowNoMemory
//  - VdsFlowInvalidProtocol
//  - VdsFlowNatNoRflow
//  - VdsFlowActionDrop
//  - VdsFlowActionInvalid
//  - VdsFlowUnusable
//  - VdsFlowTableFull
//  - VdsInterfaceTxDiscard
//  - VdsInterfaceDrop
//  - VdsDuplicated
//  - VdsPush
//  - VdsTTLExceeded
//  - VdsInvalidNh
//  - VdsInvalidLabel
//  - VdsInvalidProtocol
//  - VdsInterfaceRxDiscard
//  - VdsInvalidMcastSource
//  - VdsHeadAllocFail
//  - VdsPcowFail
//  - VdsMcastDfBit
//  - VdsMcastCloneFail
//  - VdsNoMemory
//  - VdsRewriteFail
//  - VdsMisc
//  - VdsInvalidPacket
//  - VdsCksumErr
//  - VdsNoFmd
//  - VdsClonedOriginal
//  - VdsInvalidVnid
//  - VdsFragErr
//  - VdsInvalidSource
//  - VdsL2NoRoute
//  - VdsFragmentQueueFail
//  - VdsVlanFwdTx
//  - VdsVlanFwdEnq
//  - VdsDropNewFlow
//  - VdsFlowEvict
//  - VdsTrapOriginal
//  - VdsLeafToLeaf
//  - VdsBmacIsidMismatch
//  - VdsPktLoop
//  - VdsNoCryptPath
//  - VdsInvalidHbsPkt
//  - VdsNoFragEntry
//  - VdsIcmpError
//  - VdsCloneFail
//  - VdsInvalidUnderlayEcmp
type VrDropStatsReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  VdsRid int16 `thrift:"vds_rid,2" db:"vds_rid" json:"vds_rid"`
  VdsCore int16 `thrift:"vds_core,3" db:"vds_core" json:"vds_core"`
  VdsDiscard int64 `thrift:"vds_discard,4" db:"vds_discard" json:"vds_discard"`
  VdsPcpuStatsFailureStatus int8 `thrift:"vds_pcpu_stats_failure_status,5" db:"vds_pcpu_stats_failure_status" json:"vds_pcpu_stats_failure_status"`
  VdsPull int64 `thrift:"vds_pull,6" db:"vds_pull" json:"vds_pull"`
  VdsInvalidIf int64 `thrift:"vds_invalid_if,7" db:"vds_invalid_if" json:"vds_invalid_if"`
  VdsInvalidArp int64 `thrift:"vds_invalid_arp,8" db:"vds_invalid_arp" json:"vds_invalid_arp"`
  VdsTrapNoIf int64 `thrift:"vds_trap_no_if,9" db:"vds_trap_no_if" json:"vds_trap_no_if"`
  VdsNowhereToGo int64 `thrift:"vds_nowhere_to_go,10" db:"vds_nowhere_to_go" json:"vds_nowhere_to_go"`
  VdsFlowQueueLimitExceeded int64 `thrift:"vds_flow_queue_limit_exceeded,11" db:"vds_flow_queue_limit_exceeded" json:"vds_flow_queue_limit_exceeded"`
  VdsFlowNoMemory int64 `thrift:"vds_flow_no_memory,12" db:"vds_flow_no_memory" json:"vds_flow_no_memory"`
  VdsFlowInvalidProtocol int64 `thrift:"vds_flow_invalid_protocol,13" db:"vds_flow_invalid_protocol" json:"vds_flow_invalid_protocol"`
  VdsFlowNatNoRflow int64 `thrift:"vds_flow_nat_no_rflow,14" db:"vds_flow_nat_no_rflow" json:"vds_flow_nat_no_rflow"`
  VdsFlowActionDrop int64 `thrift:"vds_flow_action_drop,15" db:"vds_flow_action_drop" json:"vds_flow_action_drop"`
  VdsFlowActionInvalid int64 `thrift:"vds_flow_action_invalid,16" db:"vds_flow_action_invalid" json:"vds_flow_action_invalid"`
  VdsFlowUnusable int64 `thrift:"vds_flow_unusable,17" db:"vds_flow_unusable" json:"vds_flow_unusable"`
  VdsFlowTableFull int64 `thrift:"vds_flow_table_full,18" db:"vds_flow_table_full" json:"vds_flow_table_full"`
  VdsInterfaceTxDiscard int64 `thrift:"vds_interface_tx_discard,19" db:"vds_interface_tx_discard" json:"vds_interface_tx_discard"`
  VdsInterfaceDrop int64 `thrift:"vds_interface_drop,20" db:"vds_interface_drop" json:"vds_interface_drop"`
  VdsDuplicated int64 `thrift:"vds_duplicated,21" db:"vds_duplicated" json:"vds_duplicated"`
  VdsPush int64 `thrift:"vds_push,22" db:"vds_push" json:"vds_push"`
  VdsTTLExceeded int64 `thrift:"vds_ttl_exceeded,23" db:"vds_ttl_exceeded" json:"vds_ttl_exceeded"`
  VdsInvalidNh int64 `thrift:"vds_invalid_nh,24" db:"vds_invalid_nh" json:"vds_invalid_nh"`
  VdsInvalidLabel int64 `thrift:"vds_invalid_label,25" db:"vds_invalid_label" json:"vds_invalid_label"`
  VdsInvalidProtocol int64 `thrift:"vds_invalid_protocol,26" db:"vds_invalid_protocol" json:"vds_invalid_protocol"`
  VdsInterfaceRxDiscard int64 `thrift:"vds_interface_rx_discard,27" db:"vds_interface_rx_discard" json:"vds_interface_rx_discard"`
  VdsInvalidMcastSource int64 `thrift:"vds_invalid_mcast_source,28" db:"vds_invalid_mcast_source" json:"vds_invalid_mcast_source"`
  VdsHeadAllocFail int64 `thrift:"vds_head_alloc_fail,29" db:"vds_head_alloc_fail" json:"vds_head_alloc_fail"`
  VdsPcowFail int64 `thrift:"vds_pcow_fail,30" db:"vds_pcow_fail" json:"vds_pcow_fail"`
  VdsMcastDfBit int64 `thrift:"vds_mcast_df_bit,31" db:"vds_mcast_df_bit" json:"vds_mcast_df_bit"`
  VdsMcastCloneFail int64 `thrift:"vds_mcast_clone_fail,32" db:"vds_mcast_clone_fail" json:"vds_mcast_clone_fail"`
  VdsNoMemory int64 `thrift:"vds_no_memory,33" db:"vds_no_memory" json:"vds_no_memory"`
  VdsRewriteFail int64 `thrift:"vds_rewrite_fail,34" db:"vds_rewrite_fail" json:"vds_rewrite_fail"`
  VdsMisc int64 `thrift:"vds_misc,35" db:"vds_misc" json:"vds_misc"`
  VdsInvalidPacket int64 `thrift:"vds_invalid_packet,36" db:"vds_invalid_packet" json:"vds_invalid_packet"`
  VdsCksumErr int64 `thrift:"vds_cksum_err,37" db:"vds_cksum_err" json:"vds_cksum_err"`
  VdsNoFmd int64 `thrift:"vds_no_fmd,38" db:"vds_no_fmd" json:"vds_no_fmd"`
  VdsClonedOriginal int64 `thrift:"vds_cloned_original,39" db:"vds_cloned_original" json:"vds_cloned_original"`
  VdsInvalidVnid int64 `thrift:"vds_invalid_vnid,40" db:"vds_invalid_vnid" json:"vds_invalid_vnid"`
  VdsFragErr int64 `thrift:"vds_frag_err,41" db:"vds_frag_err" json:"vds_frag_err"`
  VdsInvalidSource int64 `thrift:"vds_invalid_source,42" db:"vds_invalid_source" json:"vds_invalid_source"`
  VdsL2NoRoute int64 `thrift:"vds_l2_no_route,43" db:"vds_l2_no_route" json:"vds_l2_no_route"`
  VdsFragmentQueueFail int64 `thrift:"vds_fragment_queue_fail,44" db:"vds_fragment_queue_fail" json:"vds_fragment_queue_fail"`
  VdsVlanFwdTx int64 `thrift:"vds_vlan_fwd_tx,45" db:"vds_vlan_fwd_tx" json:"vds_vlan_fwd_tx"`
  VdsVlanFwdEnq int64 `thrift:"vds_vlan_fwd_enq,46" db:"vds_vlan_fwd_enq" json:"vds_vlan_fwd_enq"`
  VdsDropNewFlow int64 `thrift:"vds_drop_new_flow,47" db:"vds_drop_new_flow" json:"vds_drop_new_flow"`
  VdsFlowEvict int64 `thrift:"vds_flow_evict,48" db:"vds_flow_evict" json:"vds_flow_evict"`
  VdsTrapOriginal int64 `thrift:"vds_trap_original,49" db:"vds_trap_original" json:"vds_trap_original"`
  VdsLeafToLeaf int64 `thrift:"vds_leaf_to_leaf,50" db:"vds_leaf_to_leaf" json:"vds_leaf_to_leaf"`
  VdsBmacIsidMismatch int64 `thrift:"vds_bmac_isid_mismatch,51" db:"vds_bmac_isid_mismatch" json:"vds_bmac_isid_mismatch"`
  VdsPktLoop int64 `thrift:"vds_pkt_loop,52" db:"vds_pkt_loop" json:"vds_pkt_loop"`
  VdsNoCryptPath int64 `thrift:"vds_no_crypt_path,53" db:"vds_no_crypt_path" json:"vds_no_crypt_path"`
  VdsInvalidHbsPkt int64 `thrift:"vds_invalid_hbs_pkt,54" db:"vds_invalid_hbs_pkt" json:"vds_invalid_hbs_pkt"`
  VdsNoFragEntry int64 `thrift:"vds_no_frag_entry,55" db:"vds_no_frag_entry" json:"vds_no_frag_entry"`
  VdsIcmpError int64 `thrift:"vds_icmp_error,56" db:"vds_icmp_error" json:"vds_icmp_error"`
  VdsCloneFail int64 `thrift:"vds_clone_fail,57" db:"vds_clone_fail" json:"vds_clone_fail"`
  VdsInvalidUnderlayEcmp int64 `thrift:"vds_invalid_underlay_ecmp,58" db:"vds_invalid_underlay_ecmp" json:"vds_invalid_underlay_ecmp"`
}

func NewVrDropStatsReq() *VrDropStatsReq {
  return &VrDropStatsReq{}
}


func (p *VrDropStatsReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrDropStatsReq) GetVdsRid() int16 {
  return p.VdsRid
}

func (p *VrDropStatsReq) GetVdsCore() int16 {
  return p.VdsCore
}

func (p *VrDropStatsReq) GetVdsDiscard() int64 {
  return p.VdsDiscard
}

func (p *VrDropStatsReq) GetVdsPcpuStatsFailureStatus() int8 {
  return p.VdsPcpuStatsFailureStatus
}

func (p *VrDropStatsReq) GetVdsPull() int64 {
  return p.VdsPull
}

func (p *VrDropStatsReq) GetVdsInvalidIf() int64 {
  return p.VdsInvalidIf
}

func (p *VrDropStatsReq) GetVdsInvalidArp() int64 {
  return p.VdsInvalidArp
}

func (p *VrDropStatsReq) GetVdsTrapNoIf() int64 {
  return p.VdsTrapNoIf
}

func (p *VrDropStatsReq) GetVdsNowhereToGo() int64 {
  return p.VdsNowhereToGo
}

func (p *VrDropStatsReq) GetVdsFlowQueueLimitExceeded() int64 {
  return p.VdsFlowQueueLimitExceeded
}

func (p *VrDropStatsReq) GetVdsFlowNoMemory() int64 {
  return p.VdsFlowNoMemory
}

func (p *VrDropStatsReq) GetVdsFlowInvalidProtocol() int64 {
  return p.VdsFlowInvalidProtocol
}

func (p *VrDropStatsReq) GetVdsFlowNatNoRflow() int64 {
  return p.VdsFlowNatNoRflow
}

func (p *VrDropStatsReq) GetVdsFlowActionDrop() int64 {
  return p.VdsFlowActionDrop
}

func (p *VrDropStatsReq) GetVdsFlowActionInvalid() int64 {
  return p.VdsFlowActionInvalid
}

func (p *VrDropStatsReq) GetVdsFlowUnusable() int64 {
  return p.VdsFlowUnusable
}

func (p *VrDropStatsReq) GetVdsFlowTableFull() int64 {
  return p.VdsFlowTableFull
}

func (p *VrDropStatsReq) GetVdsInterfaceTxDiscard() int64 {
  return p.VdsInterfaceTxDiscard
}

func (p *VrDropStatsReq) GetVdsInterfaceDrop() int64 {
  return p.VdsInterfaceDrop
}

func (p *VrDropStatsReq) GetVdsDuplicated() int64 {
  return p.VdsDuplicated
}

func (p *VrDropStatsReq) GetVdsPush() int64 {
  return p.VdsPush
}

func (p *VrDropStatsReq) GetVdsTTLExceeded() int64 {
  return p.VdsTTLExceeded
}

func (p *VrDropStatsReq) GetVdsInvalidNh() int64 {
  return p.VdsInvalidNh
}

func (p *VrDropStatsReq) GetVdsInvalidLabel() int64 {
  return p.VdsInvalidLabel
}

func (p *VrDropStatsReq) GetVdsInvalidProtocol() int64 {
  return p.VdsInvalidProtocol
}

func (p *VrDropStatsReq) GetVdsInterfaceRxDiscard() int64 {
  return p.VdsInterfaceRxDiscard
}

func (p *VrDropStatsReq) GetVdsInvalidMcastSource() int64 {
  return p.VdsInvalidMcastSource
}

func (p *VrDropStatsReq) GetVdsHeadAllocFail() int64 {
  return p.VdsHeadAllocFail
}

func (p *VrDropStatsReq) GetVdsPcowFail() int64 {
  return p.VdsPcowFail
}

func (p *VrDropStatsReq) GetVdsMcastDfBit() int64 {
  return p.VdsMcastDfBit
}

func (p *VrDropStatsReq) GetVdsMcastCloneFail() int64 {
  return p.VdsMcastCloneFail
}

func (p *VrDropStatsReq) GetVdsNoMemory() int64 {
  return p.VdsNoMemory
}

func (p *VrDropStatsReq) GetVdsRewriteFail() int64 {
  return p.VdsRewriteFail
}

func (p *VrDropStatsReq) GetVdsMisc() int64 {
  return p.VdsMisc
}

func (p *VrDropStatsReq) GetVdsInvalidPacket() int64 {
  return p.VdsInvalidPacket
}

func (p *VrDropStatsReq) GetVdsCksumErr() int64 {
  return p.VdsCksumErr
}

func (p *VrDropStatsReq) GetVdsNoFmd() int64 {
  return p.VdsNoFmd
}

func (p *VrDropStatsReq) GetVdsClonedOriginal() int64 {
  return p.VdsClonedOriginal
}

func (p *VrDropStatsReq) GetVdsInvalidVnid() int64 {
  return p.VdsInvalidVnid
}

func (p *VrDropStatsReq) GetVdsFragErr() int64 {
  return p.VdsFragErr
}

func (p *VrDropStatsReq) GetVdsInvalidSource() int64 {
  return p.VdsInvalidSource
}

func (p *VrDropStatsReq) GetVdsL2NoRoute() int64 {
  return p.VdsL2NoRoute
}

func (p *VrDropStatsReq) GetVdsFragmentQueueFail() int64 {
  return p.VdsFragmentQueueFail
}

func (p *VrDropStatsReq) GetVdsVlanFwdTx() int64 {
  return p.VdsVlanFwdTx
}

func (p *VrDropStatsReq) GetVdsVlanFwdEnq() int64 {
  return p.VdsVlanFwdEnq
}

func (p *VrDropStatsReq) GetVdsDropNewFlow() int64 {
  return p.VdsDropNewFlow
}

func (p *VrDropStatsReq) GetVdsFlowEvict() int64 {
  return p.VdsFlowEvict
}

func (p *VrDropStatsReq) GetVdsTrapOriginal() int64 {
  return p.VdsTrapOriginal
}

func (p *VrDropStatsReq) GetVdsLeafToLeaf() int64 {
  return p.VdsLeafToLeaf
}

func (p *VrDropStatsReq) GetVdsBmacIsidMismatch() int64 {
  return p.VdsBmacIsidMismatch
}

func (p *VrDropStatsReq) GetVdsPktLoop() int64 {
  return p.VdsPktLoop
}

func (p *VrDropStatsReq) GetVdsNoCryptPath() int64 {
  return p.VdsNoCryptPath
}

func (p *VrDropStatsReq) GetVdsInvalidHbsPkt() int64 {
  return p.VdsInvalidHbsPkt
}

func (p *VrDropStatsReq) GetVdsNoFragEntry() int64 {
  return p.VdsNoFragEntry
}

func (p *VrDropStatsReq) GetVdsIcmpError() int64 {
  return p.VdsIcmpError
}

func (p *VrDropStatsReq) GetVdsCloneFail() int64 {
  return p.VdsCloneFail
}

func (p *VrDropStatsReq) GetVdsInvalidUnderlayEcmp() int64 {
  return p.VdsInvalidUnderlayEcmp
}
func (p *VrDropStatsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 49:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField49(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField52(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField53(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField54(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 55:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField55(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 56:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField56(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 57:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField57(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 58:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField58(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrDropStatsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrDropStatsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VdsRid = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VdsCore = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VdsDiscard = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.VdsPcpuStatsFailureStatus = temp
}
  return nil
}

func (p *VrDropStatsReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VdsPull = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VdsInvalidIf = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VdsInvalidArp = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VdsTrapNoIf = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VdsNowhereToGo = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VdsFlowQueueLimitExceeded = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VdsFlowNoMemory = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VdsFlowInvalidProtocol = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.VdsFlowNatNoRflow = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VdsFlowActionDrop = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VdsFlowActionInvalid = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VdsFlowUnusable = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VdsFlowTableFull = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.VdsInterfaceTxDiscard = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.VdsInterfaceDrop = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.VdsDuplicated = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.VdsPush = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VdsTTLExceeded = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VdsInvalidNh = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VdsInvalidLabel = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.VdsInvalidProtocol = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.VdsInterfaceRxDiscard = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.VdsInvalidMcastSource = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.VdsHeadAllocFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.VdsPcowFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.VdsMcastDfBit = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.VdsMcastCloneFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.VdsNoMemory = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.VdsRewriteFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VdsMisc = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.VdsInvalidPacket = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.VdsCksumErr = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.VdsNoFmd = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.VdsClonedOriginal = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.VdsInvalidVnid = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.VdsFragErr = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VdsInvalidSource = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.VdsL2NoRoute = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.VdsFragmentQueueFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.VdsVlanFwdTx = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.VdsVlanFwdEnq = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.VdsDropNewFlow = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.VdsFlowEvict = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField49(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 49: ", err)
} else {
  p.VdsTrapOriginal = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.VdsLeafToLeaf = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.VdsBmacIsidMismatch = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.VdsPktLoop = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField53(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  p.VdsNoCryptPath = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField54(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 54: ", err)
} else {
  p.VdsInvalidHbsPkt = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField55(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.VdsNoFragEntry = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField56(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 56: ", err)
} else {
  p.VdsIcmpError = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField57(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 57: ", err)
} else {
  p.VdsCloneFail = v
}
  return nil
}

func (p *VrDropStatsReq)  ReadField58(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 58: ", err)
} else {
  p.VdsInvalidUnderlayEcmp = v
}
  return nil
}

func (p *VrDropStatsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_drop_stats_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField49(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField52(ctx, oprot); err != nil { return err }
    if err := p.writeField53(ctx, oprot); err != nil { return err }
    if err := p.writeField54(ctx, oprot); err != nil { return err }
    if err := p.writeField55(ctx, oprot); err != nil { return err }
    if err := p.writeField56(ctx, oprot); err != nil { return err }
    if err := p.writeField57(ctx, oprot); err != nil { return err }
    if err := p.writeField58(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrDropStatsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vds_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdsRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vds_rid: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_core", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vds_core: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.VdsCore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_core (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vds_core: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_discard", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vds_discard: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsDiscard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_discard (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vds_discard: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_pcpu_stats_failure_status", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vds_pcpu_stats_failure_status: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.VdsPcpuStatsFailureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_pcpu_stats_failure_status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vds_pcpu_stats_failure_status: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_pull", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vds_pull: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsPull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_pull (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vds_pull: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_if", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vds_invalid_if: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidIf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_if (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vds_invalid_if: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_arp", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vds_invalid_arp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidArp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_arp (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vds_invalid_arp: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_trap_no_if", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vds_trap_no_if: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsTrapNoIf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_trap_no_if (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vds_trap_no_if: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_nowhere_to_go", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vds_nowhere_to_go: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsNowhereToGo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_nowhere_to_go (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vds_nowhere_to_go: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_queue_limit_exceeded", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:vds_flow_queue_limit_exceeded: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowQueueLimitExceeded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_queue_limit_exceeded (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:vds_flow_queue_limit_exceeded: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_no_memory", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vds_flow_no_memory: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowNoMemory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_no_memory (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vds_flow_no_memory: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_invalid_protocol", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vds_flow_invalid_protocol: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowInvalidProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_invalid_protocol (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vds_flow_invalid_protocol: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_nat_no_rflow", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vds_flow_nat_no_rflow: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowNatNoRflow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_nat_no_rflow (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vds_flow_nat_no_rflow: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_action_drop", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vds_flow_action_drop: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowActionDrop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_action_drop (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vds_flow_action_drop: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_action_invalid", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:vds_flow_action_invalid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowActionInvalid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_action_invalid (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:vds_flow_action_invalid: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_unusable", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:vds_flow_unusable: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowUnusable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_unusable (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:vds_flow_unusable: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_table_full", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:vds_flow_table_full: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowTableFull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_table_full (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:vds_flow_table_full: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_interface_tx_discard", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vds_interface_tx_discard: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInterfaceTxDiscard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_interface_tx_discard (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vds_interface_tx_discard: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_interface_drop", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:vds_interface_drop: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInterfaceDrop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_interface_drop (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:vds_interface_drop: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_duplicated", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vds_duplicated: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsDuplicated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_duplicated (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vds_duplicated: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_push", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vds_push: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsPush)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_push (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vds_push: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_ttl_exceeded", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:vds_ttl_exceeded: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsTTLExceeded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_ttl_exceeded (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:vds_ttl_exceeded: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_nh", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vds_invalid_nh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidNh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_nh (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vds_invalid_nh: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_label", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:vds_invalid_label: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_label (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:vds_invalid_label: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_protocol", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:vds_invalid_protocol: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_protocol (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:vds_invalid_protocol: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_interface_rx_discard", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:vds_interface_rx_discard: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInterfaceRxDiscard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_interface_rx_discard (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:vds_interface_rx_discard: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_mcast_source", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:vds_invalid_mcast_source: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidMcastSource)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_mcast_source (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:vds_invalid_mcast_source: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_head_alloc_fail", thrift.I64, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:vds_head_alloc_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsHeadAllocFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_head_alloc_fail (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:vds_head_alloc_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_pcow_fail", thrift.I64, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:vds_pcow_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsPcowFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_pcow_fail (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:vds_pcow_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_mcast_df_bit", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:vds_mcast_df_bit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsMcastDfBit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_mcast_df_bit (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:vds_mcast_df_bit: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_mcast_clone_fail", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:vds_mcast_clone_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsMcastCloneFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_mcast_clone_fail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:vds_mcast_clone_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_no_memory", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:vds_no_memory: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsNoMemory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_no_memory (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:vds_no_memory: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_rewrite_fail", thrift.I64, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:vds_rewrite_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsRewriteFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_rewrite_fail (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:vds_rewrite_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_misc", thrift.I64, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:vds_misc: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsMisc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_misc (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:vds_misc: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_packet", thrift.I64, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:vds_invalid_packet: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidPacket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_packet (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:vds_invalid_packet: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_cksum_err", thrift.I64, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:vds_cksum_err: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsCksumErr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_cksum_err (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:vds_cksum_err: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_no_fmd", thrift.I64, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:vds_no_fmd: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsNoFmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_no_fmd (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:vds_no_fmd: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_cloned_original", thrift.I64, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:vds_cloned_original: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsClonedOriginal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_cloned_original (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:vds_cloned_original: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_vnid", thrift.I64, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:vds_invalid_vnid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidVnid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_vnid (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:vds_invalid_vnid: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_frag_err", thrift.I64, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:vds_frag_err: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFragErr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_frag_err (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:vds_frag_err: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_source", thrift.I64, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:vds_invalid_source: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidSource)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_source (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:vds_invalid_source: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_l2_no_route", thrift.I64, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:vds_l2_no_route: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsL2NoRoute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_l2_no_route (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:vds_l2_no_route: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_fragment_queue_fail", thrift.I64, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:vds_fragment_queue_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFragmentQueueFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_fragment_queue_fail (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:vds_fragment_queue_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_vlan_fwd_tx", thrift.I64, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:vds_vlan_fwd_tx: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsVlanFwdTx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_vlan_fwd_tx (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:vds_vlan_fwd_tx: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_vlan_fwd_enq", thrift.I64, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:vds_vlan_fwd_enq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsVlanFwdEnq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_vlan_fwd_enq (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:vds_vlan_fwd_enq: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_drop_new_flow", thrift.I64, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:vds_drop_new_flow: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsDropNewFlow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_drop_new_flow (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:vds_drop_new_flow: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_flow_evict", thrift.I64, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:vds_flow_evict: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsFlowEvict)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_flow_evict (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:vds_flow_evict: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField49(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_trap_original", thrift.I64, 49); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:vds_trap_original: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsTrapOriginal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_trap_original (49) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 49:vds_trap_original: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_leaf_to_leaf", thrift.I64, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:vds_leaf_to_leaf: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsLeafToLeaf)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_leaf_to_leaf (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:vds_leaf_to_leaf: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_bmac_isid_mismatch", thrift.I64, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:vds_bmac_isid_mismatch: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsBmacIsidMismatch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_bmac_isid_mismatch (51) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:vds_bmac_isid_mismatch: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_pkt_loop", thrift.I64, 52); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:vds_pkt_loop: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsPktLoop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_pkt_loop (52) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 52:vds_pkt_loop: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField53(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_no_crypt_path", thrift.I64, 53); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:vds_no_crypt_path: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsNoCryptPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_no_crypt_path (53) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 53:vds_no_crypt_path: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField54(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_hbs_pkt", thrift.I64, 54); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:vds_invalid_hbs_pkt: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidHbsPkt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_hbs_pkt (54) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 54:vds_invalid_hbs_pkt: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField55(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_no_frag_entry", thrift.I64, 55); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:vds_no_frag_entry: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsNoFragEntry)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_no_frag_entry (55) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 55:vds_no_frag_entry: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField56(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_icmp_error", thrift.I64, 56); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:vds_icmp_error: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsIcmpError)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_icmp_error (56) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 56:vds_icmp_error: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField57(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_clone_fail", thrift.I64, 57); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:vds_clone_fail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsCloneFail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_clone_fail (57) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 57:vds_clone_fail: ", p), err) }
  return err
}

func (p *VrDropStatsReq) writeField58(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vds_invalid_underlay_ecmp", thrift.I64, 58); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 58:vds_invalid_underlay_ecmp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.VdsInvalidUnderlayEcmp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vds_invalid_underlay_ecmp (58) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 58:vds_invalid_underlay_ecmp: ", p), err) }
  return err
}

func (p *VrDropStatsReq) Equals(other *VrDropStatsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.VdsRid != other.VdsRid { return false }
  if p.VdsCore != other.VdsCore { return false }
  if p.VdsDiscard != other.VdsDiscard { return false }
  if p.VdsPcpuStatsFailureStatus != other.VdsPcpuStatsFailureStatus { return false }
  if p.VdsPull != other.VdsPull { return false }
  if p.VdsInvalidIf != other.VdsInvalidIf { return false }
  if p.VdsInvalidArp != other.VdsInvalidArp { return false }
  if p.VdsTrapNoIf != other.VdsTrapNoIf { return false }
  if p.VdsNowhereToGo != other.VdsNowhereToGo { return false }
  if p.VdsFlowQueueLimitExceeded != other.VdsFlowQueueLimitExceeded { return false }
  if p.VdsFlowNoMemory != other.VdsFlowNoMemory { return false }
  if p.VdsFlowInvalidProtocol != other.VdsFlowInvalidProtocol { return false }
  if p.VdsFlowNatNoRflow != other.VdsFlowNatNoRflow { return false }
  if p.VdsFlowActionDrop != other.VdsFlowActionDrop { return false }
  if p.VdsFlowActionInvalid != other.VdsFlowActionInvalid { return false }
  if p.VdsFlowUnusable != other.VdsFlowUnusable { return false }
  if p.VdsFlowTableFull != other.VdsFlowTableFull { return false }
  if p.VdsInterfaceTxDiscard != other.VdsInterfaceTxDiscard { return false }
  if p.VdsInterfaceDrop != other.VdsInterfaceDrop { return false }
  if p.VdsDuplicated != other.VdsDuplicated { return false }
  if p.VdsPush != other.VdsPush { return false }
  if p.VdsTTLExceeded != other.VdsTTLExceeded { return false }
  if p.VdsInvalidNh != other.VdsInvalidNh { return false }
  if p.VdsInvalidLabel != other.VdsInvalidLabel { return false }
  if p.VdsInvalidProtocol != other.VdsInvalidProtocol { return false }
  if p.VdsInterfaceRxDiscard != other.VdsInterfaceRxDiscard { return false }
  if p.VdsInvalidMcastSource != other.VdsInvalidMcastSource { return false }
  if p.VdsHeadAllocFail != other.VdsHeadAllocFail { return false }
  if p.VdsPcowFail != other.VdsPcowFail { return false }
  if p.VdsMcastDfBit != other.VdsMcastDfBit { return false }
  if p.VdsMcastCloneFail != other.VdsMcastCloneFail { return false }
  if p.VdsNoMemory != other.VdsNoMemory { return false }
  if p.VdsRewriteFail != other.VdsRewriteFail { return false }
  if p.VdsMisc != other.VdsMisc { return false }
  if p.VdsInvalidPacket != other.VdsInvalidPacket { return false }
  if p.VdsCksumErr != other.VdsCksumErr { return false }
  if p.VdsNoFmd != other.VdsNoFmd { return false }
  if p.VdsClonedOriginal != other.VdsClonedOriginal { return false }
  if p.VdsInvalidVnid != other.VdsInvalidVnid { return false }
  if p.VdsFragErr != other.VdsFragErr { return false }
  if p.VdsInvalidSource != other.VdsInvalidSource { return false }
  if p.VdsL2NoRoute != other.VdsL2NoRoute { return false }
  if p.VdsFragmentQueueFail != other.VdsFragmentQueueFail { return false }
  if p.VdsVlanFwdTx != other.VdsVlanFwdTx { return false }
  if p.VdsVlanFwdEnq != other.VdsVlanFwdEnq { return false }
  if p.VdsDropNewFlow != other.VdsDropNewFlow { return false }
  if p.VdsFlowEvict != other.VdsFlowEvict { return false }
  if p.VdsTrapOriginal != other.VdsTrapOriginal { return false }
  if p.VdsLeafToLeaf != other.VdsLeafToLeaf { return false }
  if p.VdsBmacIsidMismatch != other.VdsBmacIsidMismatch { return false }
  if p.VdsPktLoop != other.VdsPktLoop { return false }
  if p.VdsNoCryptPath != other.VdsNoCryptPath { return false }
  if p.VdsInvalidHbsPkt != other.VdsInvalidHbsPkt { return false }
  if p.VdsNoFragEntry != other.VdsNoFragEntry { return false }
  if p.VdsIcmpError != other.VdsIcmpError { return false }
  if p.VdsCloneFail != other.VdsCloneFail { return false }
  if p.VdsInvalidUnderlayEcmp != other.VdsInvalidUnderlayEcmp { return false }
  return true
}

func (p *VrDropStatsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrDropStatsReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - QmrRid
//  - QmrID
//  - QmrDscp
//  - QmrDscpFcID
//  - QmrMplsQos
//  - QmrMplsQosFcID
//  - QmrDotonep
//  - QmrDotonepFcID
//  - QmrMarker
type VrQosMapReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  QmrRid int16 `thrift:"qmr_rid,2" db:"qmr_rid" json:"qmr_rid"`
  QmrID int16 `thrift:"qmr_id,3" db:"qmr_id" json:"qmr_id"`
  QmrDscp []int8 `thrift:"qmr_dscp,4" db:"qmr_dscp" json:"qmr_dscp"`
  QmrDscpFcID []int8 `thrift:"qmr_dscp_fc_id,5" db:"qmr_dscp_fc_id" json:"qmr_dscp_fc_id"`
  QmrMplsQos []int8 `thrift:"qmr_mpls_qos,6" db:"qmr_mpls_qos" json:"qmr_mpls_qos"`
  QmrMplsQosFcID []int8 `thrift:"qmr_mpls_qos_fc_id,7" db:"qmr_mpls_qos_fc_id" json:"qmr_mpls_qos_fc_id"`
  QmrDotonep []int8 `thrift:"qmr_dotonep,8" db:"qmr_dotonep" json:"qmr_dotonep"`
  QmrDotonepFcID []int8 `thrift:"qmr_dotonep_fc_id,9" db:"qmr_dotonep_fc_id" json:"qmr_dotonep_fc_id"`
  QmrMarker int16 `thrift:"qmr_marker,10" db:"qmr_marker" json:"qmr_marker"`
}

func NewVrQosMapReq() *VrQosMapReq {
  return &VrQosMapReq{}
}


func (p *VrQosMapReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrQosMapReq) GetQmrRid() int16 {
  return p.QmrRid
}

func (p *VrQosMapReq) GetQmrID() int16 {
  return p.QmrID
}

func (p *VrQosMapReq) GetQmrDscp() []int8 {
  return p.QmrDscp
}

func (p *VrQosMapReq) GetQmrDscpFcID() []int8 {
  return p.QmrDscpFcID
}

func (p *VrQosMapReq) GetQmrMplsQos() []int8 {
  return p.QmrMplsQos
}

func (p *VrQosMapReq) GetQmrMplsQosFcID() []int8 {
  return p.QmrMplsQosFcID
}

func (p *VrQosMapReq) GetQmrDotonep() []int8 {
  return p.QmrDotonep
}

func (p *VrQosMapReq) GetQmrDotonepFcID() []int8 {
  return p.QmrDotonepFcID
}

func (p *VrQosMapReq) GetQmrMarker() int16 {
  return p.QmrMarker
}
func (p *VrQosMapReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrQosMapReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QmrRid = v
}
  return nil
}

func (p *VrQosMapReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QmrID = v
}
  return nil
}

func (p *VrQosMapReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrDscp =  tSlice
  for i := 0; i < size; i ++ {
var _elem92 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem92 = temp
}
    p.QmrDscp = append(p.QmrDscp, _elem92)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrDscpFcID =  tSlice
  for i := 0; i < size; i ++ {
var _elem93 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem93 = temp
}
    p.QmrDscpFcID = append(p.QmrDscpFcID, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrMplsQos =  tSlice
  for i := 0; i < size; i ++ {
var _elem94 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem94 = temp
}
    p.QmrMplsQos = append(p.QmrMplsQos, _elem94)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrMplsQosFcID =  tSlice
  for i := 0; i < size; i ++ {
var _elem95 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem95 = temp
}
    p.QmrMplsQosFcID = append(p.QmrMplsQosFcID, _elem95)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrDotonep =  tSlice
  for i := 0; i < size; i ++ {
var _elem96 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem96 = temp
}
    p.QmrDotonep = append(p.QmrDotonep, _elem96)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.QmrDotonepFcID =  tSlice
  for i := 0; i < size; i ++ {
var _elem97 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem97 = temp
}
    p.QmrDotonepFcID = append(p.QmrDotonepFcID, _elem97)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrQosMapReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.QmrMarker = v
}
  return nil
}

func (p *VrQosMapReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_qos_map_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrQosMapReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:qmr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.QmrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qmr_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:qmr_rid: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_id", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:qmr_id: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.QmrID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qmr_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:qmr_id: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_dscp", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:qmr_dscp: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrDscp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrDscp {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:qmr_dscp: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_dscp_fc_id", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:qmr_dscp_fc_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrDscpFcID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrDscpFcID {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:qmr_dscp_fc_id: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_mpls_qos", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:qmr_mpls_qos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrMplsQos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrMplsQos {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:qmr_mpls_qos: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_mpls_qos_fc_id", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:qmr_mpls_qos_fc_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrMplsQosFcID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrMplsQosFcID {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:qmr_mpls_qos_fc_id: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_dotonep", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:qmr_dotonep: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrDotonep)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrDotonep {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:qmr_dotonep: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_dotonep_fc_id", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:qmr_dotonep_fc_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.QmrDotonepFcID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QmrDotonepFcID {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:qmr_dotonep_fc_id: ", p), err) }
  return err
}

func (p *VrQosMapReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qmr_marker", thrift.I16, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:qmr_marker: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.QmrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qmr_marker (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:qmr_marker: ", p), err) }
  return err
}

func (p *VrQosMapReq) Equals(other *VrQosMapReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.QmrRid != other.QmrRid { return false }
  if p.QmrID != other.QmrID { return false }
  if len(p.QmrDscp) != len(other.QmrDscp) { return false }
  for i, _tgt := range p.QmrDscp {
    _src98 := other.QmrDscp[i]
    if _tgt != _src98 { return false }
  }
  if len(p.QmrDscpFcID) != len(other.QmrDscpFcID) { return false }
  for i, _tgt := range p.QmrDscpFcID {
    _src99 := other.QmrDscpFcID[i]
    if _tgt != _src99 { return false }
  }
  if len(p.QmrMplsQos) != len(other.QmrMplsQos) { return false }
  for i, _tgt := range p.QmrMplsQos {
    _src100 := other.QmrMplsQos[i]
    if _tgt != _src100 { return false }
  }
  if len(p.QmrMplsQosFcID) != len(other.QmrMplsQosFcID) { return false }
  for i, _tgt := range p.QmrMplsQosFcID {
    _src101 := other.QmrMplsQosFcID[i]
    if _tgt != _src101 { return false }
  }
  if len(p.QmrDotonep) != len(other.QmrDotonep) { return false }
  for i, _tgt := range p.QmrDotonep {
    _src102 := other.QmrDotonep[i]
    if _tgt != _src102 { return false }
  }
  if len(p.QmrDotonepFcID) != len(other.QmrDotonepFcID) { return false }
  for i, _tgt := range p.QmrDotonepFcID {
    _src103 := other.QmrDotonepFcID[i]
    if _tgt != _src103 { return false }
  }
  if p.QmrMarker != other.QmrMarker { return false }
  return true
}

func (p *VrQosMapReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrQosMapReq(%+v)", *p)
}

// Attributes:
//  - HOp
//  - FmrRid
//  - FmrID
//  - FmrDscp
//  - FmrMplsQos
//  - FmrDotonep
//  - FmrQueueID
//  - FmrMarker
type VrFcMapReq struct {
  HOp SandeshOp `thrift:"h_op,1" db:"h_op" json:"h_op"`
  FmrRid int16 `thrift:"fmr_rid,2" db:"fmr_rid" json:"fmr_rid"`
  FmrID []int16 `thrift:"fmr_id,3" db:"fmr_id" json:"fmr_id"`
  FmrDscp []int8 `thrift:"fmr_dscp,4" db:"fmr_dscp" json:"fmr_dscp"`
  FmrMplsQos []int8 `thrift:"fmr_mpls_qos,5" db:"fmr_mpls_qos" json:"fmr_mpls_qos"`
  FmrDotonep []int8 `thrift:"fmr_dotonep,6" db:"fmr_dotonep" json:"fmr_dotonep"`
  FmrQueueID []int8 `thrift:"fmr_queue_id,7" db:"fmr_queue_id" json:"fmr_queue_id"`
  FmrMarker int16 `thrift:"fmr_marker,8" db:"fmr_marker" json:"fmr_marker"`
}

func NewVrFcMapReq() *VrFcMapReq {
  return &VrFcMapReq{}
}


func (p *VrFcMapReq) GetHOp() SandeshOp {
  return p.HOp
}

func (p *VrFcMapReq) GetFmrRid() int16 {
  return p.FmrRid
}

func (p *VrFcMapReq) GetFmrID() []int16 {
  return p.FmrID
}

func (p *VrFcMapReq) GetFmrDscp() []int8 {
  return p.FmrDscp
}

func (p *VrFcMapReq) GetFmrMplsQos() []int8 {
  return p.FmrMplsQos
}

func (p *VrFcMapReq) GetFmrDotonep() []int8 {
  return p.FmrDotonep
}

func (p *VrFcMapReq) GetFmrQueueID() []int8 {
  return p.FmrQueueID
}

func (p *VrFcMapReq) GetFmrMarker() int16 {
  return p.FmrMarker
}
func (p *VrFcMapReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.HOp = temp
}
  return nil
}

func (p *VrFcMapReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FmrRid = v
}
  return nil
}

func (p *VrFcMapReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.FmrID =  tSlice
  for i := 0; i < size; i ++ {
var _elem104 int16
    if v, err := iprot.ReadI16(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem104 = v
}
    p.FmrID = append(p.FmrID, _elem104)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.FmrDscp =  tSlice
  for i := 0; i < size; i ++ {
var _elem105 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem105 = temp
}
    p.FmrDscp = append(p.FmrDscp, _elem105)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.FmrMplsQos =  tSlice
  for i := 0; i < size; i ++ {
var _elem106 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem106 = temp
}
    p.FmrMplsQos = append(p.FmrMplsQos, _elem106)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.FmrDotonep =  tSlice
  for i := 0; i < size; i ++ {
var _elem107 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem107 = temp
}
    p.FmrDotonep = append(p.FmrDotonep, _elem107)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.FmrQueueID =  tSlice
  for i := 0; i < size; i ++ {
var _elem108 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem108 = temp
}
    p.FmrQueueID = append(p.FmrQueueID, _elem108)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFcMapReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FmrMarker = v
}
  return nil
}

func (p *VrFcMapReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_fc_map_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrFcMapReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "h_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:h_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.h_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:h_op: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fmr_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FmrRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fmr_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fmr_rid: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_id", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fmr_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.FmrID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FmrID {
    if err := oprot.WriteI16(ctx, int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fmr_id: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_dscp", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fmr_dscp: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.FmrDscp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FmrDscp {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fmr_dscp: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_mpls_qos", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fmr_mpls_qos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.FmrMplsQos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FmrMplsQos {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fmr_mpls_qos: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_dotonep", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fmr_dotonep: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.FmrDotonep)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FmrDotonep {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fmr_dotonep: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_queue_id", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fmr_queue_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.FmrQueueID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FmrQueueID {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fmr_queue_id: ", p), err) }
  return err
}

func (p *VrFcMapReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fmr_marker", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fmr_marker: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FmrMarker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fmr_marker (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fmr_marker: ", p), err) }
  return err
}

func (p *VrFcMapReq) Equals(other *VrFcMapReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HOp != other.HOp { return false }
  if p.FmrRid != other.FmrRid { return false }
  if len(p.FmrID) != len(other.FmrID) { return false }
  for i, _tgt := range p.FmrID {
    _src109 := other.FmrID[i]
    if _tgt != _src109 { return false }
  }
  if len(p.FmrDscp) != len(other.FmrDscp) { return false }
  for i, _tgt := range p.FmrDscp {
    _src110 := other.FmrDscp[i]
    if _tgt != _src110 { return false }
  }
  if len(p.FmrMplsQos) != len(other.FmrMplsQos) { return false }
  for i, _tgt := range p.FmrMplsQos {
    _src111 := other.FmrMplsQos[i]
    if _tgt != _src111 { return false }
  }
  if len(p.FmrDotonep) != len(other.FmrDotonep) { return false }
  for i, _tgt := range p.FmrDotonep {
    _src112 := other.FmrDotonep[i]
    if _tgt != _src112 { return false }
  }
  if len(p.FmrQueueID) != len(other.FmrQueueID) { return false }
  for i, _tgt := range p.FmrQueueID {
    _src113 := other.FmrQueueID[i]
    if _tgt != _src113 { return false }
  }
  if p.FmrMarker != other.FmrMarker { return false }
  return true
}

func (p *VrFcMapReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrFcMapReq(%+v)", *p)
}

// Attributes:
//  - FrespOp
//  - FrespRid
//  - FrespFlags
//  - FrespIndex
//  - FrespI8s
//  - FrespPackets
//  - FrespStatsOflow
//  - FrespGenID
type VrFlowResponse struct {
  FrespOp FlowOp `thrift:"fresp_op,1" db:"fresp_op" json:"fresp_op"`
  FrespRid int16 `thrift:"fresp_rid,2" db:"fresp_rid" json:"fresp_rid"`
  FrespFlags int16 `thrift:"fresp_flags,3" db:"fresp_flags" json:"fresp_flags"`
  FrespIndex int32 `thrift:"fresp_index,4" db:"fresp_index" json:"fresp_index"`
  FrespI8s int32 `thrift:"fresp_i8s,5" db:"fresp_i8s" json:"fresp_i8s"`
  FrespPackets int32 `thrift:"fresp_packets,6" db:"fresp_packets" json:"fresp_packets"`
  FrespStatsOflow int32 `thrift:"fresp_stats_oflow,7" db:"fresp_stats_oflow" json:"fresp_stats_oflow"`
  FrespGenID int8 `thrift:"fresp_gen_id,8" db:"fresp_gen_id" json:"fresp_gen_id"`
}

func NewVrFlowResponse() *VrFlowResponse {
  return &VrFlowResponse{}
}


func (p *VrFlowResponse) GetFrespOp() FlowOp {
  return p.FrespOp
}

func (p *VrFlowResponse) GetFrespRid() int16 {
  return p.FrespRid
}

func (p *VrFlowResponse) GetFrespFlags() int16 {
  return p.FrespFlags
}

func (p *VrFlowResponse) GetFrespIndex() int32 {
  return p.FrespIndex
}

func (p *VrFlowResponse) GetFrespI8s() int32 {
  return p.FrespI8s
}

func (p *VrFlowResponse) GetFrespPackets() int32 {
  return p.FrespPackets
}

func (p *VrFlowResponse) GetFrespStatsOflow() int32 {
  return p.FrespStatsOflow
}

func (p *VrFlowResponse) GetFrespGenID() int8 {
  return p.FrespGenID
}
func (p *VrFlowResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrFlowResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FlowOp(v)
  p.FrespOp = temp
}
  return nil
}

func (p *VrFlowResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FrespRid = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FrespFlags = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FrespIndex = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FrespI8s = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FrespPackets = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FrespStatsOflow = v
}
  return nil
}

func (p *VrFlowResponse)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := int8(v)
  p.FrespGenID = temp
}
  return nil
}

func (p *VrFlowResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_flow_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrFlowResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fresp_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrespOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fresp_op: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fresp_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrespRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fresp_rid: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_flags", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fresp_flags: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FrespFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_flags (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fresp_flags: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fresp_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrespIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fresp_index: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_i8s", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fresp_i8s: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrespI8s)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_i8s (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fresp_i8s: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_packets", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fresp_packets: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrespPackets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_packets (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fresp_packets: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_stats_oflow", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fresp_stats_oflow: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FrespStatsOflow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_stats_oflow (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fresp_stats_oflow: ", p), err) }
  return err
}

func (p *VrFlowResponse) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fresp_gen_id", thrift.BYTE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fresp_gen_id: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.FrespGenID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fresp_gen_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fresp_gen_id: ", p), err) }
  return err
}

func (p *VrFlowResponse) Equals(other *VrFlowResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FrespOp != other.FrespOp { return false }
  if p.FrespRid != other.FrespRid { return false }
  if p.FrespFlags != other.FrespFlags { return false }
  if p.FrespIndex != other.FrespIndex { return false }
  if p.FrespI8s != other.FrespI8s { return false }
  if p.FrespPackets != other.FrespPackets { return false }
  if p.FrespStatsOflow != other.FrespStatsOflow { return false }
  if p.FrespGenID != other.FrespGenID { return false }
  return true
}

func (p *VrFlowResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrFlowResponse(%+v)", *p)
}

// Attributes:
//  - FtableOp
//  - FtableRid
//  - FtableSize
//  - FtableDev
//  - FtableFilePath
//  - FtableUsedEntries
//  - FtableProcessed
//  - FtableDeleted
//  - FtableAdded
//  - FtableCreated
//  - FtableChanged
//  - FtableHoldOflows
//  - FtableCpus
//  - FtableOflowEntries
//  - FtableHoldStat
//  - FtableBurstFreeTokens
//  - FtableHoldEntries
type VrFlowTableData struct {
  FtableOp FlowOp `thrift:"ftable_op,1" db:"ftable_op" json:"ftable_op"`
  FtableRid int16 `thrift:"ftable_rid,2" db:"ftable_rid" json:"ftable_rid"`
  FtableSize int32 `thrift:"ftable_size,3" db:"ftable_size" json:"ftable_size"`
  FtableDev int16 `thrift:"ftable_dev,4" db:"ftable_dev" json:"ftable_dev"`
  FtableFilePath string `thrift:"ftable_file_path,5" db:"ftable_file_path" json:"ftable_file_path"`
  FtableUsedEntries int64 `thrift:"ftable_used_entries,6" db:"ftable_used_entries" json:"ftable_used_entries"`
  FtableProcessed int64 `thrift:"ftable_processed,7" db:"ftable_processed" json:"ftable_processed"`
  FtableDeleted int64 `thrift:"ftable_deleted,8" db:"ftable_deleted" json:"ftable_deleted"`
  FtableAdded int64 `thrift:"ftable_added,9" db:"ftable_added" json:"ftable_added"`
  FtableCreated int64 `thrift:"ftable_created,10" db:"ftable_created" json:"ftable_created"`
  FtableChanged int64 `thrift:"ftable_changed,11" db:"ftable_changed" json:"ftable_changed"`
  FtableHoldOflows int32 `thrift:"ftable_hold_oflows,12" db:"ftable_hold_oflows" json:"ftable_hold_oflows"`
  FtableCpus int32 `thrift:"ftable_cpus,13" db:"ftable_cpus" json:"ftable_cpus"`
  FtableOflowEntries int32 `thrift:"ftable_oflow_entries,14" db:"ftable_oflow_entries" json:"ftable_oflow_entries"`
  FtableHoldStat []int32 `thrift:"ftable_hold_stat,15" db:"ftable_hold_stat" json:"ftable_hold_stat"`
  FtableBurstFreeTokens int32 `thrift:"ftable_burst_free_tokens,16" db:"ftable_burst_free_tokens" json:"ftable_burst_free_tokens"`
  FtableHoldEntries int32 `thrift:"ftable_hold_entries,17" db:"ftable_hold_entries" json:"ftable_hold_entries"`
}

func NewVrFlowTableData() *VrFlowTableData {
  return &VrFlowTableData{}
}


func (p *VrFlowTableData) GetFtableOp() FlowOp {
  return p.FtableOp
}

func (p *VrFlowTableData) GetFtableRid() int16 {
  return p.FtableRid
}

func (p *VrFlowTableData) GetFtableSize() int32 {
  return p.FtableSize
}

func (p *VrFlowTableData) GetFtableDev() int16 {
  return p.FtableDev
}

func (p *VrFlowTableData) GetFtableFilePath() string {
  return p.FtableFilePath
}

func (p *VrFlowTableData) GetFtableUsedEntries() int64 {
  return p.FtableUsedEntries
}

func (p *VrFlowTableData) GetFtableProcessed() int64 {
  return p.FtableProcessed
}

func (p *VrFlowTableData) GetFtableDeleted() int64 {
  return p.FtableDeleted
}

func (p *VrFlowTableData) GetFtableAdded() int64 {
  return p.FtableAdded
}

func (p *VrFlowTableData) GetFtableCreated() int64 {
  return p.FtableCreated
}

func (p *VrFlowTableData) GetFtableChanged() int64 {
  return p.FtableChanged
}

func (p *VrFlowTableData) GetFtableHoldOflows() int32 {
  return p.FtableHoldOflows
}

func (p *VrFlowTableData) GetFtableCpus() int32 {
  return p.FtableCpus
}

func (p *VrFlowTableData) GetFtableOflowEntries() int32 {
  return p.FtableOflowEntries
}

func (p *VrFlowTableData) GetFtableHoldStat() []int32 {
  return p.FtableHoldStat
}

func (p *VrFlowTableData) GetFtableBurstFreeTokens() int32 {
  return p.FtableBurstFreeTokens
}

func (p *VrFlowTableData) GetFtableHoldEntries() int32 {
  return p.FtableHoldEntries
}
func (p *VrFlowTableData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrFlowTableData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FlowOp(v)
  p.FtableOp = temp
}
  return nil
}

func (p *VrFlowTableData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FtableRid = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FtableSize = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FtableDev = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FtableFilePath = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FtableUsedEntries = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FtableProcessed = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FtableDeleted = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FtableAdded = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FtableCreated = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FtableChanged = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.FtableHoldOflows = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FtableCpus = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.FtableOflowEntries = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FtableHoldStat =  tSlice
  for i := 0; i < size; i ++ {
var _elem114 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem114 = v
}
    p.FtableHoldStat = append(p.FtableHoldStat, _elem114)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrFlowTableData)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.FtableBurstFreeTokens = v
}
  return nil
}

func (p *VrFlowTableData)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.FtableHoldEntries = v
}
  return nil
}

func (p *VrFlowTableData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_flow_table_data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrFlowTableData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ftable_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ftable_op: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ftable_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FtableRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ftable_rid: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ftable_size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ftable_size: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_dev", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ftable_dev: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.FtableDev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_dev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ftable_dev: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_file_path", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ftable_file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FtableFilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_file_path (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ftable_file_path: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_used_entries", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ftable_used_entries: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableUsedEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_used_entries (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ftable_used_entries: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_processed", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ftable_processed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableProcessed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_processed (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ftable_processed: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_deleted", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ftable_deleted: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableDeleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_deleted (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ftable_deleted: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_added", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ftable_added: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableAdded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_added (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ftable_added: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_created", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ftable_created: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableCreated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_created (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ftable_created: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_changed", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ftable_changed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FtableChanged)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_changed (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ftable_changed: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_hold_oflows", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ftable_hold_oflows: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableHoldOflows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_hold_oflows (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ftable_hold_oflows: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_cpus", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:ftable_cpus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableCpus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_cpus (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:ftable_cpus: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_oflow_entries", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ftable_oflow_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableOflowEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_oflow_entries (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ftable_oflow_entries: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_hold_stat", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ftable_hold_stat: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.FtableHoldStat)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FtableHoldStat {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ftable_hold_stat: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_burst_free_tokens", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:ftable_burst_free_tokens: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableBurstFreeTokens)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_burst_free_tokens (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:ftable_burst_free_tokens: ", p), err) }
  return err
}

func (p *VrFlowTableData) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ftable_hold_entries", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:ftable_hold_entries: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FtableHoldEntries)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ftable_hold_entries (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:ftable_hold_entries: ", p), err) }
  return err
}

func (p *VrFlowTableData) Equals(other *VrFlowTableData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FtableOp != other.FtableOp { return false }
  if p.FtableRid != other.FtableRid { return false }
  if p.FtableSize != other.FtableSize { return false }
  if p.FtableDev != other.FtableDev { return false }
  if p.FtableFilePath != other.FtableFilePath { return false }
  if p.FtableUsedEntries != other.FtableUsedEntries { return false }
  if p.FtableProcessed != other.FtableProcessed { return false }
  if p.FtableDeleted != other.FtableDeleted { return false }
  if p.FtableAdded != other.FtableAdded { return false }
  if p.FtableCreated != other.FtableCreated { return false }
  if p.FtableChanged != other.FtableChanged { return false }
  if p.FtableHoldOflows != other.FtableHoldOflows { return false }
  if p.FtableCpus != other.FtableCpus { return false }
  if p.FtableOflowEntries != other.FtableOflowEntries { return false }
  if len(p.FtableHoldStat) != len(other.FtableHoldStat) { return false }
  for i, _tgt := range p.FtableHoldStat {
    _src115 := other.FtableHoldStat[i]
    if _tgt != _src115 { return false }
  }
  if p.FtableBurstFreeTokens != other.FtableBurstFreeTokens { return false }
  if p.FtableHoldEntries != other.FtableHoldEntries { return false }
  return true
}

func (p *VrFlowTableData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrFlowTableData(%+v)", *p)
}

// Attributes:
//  - BtableOp
//  - BtableRid
//  - BtableSize
//  - BtableDev
//  - BtableFilePath
type VrBridgeTableData struct {
  BtableOp SandeshOp `thrift:"btable_op,1" db:"btable_op" json:"btable_op"`
  BtableRid int16 `thrift:"btable_rid,2" db:"btable_rid" json:"btable_rid"`
  BtableSize int32 `thrift:"btable_size,3" db:"btable_size" json:"btable_size"`
  BtableDev int16 `thrift:"btable_dev,4" db:"btable_dev" json:"btable_dev"`
  BtableFilePath string `thrift:"btable_file_path,5" db:"btable_file_path" json:"btable_file_path"`
}

func NewVrBridgeTableData() *VrBridgeTableData {
  return &VrBridgeTableData{}
}


func (p *VrBridgeTableData) GetBtableOp() SandeshOp {
  return p.BtableOp
}

func (p *VrBridgeTableData) GetBtableRid() int16 {
  return p.BtableRid
}

func (p *VrBridgeTableData) GetBtableSize() int32 {
  return p.BtableSize
}

func (p *VrBridgeTableData) GetBtableDev() int16 {
  return p.BtableDev
}

func (p *VrBridgeTableData) GetBtableFilePath() string {
  return p.BtableFilePath
}
func (p *VrBridgeTableData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrBridgeTableData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.BtableOp = temp
}
  return nil
}

func (p *VrBridgeTableData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BtableRid = v
}
  return nil
}

func (p *VrBridgeTableData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BtableSize = v
}
  return nil
}

func (p *VrBridgeTableData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BtableDev = v
}
  return nil
}

func (p *VrBridgeTableData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BtableFilePath = v
}
  return nil
}

func (p *VrBridgeTableData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_bridge_table_data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrBridgeTableData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "btable_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:btable_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BtableOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.btable_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:btable_op: ", p), err) }
  return err
}

func (p *VrBridgeTableData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "btable_rid", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:btable_rid: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.BtableRid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.btable_rid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:btable_rid: ", p), err) }
  return err
}

func (p *VrBridgeTableData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "btable_size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:btable_size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BtableSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.btable_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:btable_size: ", p), err) }
  return err
}

func (p *VrBridgeTableData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "btable_dev", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:btable_dev: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.BtableDev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.btable_dev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:btable_dev: ", p), err) }
  return err
}

func (p *VrBridgeTableData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "btable_file_path", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:btable_file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BtableFilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.btable_file_path (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:btable_file_path: ", p), err) }
  return err
}

func (p *VrBridgeTableData) Equals(other *VrBridgeTableData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.BtableOp != other.BtableOp { return false }
  if p.BtableRid != other.BtableRid { return false }
  if p.BtableSize != other.BtableSize { return false }
  if p.BtableDev != other.BtableDev { return false }
  if p.BtableFilePath != other.BtableFilePath { return false }
  return true
}

func (p *VrBridgeTableData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrBridgeTableData(%+v)", *p)
}

// Attributes:
//  - VhpOp
//  - VhpMem
//  - VhpPsize
//  - VhpResp
//  - VhpMemSz
//  - VhpFilePaths
//  - VhpFilePathSz
type VrHugepageConfig struct {
  VhpOp SandeshOp `thrift:"vhp_op,1" db:"vhp_op" json:"vhp_op"`
  VhpMem []int64 `thrift:"vhp_mem,2" db:"vhp_mem" json:"vhp_mem"`
  VhpPsize []int32 `thrift:"vhp_psize,3" db:"vhp_psize" json:"vhp_psize"`
  VhpResp int32 `thrift:"vhp_resp,4" db:"vhp_resp" json:"vhp_resp"`
  VhpMemSz []int32 `thrift:"vhp_mem_sz,5" db:"vhp_mem_sz" json:"vhp_mem_sz"`
  VhpFilePaths []int8 `thrift:"vhp_file_paths,6" db:"vhp_file_paths" json:"vhp_file_paths"`
  VhpFilePathSz []int32 `thrift:"vhp_file_path_sz,7" db:"vhp_file_path_sz" json:"vhp_file_path_sz"`
}

func NewVrHugepageConfig() *VrHugepageConfig {
  return &VrHugepageConfig{}
}


func (p *VrHugepageConfig) GetVhpOp() SandeshOp {
  return p.VhpOp
}

func (p *VrHugepageConfig) GetVhpMem() []int64 {
  return p.VhpMem
}

func (p *VrHugepageConfig) GetVhpPsize() []int32 {
  return p.VhpPsize
}

func (p *VrHugepageConfig) GetVhpResp() int32 {
  return p.VhpResp
}

func (p *VrHugepageConfig) GetVhpMemSz() []int32 {
  return p.VhpMemSz
}

func (p *VrHugepageConfig) GetVhpFilePaths() []int8 {
  return p.VhpFilePaths
}

func (p *VrHugepageConfig) GetVhpFilePathSz() []int32 {
  return p.VhpFilePathSz
}
func (p *VrHugepageConfig) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VrHugepageConfig)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SandeshOp(v)
  p.VhpOp = temp
}
  return nil
}

func (p *VrHugepageConfig)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VhpMem =  tSlice
  for i := 0; i < size; i ++ {
var _elem116 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem116 = v
}
    p.VhpMem = append(p.VhpMem, _elem116)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrHugepageConfig)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VhpPsize =  tSlice
  for i := 0; i < size; i ++ {
var _elem117 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem117 = v
}
    p.VhpPsize = append(p.VhpPsize, _elem117)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrHugepageConfig)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VhpResp = v
}
  return nil
}

func (p *VrHugepageConfig)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VhpMemSz =  tSlice
  for i := 0; i < size; i ++ {
var _elem118 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem118 = v
}
    p.VhpMemSz = append(p.VhpMemSz, _elem118)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrHugepageConfig)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int8, 0, size)
  p.VhpFilePaths =  tSlice
  for i := 0; i < size; i ++ {
var _elem119 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _elem119 = temp
}
    p.VhpFilePaths = append(p.VhpFilePaths, _elem119)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrHugepageConfig)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.VhpFilePathSz =  tSlice
  for i := 0; i < size; i ++ {
var _elem120 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem120 = v
}
    p.VhpFilePathSz = append(p.VhpFilePathSz, _elem120)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VrHugepageConfig) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "vr_hugepage_config"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VrHugepageConfig) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vhp_op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VhpOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vhp_op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vhp_op: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_mem", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vhp_mem: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.VhpMem)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VhpMem {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vhp_mem: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_psize", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vhp_psize: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VhpPsize)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VhpPsize {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vhp_psize: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_resp", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vhp_resp: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VhpResp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vhp_resp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vhp_resp: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_mem_sz", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vhp_mem_sz: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VhpMemSz)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VhpMemSz {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vhp_mem_sz: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_file_paths", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vhp_file_paths: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BYTE, len(p.VhpFilePaths)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VhpFilePaths {
    if err := oprot.WriteByte(ctx, int8(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vhp_file_paths: ", p), err) }
  return err
}

func (p *VrHugepageConfig) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vhp_file_path_sz", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:vhp_file_path_sz: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.VhpFilePathSz)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VhpFilePathSz {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:vhp_file_path_sz: ", p), err) }
  return err
}

func (p *VrHugepageConfig) Equals(other *VrHugepageConfig) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.VhpOp != other.VhpOp { return false }
  if len(p.VhpMem) != len(other.VhpMem) { return false }
  for i, _tgt := range p.VhpMem {
    _src121 := other.VhpMem[i]
    if _tgt != _src121 { return false }
  }
  if len(p.VhpPsize) != len(other.VhpPsize) { return false }
  for i, _tgt := range p.VhpPsize {
    _src122 := other.VhpPsize[i]
    if _tgt != _src122 { return false }
  }
  if p.VhpResp != other.VhpResp { return false }
  if len(p.VhpMemSz) != len(other.VhpMemSz) { return false }
  for i, _tgt := range p.VhpMemSz {
    _src123 := other.VhpMemSz[i]
    if _tgt != _src123 { return false }
  }
  if len(p.VhpFilePaths) != len(other.VhpFilePaths) { return false }
  for i, _tgt := range p.VhpFilePaths {
    _src124 := other.VhpFilePaths[i]
    if _tgt != _src124 { return false }
  }
  if len(p.VhpFilePathSz) != len(other.VhpFilePathSz) { return false }
  for i, _tgt := range p.VhpFilePathSz {
    _src125 := other.VhpFilePathSz[i]
    if _tgt != _src125 { return false }
  }
  return true
}

func (p *VrHugepageConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VrHugepageConfig(%+v)", *p)
}

